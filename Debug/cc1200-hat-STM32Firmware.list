
cc1200-hat-STM32Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014944  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  08014ae8  08014ae8  00015ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015870  08015870  000172c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015870  08015870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015878  08015878  000172c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015878  08015878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801587c  0801587c  0001687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08015880  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a9c  200002c8  08015b48  000172c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006d64  08015b48  00017d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b509  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008363  00000000  00000000  00052801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e8  00000000  00000000  0005ab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b72  00000000  00000000  0005cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c6e  00000000  00000000  0005eac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003126b  00000000  00000000  00082730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad56b  00000000  00000000  000b399b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa40  00000000  00000000  00160f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016b98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014acc 	.word	0x08014acc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	08014acc 	.word	0x08014acc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b9be 	b.w	8000ffc <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	468e      	mov	lr, r1
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	4688      	mov	r8, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14a      	bne.n	8000daa <__udivmoddi4+0xa6>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d962      	bls.n	8000de0 <__udivmoddi4+0xdc>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	b14e      	cbz	r6, 8000d34 <__udivmoddi4+0x30>
 8000d20:	f1c6 0320 	rsb	r3, r6, #32
 8000d24:	fa01 f806 	lsl.w	r8, r1, r6
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	40b7      	lsls	r7, r6
 8000d2e:	ea43 0808 	orr.w	r8, r3, r8
 8000d32:	40b4      	lsls	r4, r6
 8000d34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d40:	0c23      	lsrs	r3, r4, #16
 8000d42:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x62>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d58:	f080 80ea 	bcs.w	8000f30 <__udivmoddi4+0x22c>
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f240 80e7 	bls.w	8000f30 <__udivmoddi4+0x22c>
 8000d62:	3902      	subs	r1, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	1a9a      	subs	r2, r3, r2
 8000d68:	b2a3      	uxth	r3, r4
 8000d6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d76:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7a:	459c      	cmp	ip, r3
 8000d7c:	d909      	bls.n	8000d92 <__udivmoddi4+0x8e>
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d84:	f080 80d6 	bcs.w	8000f34 <__udivmoddi4+0x230>
 8000d88:	459c      	cmp	ip, r3
 8000d8a:	f240 80d3 	bls.w	8000f34 <__udivmoddi4+0x230>
 8000d8e:	443b      	add	r3, r7
 8000d90:	3802      	subs	r0, #2
 8000d92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d96:	eba3 030c 	sub.w	r3, r3, ip
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	b11d      	cbz	r5, 8000da6 <__udivmoddi4+0xa2>
 8000d9e:	40f3      	lsrs	r3, r6
 8000da0:	2200      	movs	r2, #0
 8000da2:	e9c5 3200 	strd	r3, r2, [r5]
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d905      	bls.n	8000dba <__udivmoddi4+0xb6>
 8000dae:	b10d      	cbz	r5, 8000db4 <__udivmoddi4+0xb0>
 8000db0:	e9c5 0100 	strd	r0, r1, [r5]
 8000db4:	2100      	movs	r1, #0
 8000db6:	4608      	mov	r0, r1
 8000db8:	e7f5      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000dba:	fab3 f183 	clz	r1, r3
 8000dbe:	2900      	cmp	r1, #0
 8000dc0:	d146      	bne.n	8000e50 <__udivmoddi4+0x14c>
 8000dc2:	4573      	cmp	r3, lr
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xc8>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 8105 	bhi.w	8000fd6 <__udivmoddi4+0x2d2>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4690      	mov	r8, r2
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e5      	beq.n	8000da6 <__udivmoddi4+0xa2>
 8000dda:	e9c5 4800 	strd	r4, r8, [r5]
 8000dde:	e7e2      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	f000 8090 	beq.w	8000f06 <__udivmoddi4+0x202>
 8000de6:	fab2 f682 	clz	r6, r2
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	f040 80a4 	bne.w	8000f38 <__udivmoddi4+0x234>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	b2bc      	uxth	r4, r7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e02:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x11e>
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x11c>
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	f200 80e0 	bhi.w	8000fe0 <__udivmoddi4+0x2dc>
 8000e20:	46c4      	mov	ip, r8
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e28:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e2c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e30:	fb02 f404 	mul.w	r4, r2, r4
 8000e34:	429c      	cmp	r4, r3
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0x144>
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x142>
 8000e40:	429c      	cmp	r4, r3
 8000e42:	f200 80ca 	bhi.w	8000fda <__udivmoddi4+0x2d6>
 8000e46:	4602      	mov	r2, r0
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e4e:	e7a5      	b.n	8000d9c <__udivmoddi4+0x98>
 8000e50:	f1c1 0620 	rsb	r6, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5a:	431f      	orrs	r7, r3
 8000e5c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e60:	fa20 f306 	lsr.w	r3, r0, r6
 8000e64:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e68:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e72:	fa1f fc87 	uxth.w	ip, r7
 8000e76:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e80:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e84:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e88:	45a6      	cmp	lr, r4
 8000e8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x1a0>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e96:	f080 809c 	bcs.w	8000fd2 <__udivmoddi4+0x2ce>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f240 8099 	bls.w	8000fd2 <__udivmoddi4+0x2ce>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	eba4 040e 	sub.w	r4, r4, lr
 8000ea8:	fa1f fe83 	uxth.w	lr, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eb8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ebc:	45a4      	cmp	ip, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1ce>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ec6:	f080 8082 	bcs.w	8000fce <__udivmoddi4+0x2ca>
 8000eca:	45a4      	cmp	ip, r4
 8000ecc:	d97f      	bls.n	8000fce <__udivmoddi4+0x2ca>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	443c      	add	r4, r7
 8000ed2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ed6:	eba4 040c 	sub.w	r4, r4, ip
 8000eda:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ede:	4564      	cmp	r4, ip
 8000ee0:	4673      	mov	r3, lr
 8000ee2:	46e1      	mov	r9, ip
 8000ee4:	d362      	bcc.n	8000fac <__udivmoddi4+0x2a8>
 8000ee6:	d05f      	beq.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x1fe>
 8000eea:	ebb8 0203 	subs.w	r2, r8, r3
 8000eee:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ef6:	fa22 f301 	lsr.w	r3, r2, r1
 8000efa:	431e      	orrs	r6, r3
 8000efc:	40cc      	lsrs	r4, r1
 8000efe:	e9c5 6400 	strd	r6, r4, [r5]
 8000f02:	2100      	movs	r1, #0
 8000f04:	e74f      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000f06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0a:	0c01      	lsrs	r1, r0, #16
 8000f0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f16:	463b      	mov	r3, r7
 8000f18:	4638      	mov	r0, r7
 8000f1a:	463c      	mov	r4, r7
 8000f1c:	46b8      	mov	r8, r7
 8000f1e:	46be      	mov	lr, r7
 8000f20:	2620      	movs	r6, #32
 8000f22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f26:	eba2 0208 	sub.w	r2, r2, r8
 8000f2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f2e:	e766      	b.n	8000dfe <__udivmoddi4+0xfa>
 8000f30:	4601      	mov	r1, r0
 8000f32:	e718      	b.n	8000d66 <__udivmoddi4+0x62>
 8000f34:	4610      	mov	r0, r2
 8000f36:	e72c      	b.n	8000d92 <__udivmoddi4+0x8e>
 8000f38:	f1c6 0220 	rsb	r2, r6, #32
 8000f3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f40:	40b7      	lsls	r7, r6
 8000f42:	40b1      	lsls	r1, r6
 8000f44:	fa20 f202 	lsr.w	r2, r0, r2
 8000f48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f52:	b2bc      	uxth	r4, r7
 8000f54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb08 f904 	mul.w	r9, r8, r4
 8000f62:	40b0      	lsls	r0, r6
 8000f64:	4589      	cmp	r9, r1
 8000f66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6a:	b280      	uxth	r0, r0
 8000f6c:	d93e      	bls.n	8000fec <__udivmoddi4+0x2e8>
 8000f6e:	1879      	adds	r1, r7, r1
 8000f70:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f74:	d201      	bcs.n	8000f7a <__udivmoddi4+0x276>
 8000f76:	4589      	cmp	r9, r1
 8000f78:	d81f      	bhi.n	8000fba <__udivmoddi4+0x2b6>
 8000f7a:	eba1 0109 	sub.w	r1, r1, r9
 8000f7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f82:	fb09 f804 	mul.w	r8, r9, r4
 8000f86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d229      	bcs.n	8000fe8 <__udivmoddi4+0x2e4>
 8000f94:	18ba      	adds	r2, r7, r2
 8000f96:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f9a:	d2c4      	bcs.n	8000f26 <__udivmoddi4+0x222>
 8000f9c:	4542      	cmp	r2, r8
 8000f9e:	d2c2      	bcs.n	8000f26 <__udivmoddi4+0x222>
 8000fa0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa4:	443a      	add	r2, r7
 8000fa6:	e7be      	b.n	8000f26 <__udivmoddi4+0x222>
 8000fa8:	45f0      	cmp	r8, lr
 8000faa:	d29d      	bcs.n	8000ee8 <__udivmoddi4+0x1e4>
 8000fac:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	46e1      	mov	r9, ip
 8000fb8:	e796      	b.n	8000ee8 <__udivmoddi4+0x1e4>
 8000fba:	eba7 0909 	sub.w	r9, r7, r9
 8000fbe:	4449      	add	r1, r9
 8000fc0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc8:	fb09 f804 	mul.w	r8, r9, r4
 8000fcc:	e7db      	b.n	8000f86 <__udivmoddi4+0x282>
 8000fce:	4673      	mov	r3, lr
 8000fd0:	e77f      	b.n	8000ed2 <__udivmoddi4+0x1ce>
 8000fd2:	4650      	mov	r0, sl
 8000fd4:	e766      	b.n	8000ea4 <__udivmoddi4+0x1a0>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e6fd      	b.n	8000dd6 <__udivmoddi4+0xd2>
 8000fda:	443b      	add	r3, r7
 8000fdc:	3a02      	subs	r2, #2
 8000fde:	e733      	b.n	8000e48 <__udivmoddi4+0x144>
 8000fe0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe4:	443b      	add	r3, r7
 8000fe6:	e71c      	b.n	8000e22 <__udivmoddi4+0x11e>
 8000fe8:	4649      	mov	r1, r9
 8000fea:	e79c      	b.n	8000f26 <__udivmoddi4+0x222>
 8000fec:	eba1 0109 	sub.w	r1, r1, r9
 8000ff0:	46c4      	mov	ip, r8
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fb09 f804 	mul.w	r8, r9, r4
 8000ffa:	e7c4      	b.n	8000f86 <__udivmoddi4+0x282>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eef0 7ae7 	vabs.f32	s15, s15
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_ZN6CC1200C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tP7__sFILEb>:
const size_t maxValue8Bits = constexpr_pow(2, 8) - 1;
const size_t maxValue20Bits = constexpr_pow(2, 20) - 1;
const size_t maxValue24Bits = constexpr_pow(2, 24) - 1;

// Constructor
CC1200::CC1200(SPI_HandleTypeDef* hspi_handle, 
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	807b      	strh	r3, [r7, #2]
               GPIO_TypeDef* cs_port, uint16_t cs_pin,
               GPIO_TypeDef* rst_port, uint16_t rst_pin,
               FILE* _debugStream, bool _isCC1201) :
    hspi(hspi_handle),
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	601a      	str	r2, [r3, #0]
    csPort(cs_port),
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
    csPin(cs_pin),
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	811a      	strh	r2, [r3, #8]
    rstPort(rst_port),
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	60da      	str	r2, [r3, #12]
    rstPin(rst_pin),
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8bba      	ldrh	r2, [r7, #28]
 800104a:	821a      	strh	r2, [r3, #16]
    debugStream(_debugStream),
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6a3a      	ldr	r2, [r7, #32]
 8001050:	615a      	str	r2, [r3, #20]
    isCC1201(_isCC1201)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	761a      	strb	r2, [r3, #24]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	765a      	strb	r2, [r3, #25]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001064:	769a      	strb	r2, [r3, #26]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
{
    // Initialize CS pin as output and set it high (deselected)
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6858      	ldr	r0, [r3, #4]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	891b      	ldrh	r3, [r3, #8]
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	f004 fa36 	bl	8005510 <HAL_GPIO_WritePin>
    
    // Initialize RST pin as output and set it high
    HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	68d8      	ldr	r0, [r3, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8a1b      	ldrh	r3, [r3, #16]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f004 fa2e 	bl	8005510 <HAL_GPIO_WritePin>
}
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_ZN6CC12006selectEv>:

// Helper functions for SPI communication
void CC1200::select()
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_RESET);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6858      	ldr	r0, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	891b      	ldrh	r3, [r3, #8]
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f004 fa1d 	bl	8005510 <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_ZN6CC12008deselectEv>:

void CC1200::deselect()
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(csPort, csPin, GPIO_PIN_SET);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6858      	ldr	r0, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	891b      	ldrh	r3, [r3, #8]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	f004 fa0d 	bl	8005510 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZN6CC120011spiTransferEh>:

uint8_t CC1200::spiTransfer(uint8_t data)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af02      	add	r7, sp, #8
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(hspi, &data, &rx_data, 1, HAL_MAX_DELAY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f107 020f 	add.w	r2, r7, #15
 8001112:	1cf9      	adds	r1, r7, #3
 8001114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	f006 fc8c 	bl	8007a38 <HAL_SPI_TransmitReceive>
    return rx_data;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN6CC12005beginEv>:

bool CC1200::begin()
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
    chipReady = false;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	761a      	strb	r2, [r3, #24]

    // Reset the chip
    HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68d8      	ldr	r0, [r3, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	8a1b      	ldrh	r3, [r3, #16]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	f004 f9e4 	bl	8005510 <HAL_GPIO_WritePin>
    HAL_Delay(1); // 1ms delay
 8001148:	2001      	movs	r0, #1
 800114a:	f003 f92b 	bl	80043a4 <HAL_Delay>
    HAL_GPIO_WritePin(rstPort, rstPin, GPIO_PIN_SET);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68d8      	ldr	r0, [r3, #12]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	8a1b      	ldrh	r3, [r3, #16]
 8001156:	2201      	movs	r2, #1
 8001158:	4619      	mov	r1, r3
 800115a:	f004 f9d9 	bl	8005510 <HAL_GPIO_WritePin>

    uint32_t resetTimeout = 10; // 10ms timeout
 800115e:	230a      	movs	r3, #10
 8001160:	617b      	str	r3, [r7, #20]
    uint32_t startTime = HAL_GetTick();
 8001162:	f003 f913 	bl	800438c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

    while(!chipReady)
 8001168:	e012      	b.n	8001190 <_ZN6CC12005beginEv+0x66>
    {
        // datasheet specifies 240us reset time
        HAL_Delay(1); // 1ms delay
 800116a:	2001      	movs	r0, #1
 800116c:	f003 f91a 	bl	80043a4 <HAL_Delay>
        updateState();
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f83a 	bl	80011ea <_ZN6CC120011updateStateEv>

        if(HAL_GetTick() - startTime > resetTimeout)
 8001176:	f003 f909 	bl	800438c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	429a      	cmp	r2, r3
 8001184:	bf34      	ite	cc
 8001186:	2301      	movcc	r3, #1
 8001188:	2300      	movcs	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <_ZN6CC12005beginEv+0x76>
    while(!chipReady)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7e1b      	ldrb	r3, [r3, #24]
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1e5      	bne.n	800116a <_ZN6CC12005beginEv+0x40>
 800119e:	e000      	b.n	80011a2 <_ZN6CC12005beginEv+0x78>
        {
            cc1200DebugPrintf("Timeout waiting for ready response from CC1200\n");
            break;
 80011a0:	bf00      	nop
        }
    }

    // read ID register
    uint8_t partNumber = readRegister(ExtRegister::PARTNUMBER);
 80011a2:	218f      	movs	r1, #143	@ 0x8f
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f9b6 	bl	8001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
    uint8_t partVersion = readRegister(ExtRegister::PARTVERSION);
 80011ae:	2190      	movs	r1, #144	@ 0x90
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f9b0 	bl	8001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73bb      	strb	r3, [r7, #14]

    uint8_t expectedPartNumber = isCC1201 ? CC1201_PART_NUMBER : CC1200_PART_NUMBER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7e9b      	ldrb	r3, [r3, #26]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <_ZN6CC12005beginEv+0x9c>
 80011c2:	2321      	movs	r3, #33	@ 0x21
 80011c4:	e000      	b.n	80011c8 <_ZN6CC12005beginEv+0x9e>
 80011c6:	2320      	movs	r3, #32
 80011c8:	737b      	strb	r3, [r7, #13]
    if(partNumber != expectedPartNumber)
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	7b7b      	ldrb	r3, [r7, #13]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d001      	beq.n	80011d6 <_ZN6CC12005beginEv+0xac>
    {
        cc1200DebugPrintf("Read incorrect part number 0x%" PRIx8 " from CC1200, expected 0x%" PRIx8 "\n", partNumber, expectedPartNumber);
        return false;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e005      	b.n	80011e2 <_ZN6CC12005beginEv+0xb8>

    cc1200DebugPrintf("Detected CC1200, Part Number 0x%" PRIx8 ", Hardware Version %" PRIx8 "\n", partNumber, partVersion);

    // Set packet format settings for this driver
    // enable CRC but disable status bytes
    writeRegister(Register::PKT_CFG1, (0b01 << PKT_CFG1_CRC_CFG));
 80011d6:	2202      	movs	r2, #2
 80011d8:	2127      	movs	r1, #39	@ 0x27
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f97f 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>

    return true;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_ZN6CC120011updateStateEv>:

void CC1200::updateState()
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
    // Read the status byte to update the internal state
    select();
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff63 	bl	80010be <_ZN6CC12006selectEv>
    uint8_t status = spiTransfer(CC1200_NOP);
 80011f8:	213d      	movs	r1, #61	@ 0x3d
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff7f 	bl	80010fe <_ZN6CC120011spiTransferEh>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
    deselect();
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff6a 	bl	80010de <_ZN6CC12008deselectEv>
    
    loadStatusByte(status);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f804 	bl	800121c <_ZN6CC120014loadStatusByteEh>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZN6CC120014loadStatusByteEh>:

void CC1200::loadStatusByte(uint8_t status)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
    lastStatus = status;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    
    // Extract the chip state from the status byte
    uint8_t stateValue = (status >> 4) & 0x7;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	73fb      	strb	r3, [r7, #15]
    state = static_cast<State>(stateValue);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	765a      	strb	r2, [r3, #25]
    
    // Check if the chip is ready
    chipReady = (status & 0x80) == 0;
 8001242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001246:	43db      	mvns	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	761a      	strb	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_ZN6CC120012getTXFIFOLenEv>:

size_t CC1200::getTXFIFOLen()
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
    return readRegister(ExtRegister::NUM_TXBYTES);
 8001266:	21d6      	movs	r1, #214	@ 0xd6
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f954 	bl	8001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>
 800126e:	4603      	mov	r3, r0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN6CC120012getRXFIFOLenEv>:

size_t CC1200::getRXFIFOLen()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    return readRegister(ExtRegister::NUM_RXBYTES);
 8001280:	21d7      	movs	r1, #215	@ 0xd7
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f947 	bl	8001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZN6CC120013enqueuePacketEPKcj>:

bool CC1200::enqueuePacket(char const* data, size_t len)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
    uint8_t totalLength = len + 1; // add one byte for length byte
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	74fb      	strb	r3, [r7, #19]

    if(totalLength > MAX_PACKET_LENGTH)
 80012a6:	7cfb      	ldrb	r3, [r7, #19]
 80012a8:	2b80      	cmp	r3, #128	@ 0x80
 80012aa:	d901      	bls.n	80012b0 <_ZN6CC120013enqueuePacketEPKcj+0x1e>
    {
        // packet too big
        return false;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e03a      	b.n	8001326 <_ZN6CC120013enqueuePacketEPKcj+0x94>
    }

    uint8_t txFreeBytes = CC1200_FIFO_SIZE - getTXFIFOLen();
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff ffd4 	bl	800125e <_ZN6CC120012getTXFIFOLenEv>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	74bb      	strb	r3, [r7, #18]
    if(totalLength > txFreeBytes)
 80012c2:	7cfa      	ldrb	r2, [r7, #19]
 80012c4:	7cbb      	ldrb	r3, [r7, #18]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d901      	bls.n	80012ce <_ZN6CC120013enqueuePacketEPKcj+0x3c>
    {
        // packet doesn't fit in TX FIFO
        return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e02b      	b.n	8001326 <_ZN6CC120013enqueuePacketEPKcj+0x94>
    }

    // burst write to TX FIFO
    select();
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff fef5 	bl	80010be <_ZN6CC12006selectEv>
    loadStatusByte(spiTransfer(CC1200_ENQUEUE_TX_FIFO | CC1200_BURST));
 80012d4:	217f      	movs	r1, #127	@ 0x7f
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff ff11 	bl	80010fe <_ZN6CC120011spiTransferEh>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff ff9b 	bl	800121c <_ZN6CC120014loadStatusByteEh>
    if(_packetMode == PacketMode::VARIABLE_LENGTH)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <_ZN6CC120013enqueuePacketEPKcj+0x68>
    {
        spiTransfer(len);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f7ff ff02 	bl	80010fe <_ZN6CC120011spiTransferEh>
    }
    for(size_t byteIndex = 0; byteIndex < len; ++byteIndex)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00a      	b.n	8001316 <_ZN6CC120013enqueuePacketEPKcj+0x84>
    {
        spiTransfer(data[byteIndex]);
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	4413      	add	r3, r2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff fef7 	bl	80010fe <_ZN6CC120011spiTransferEh>
    for(size_t byteIndex = 0; byteIndex < len; ++byteIndex)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	d3f0      	bcc.n	8001300 <_ZN6CC120013enqueuePacketEPKcj+0x6e>
    }
    deselect();
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff fedd 	bl	80010de <_ZN6CC12008deselectEv>
        cc1200DebugPrintf(" %02" PRIx8, static_cast<uint8_t>(data[byteIndex]));
    }
    cc1200DebugPrintf("\n");
#endif

    return true;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_ZN6CC120017hasReceivedPacketEv>:

bool CC1200::hasReceivedPacket()
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
    size_t rxBytes = getRXFIFOLen();
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff9e 	bl	8001278 <_ZN6CC120012getRXFIFOLenEv>
 800133c:	60f8      	str	r0, [r7, #12]
    if(rxBytes == 0)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <_ZN6CC120017hasReceivedPacketEv+0x1a>
    {
        return false;
 8001344:	2300      	movs	r3, #0
 8001346:	e021      	b.n	800138c <_ZN6CC120017hasReceivedPacketEv+0x5e>
    }

    if(_packetMode == PacketMode::FIXED_LENGTH)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <_ZN6CC120017hasReceivedPacketEv+0x26>
    {
        return true;
 8001350:	2301      	movs	r3, #1
 8001352:	e01b      	b.n	800138c <_ZN6CC120017hasReceivedPacketEv+0x5e>
    }
    else
    {
        // In variable length mode, we need at least 1 byte (the length byte)
        if(rxBytes < 1)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <_ZN6CC120017hasReceivedPacketEv+0x30>
        {
            return false;
 800135a:	2300      	movs	r3, #0
 800135c:	e016      	b.n	800138c <_ZN6CC120017hasReceivedPacketEv+0x5e>
        }

        // Read the length byte
        uint8_t packetLen = readRXFIFOByte(0);
 800135e:	2100      	movs	r1, #0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f932 	bl	80015ca <_ZN6CC120014readRXFIFOByteEh>
 8001366:	4603      	mov	r3, r0
 8001368:	72fb      	strb	r3, [r7, #11]
        
        // Check if we have received the complete packet
        // Add 1 for the length byte itself
        return rxBytes >= packetLen + 1 + (_appendStatus ? PACKET_STATUS_LEN : 0);
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8001372:	2a00      	cmp	r2, #0
 8001374:	d001      	beq.n	800137a <_ZN6CC120017hasReceivedPacketEv+0x4c>
 8001376:	2202      	movs	r2, #2
 8001378:	e000      	b.n	800137c <_ZN6CC120017hasReceivedPacketEv+0x4e>
 800137a:	2200      	movs	r2, #0
 800137c:	4413      	add	r3, r2
 800137e:	3301      	adds	r3, #1
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	429a      	cmp	r2, r3
 8001384:	bf2c      	ite	cs
 8001386:	2301      	movcs	r3, #1
 8001388:	2300      	movcc	r3, #0
 800138a:	b2db      	uxtb	r3, r3
    }
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_ZN6CC120013receivePacketEPcj>:

size_t CC1200::receivePacket(char* buffer, size_t bufferLen)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b08d      	sub	sp, #52	@ 0x34
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
    size_t rxBytes = getRXFIFOLen();
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff ff69 	bl	8001278 <_ZN6CC120012getRXFIFOLenEv>
 80013a6:	61f8      	str	r0, [r7, #28]
    if(rxBytes == 0)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <_ZN6CC120013receivePacketEPcj+0x1e>
    {
        return 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e072      	b.n	8001498 <_ZN6CC120013receivePacketEPcj+0x104>
    }

    size_t packetLen;
    size_t headerLen;

    if(_packetMode == PacketMode::FIXED_LENGTH)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d104      	bne.n	80013c4 <_ZN6CC120013receivePacketEPcj+0x30>
    {
        packetLen = rxBytes;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        headerLen = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e01f      	b.n	8001404 <_ZN6CC120013receivePacketEPcj+0x70>
    }
    else
    {
        // In variable length mode, first byte is the length
        if(rxBytes < 1)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <_ZN6CC120013receivePacketEPcj+0x3a>
        {
            return 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e064      	b.n	8001498 <_ZN6CC120013receivePacketEPcj+0x104>
        }

        // Read the length byte
        uint8_t lengthByte = readRXFIFOByte(0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 f8fa 	bl	80015ca <_ZN6CC120014readRXFIFOByteEh>
 80013d6:	4603      	mov	r3, r0
 80013d8:	76fb      	strb	r3, [r7, #27]
        packetLen = lengthByte;
 80013da:	7efb      	ldrb	r3, [r7, #27]
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        headerLen = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]

        // Check if we have received the complete packet
        if(rxBytes < packetLen + headerLen + (_appendStatus ? PACKET_STATUS_LEN : 0))
 80013e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	4413      	add	r3, r2
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d001      	beq.n	80013f6 <_ZN6CC120013receivePacketEPcj+0x62>
 80013f2:	2202      	movs	r2, #2
 80013f4:	e000      	b.n	80013f8 <_ZN6CC120013receivePacketEPcj+0x64>
 80013f6:	2200      	movs	r2, #0
 80013f8:	4413      	add	r3, r2
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d201      	bcs.n	8001404 <_ZN6CC120013receivePacketEPcj+0x70>
        {
            return 0;
 8001400:	2300      	movs	r3, #0
 8001402:	e049      	b.n	8001498 <_ZN6CC120013receivePacketEPcj+0x104>
        }
    }

    // Limit to buffer size
    size_t bytesToRead = packetLen;
 8001404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(bytesToRead > bufferLen)
 8001408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d901      	bls.n	8001414 <_ZN6CC120013receivePacketEPcj+0x80>
    {
        bytesToRead = bufferLen;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    // Read the packet data
    select();
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff fe52 	bl	80010be <_ZN6CC12006selectEv>
    loadStatusByte(spiTransfer(CC1200_DEQUEUE_RX_FIFO | CC1200_BURST));
 800141a:	21ff      	movs	r1, #255	@ 0xff
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff fe6e 	bl	80010fe <_ZN6CC120011spiTransferEh>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff fef8 	bl	800121c <_ZN6CC120014loadStatusByteEh>
    
    // Skip the length byte in variable length mode
    if(_packetMode == PacketMode::VARIABLE_LENGTH)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001430:	2b01      	cmp	r3, #1
 8001432:	d103      	bne.n	800143c <_ZN6CC120013receivePacketEPcj+0xa8>
    {
        spiTransfer(0);
 8001434:	2100      	movs	r1, #0
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff fe61 	bl	80010fe <_ZN6CC120011spiTransferEh>
    }
    
    // Read the actual data
    for(size_t i = 0; i < bytesToRead; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001440:	e00b      	b.n	800145a <_ZN6CC120013receivePacketEPcj+0xc6>
    {
        buffer[i] = spiTransfer(0);
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	18d4      	adds	r4, r2, r3
 8001448:	2100      	movs	r1, #0
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe57 	bl	80010fe <_ZN6CC120011spiTransferEh>
 8001450:	4603      	mov	r3, r0
 8001452:	7023      	strb	r3, [r4, #0]
    for(size_t i = 0; i < bytesToRead; i++)
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	3301      	adds	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
 800145a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800145c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800145e:	429a      	cmp	r2, r3
 8001460:	d3ef      	bcc.n	8001442 <_ZN6CC120013receivePacketEPcj+0xae>
    }
    
    // Skip any remaining bytes (including status bytes if appended)
    for(size_t i = bytesToRead; i < packetLen + (_appendStatus ? PACKET_STATUS_LEN : 0); i++)
 8001462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	e006      	b.n	8001476 <_ZN6CC120013receivePacketEPcj+0xe2>
    {
        spiTransfer(0);
 8001468:	2100      	movs	r1, #0
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f7ff fe47 	bl	80010fe <_ZN6CC120011spiTransferEh>
    for(size_t i = bytesToRead; i < packetLen + (_appendStatus ? PACKET_STATUS_LEN : 0); i++)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	3301      	adds	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_ZN6CC120013receivePacketEPcj+0xf0>
 8001480:	2202      	movs	r2, #2
 8001482:	e000      	b.n	8001486 <_ZN6CC120013receivePacketEPcj+0xf2>
 8001484:	2200      	movs	r2, #0
 8001486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001488:	4413      	add	r3, r2
 800148a:	6a3a      	ldr	r2, [r7, #32]
 800148c:	429a      	cmp	r2, r3
 800148e:	d3eb      	bcc.n	8001468 <_ZN6CC120013receivePacketEPcj+0xd4>
    }
    
    deselect();
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff fe24 	bl	80010de <_ZN6CC12008deselectEv>

    return bytesToRead;
 8001496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8001498:	4618      	mov	r0, r3
 800149a:	3734      	adds	r7, #52	@ 0x34
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}

080014a0 <_ZN6CC120012readRegisterENS_8RegisterE>:

// Register access functions
uint8_t CC1200::readRegister(Register reg)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
    select();
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe06 	bl	80010be <_ZN6CC12006selectEv>
    spiTransfer(static_cast<uint8_t>(reg) | CC1200_READ);
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe1e 	bl	80010fe <_ZN6CC120011spiTransferEh>
    uint8_t value = spiTransfer(0);
 80014c2:	2100      	movs	r1, #0
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fe1a 	bl	80010fe <_ZN6CC120011spiTransferEh>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
    deselect();
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fe05 	bl	80010de <_ZN6CC12008deselectEv>
    return value;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZN6CC120013writeRegisterENS_8RegisterEh>:

void CC1200::writeRegister(Register reg, uint8_t value)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	4613      	mov	r3, r2
 80014ec:	70bb      	strb	r3, [r7, #2]
    select();
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fde5 	bl	80010be <_ZN6CC12006selectEv>
    spiTransfer(static_cast<uint8_t>(reg) | CC1200_WRITE);
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fe00 	bl	80010fe <_ZN6CC120011spiTransferEh>
    spiTransfer(value);
 80014fe:	78bb      	ldrb	r3, [r7, #2]
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fdfb 	bl	80010fe <_ZN6CC120011spiTransferEh>
    deselect();
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fde8 	bl	80010de <_ZN6CC12008deselectEv>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>:
    }
    deselect();
}

uint8_t CC1200::readRegister(ExtRegister reg)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	70fb      	strb	r3, [r7, #3]
    select();
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fdcb 	bl	80010be <_ZN6CC12006selectEv>
    spiTransfer(CC1200_EXT_ADDR | CC1200_READ);
 8001528:	21af      	movs	r1, #175	@ 0xaf
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fde7 	bl	80010fe <_ZN6CC120011spiTransferEh>
    spiTransfer(static_cast<uint8_t>(reg));
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	4619      	mov	r1, r3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fde2 	bl	80010fe <_ZN6CC120011spiTransferEh>
    uint8_t value = spiTransfer(0);
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fdde 	bl	80010fe <_ZN6CC120011spiTransferEh>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
    deselect();
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fdc9 	bl	80010de <_ZN6CC12008deselectEv>
    return value;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_ZN6CC120013writeRegisterENS_11ExtRegisterEh>:

void CC1200::writeRegister(ExtRegister reg, uint8_t value)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]
 8001562:	4613      	mov	r3, r2
 8001564:	70bb      	strb	r3, [r7, #2]
    select();
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fda9 	bl	80010be <_ZN6CC12006selectEv>
    spiTransfer(CC1200_EXT_ADDR | CC1200_WRITE);
 800156c:	212f      	movs	r1, #47	@ 0x2f
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fdc5 	bl	80010fe <_ZN6CC120011spiTransferEh>
    spiTransfer(static_cast<uint8_t>(reg));
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fdc0 	bl	80010fe <_ZN6CC120011spiTransferEh>
    spiTransfer(value);
 800157e:	78bb      	ldrb	r3, [r7, #2]
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdbb 	bl	80010fe <_ZN6CC120011spiTransferEh>
    deselect();
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fda8 	bl	80010de <_ZN6CC12008deselectEv>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_ZN6CC120011sendCommandENS_7CommandE>:
    }
    deselect();
}

void CC1200::sendCommand(Command command)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	70fb      	strb	r3, [r7, #3]
    select();
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fd8b 	bl	80010be <_ZN6CC12006selectEv>
    loadStatusByte(spiTransfer(static_cast<uint8_t>(command)));
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fda6 	bl	80010fe <_ZN6CC120011spiTransferEh>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fe30 	bl	800121c <_ZN6CC120014loadStatusByteEh>
    deselect();
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fd8e 	bl	80010de <_ZN6CC12008deselectEv>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_ZN6CC120014readRXFIFOByteEh>:

uint8_t CC1200::readRXFIFOByte(uint8_t address)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
    select();
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fd71 	bl	80010be <_ZN6CC12006selectEv>
    spiTransfer(CC1200_MEM_ACCESS | CC1200_READ);
 80015dc:	21be      	movs	r1, #190	@ 0xbe
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fd8d 	bl	80010fe <_ZN6CC120011spiTransferEh>
    spiTransfer(CC1200_RX_FIFO | address);
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd85 	bl	80010fe <_ZN6CC120011spiTransferEh>
    uint8_t value = spiTransfer(0);
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fd81 	bl	80010fe <_ZN6CC120011spiTransferEh>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    deselect();
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fd6c 	bl	80010de <_ZN6CC12008deselectEv>
    return value;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_Z14getOffModeBitsN6CC12005StateE>:
    return bytesRead == count;
}

// helper function: convert a state to the bits for RXOFF_MODE and TXOFF_MODE
uint8_t getOffModeBits(CC1200::State state)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
    switch(state)
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d813      	bhi.n	8001648 <_Z14getOffModeBitsN6CC12005StateE+0x38>
 8001620:	a201      	add	r2, pc, #4	@ (adr r2, 8001628 <_Z14getOffModeBitsN6CC12005StateE+0x18>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001639 	.word	0x08001639
 800162c:	08001645 	.word	0x08001645
 8001630:	08001641 	.word	0x08001641
 8001634:	0800163d 	.word	0x0800163d
    {
        case CC1200::State::IDLE:
            return 0;
 8001638:	2300      	movs	r3, #0
 800163a:	e006      	b.n	800164a <_Z14getOffModeBitsN6CC12005StateE+0x3a>
        case CC1200::State::FAST_ON:
            return 1;
 800163c:	2301      	movs	r3, #1
 800163e:	e004      	b.n	800164a <_Z14getOffModeBitsN6CC12005StateE+0x3a>
        case CC1200::State::TX:
            return 2;
 8001640:	2302      	movs	r3, #2
 8001642:	e002      	b.n	800164a <_Z14getOffModeBitsN6CC12005StateE+0x3a>
        case CC1200::State::RX:
            return 3;
 8001644:	2303      	movs	r3, #3
 8001646:	e000      	b.n	800164a <_Z14getOffModeBitsN6CC12005StateE+0x3a>
        default:
            // Invalid state for RXOFF_MODE or TXOFF_MODE, use IDLE
            return 0;
 8001648:	2300      	movs	r3, #0
    }
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop

08001658 <_ZN6CC120017setOnReceiveStateENS_5StateES0_>:

void CC1200::setOnReceiveState(State goodPacket, State badPacket)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
 8001664:	4613      	mov	r3, r2
 8001666:	70bb      	strb	r3, [r7, #2]
    uint8_t rfendCfg0 = readRegister(Register::RFEND_CFG0);
 8001668:	212a      	movs	r1, #42	@ 0x2a
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff18 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
    
    // Clear the RXOFF_MODE bits (bits 2-3)
    rfendCfg0 &= ~(0b11 << RFEND_CFG0_RXOFF_MODE);
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	f023 030c 	bic.w	r3, r3, #12
 800167a:	73fb      	strb	r3, [r7, #15]
    
    // Set the new RXOFF_MODE bits
    rfendCfg0 |= (getOffModeBits(goodPacket) << RFEND_CFG0_RXOFF_MODE);
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffc6 	bl	8001610 <_Z14getOffModeBitsN6CC12005StateE>
 8001684:	4603      	mov	r3, r0
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	b25a      	sxtb	r2, r3
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	73fb      	strb	r3, [r7, #15]
    
    // Clear the RX_FINITE bits (bits 0-1)
    rfendCfg0 &= ~(0b11 << RFEND_CFG0_RX_TIME);
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	73fb      	strb	r3, [r7, #15]
    
    // Set the new RX_FINITE bits (use same state for now)
    rfendCfg0 |= (getOffModeBits(badPacket) << RFEND_CFG0_RX_TIME);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ffb6 	bl	8001610 <_Z14getOffModeBitsN6CC12005StateE>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(Register::RFEND_CFG0, rfendCfg0);
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	461a      	mov	r2, r3
 80016b6:	212a      	movs	r1, #42	@ 0x2a
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff10 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZN6CC120018setOnTransmitStateENS_5StateE>:

void CC1200::setOnTransmitState(State txState)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70fb      	strb	r3, [r7, #3]
    uint8_t rfendCfg0 = readRegister(Register::RFEND_CFG0);
 80016d2:	212a      	movs	r1, #42	@ 0x2a
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fee3 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
    
    // Clear the TXOFF_MODE bits (bits 4-5)
    rfendCfg0 &= ~(0b11 << RFEND_CFG0_TXOFF_MODE);
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016e4:	73fb      	strb	r3, [r7, #15]
    
    // Set the new TXOFF_MODE bits
    rfendCfg0 |= (getOffModeBits(txState) << RFEND_CFG0_TXOFF_MODE);
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff91 	bl	8001610 <_Z14getOffModeBitsN6CC12005StateE>
 80016ee:	4603      	mov	r3, r0
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	b25a      	sxtb	r2, r3
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(Register::RFEND_CFG0, rfendCfg0);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	461a      	mov	r2, r3
 8001702:	212a      	movs	r1, #42	@ 0x2a
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff feea 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb>:
    
    writeRegister(Register::FS_CFG, fsCfg);
}

void CC1200::configureGPIO(uint8_t gpioNumber, GPIOMode mode, bool outputInvert)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	70fb      	strb	r3, [r7, #3]
 8001726:	460b      	mov	r3, r1
 8001728:	70bb      	strb	r3, [r7, #2]
 800172a:	4613      	mov	r3, r2
 800172c:	707b      	strb	r3, [r7, #1]
    if(gpioNumber > 3)
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d829      	bhi.n	8001788 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x74>
        // Invalid GPIO number
        return;
    }
    
    Register reg;
    switch(gpioNumber)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d828      	bhi.n	800178c <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x78>
 800173a:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x2c>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001751 	.word	0x08001751
 8001744:	08001757 	.word	0x08001757
 8001748:	0800175d 	.word	0x0800175d
 800174c:	08001763 	.word	0x08001763
    {
        case 0:
            reg = Register::IOCFG0;
 8001750:	2303      	movs	r3, #3
 8001752:	73fb      	strb	r3, [r7, #15]
            break;
 8001754:	e008      	b.n	8001768 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x54>
        case 1:
            reg = Register::IOCFG1;
 8001756:	2302      	movs	r3, #2
 8001758:	73fb      	strb	r3, [r7, #15]
            break;
 800175a:	e005      	b.n	8001768 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x54>
        case 2:
            reg = Register::IOCFG2;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
            break;
 8001760:	e002      	b.n	8001768 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x54>
        case 3:
            reg = Register::IOCFG3;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
            break;
 8001766:	bf00      	nop
        default:
            return;
    }
    
    uint8_t value = static_cast<uint8_t>(mode);
 8001768:	78bb      	ldrb	r3, [r7, #2]
 800176a:	73bb      	strb	r3, [r7, #14]
    if(outputInvert)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x66>
    {
        value |= (1 << IOCFG_GPIO_INV);
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001778:	73bb      	strb	r3, [r7, #14]
    }
    
    writeRegister(reg, value);
 800177a:	7bba      	ldrb	r2, [r7, #14]
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	4619      	mov	r1, r3
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff feac 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
 8001786:	e002      	b.n	800178e <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x7a>
        return;
 8001788:	bf00      	nop
 800178a:	e000      	b.n	800178e <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb+0x7a>
            return;
 800178c:	bf00      	nop
}
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN6CC120017configureFIFOModeEv>:

void CC1200::configureFIFOMode()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    // Configure FIFO_CFG register for FIFO mode
    uint8_t fifoCfg = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
    
    // Set CRC_AUTOFLUSH to 0 (don't auto-flush on CRC error)
    // Set FIFO_THR to 0 (threshold at 32 bytes)
    
    writeRegister(Register::FIFO_CFG, fifoCfg);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	461a      	mov	r2, r3
 80017a4:	211d      	movs	r1, #29
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fe99 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZN6CC120013setPacketModeENS_10PacketModeEb>:

void CC1200::setPacketMode(PacketMode mode, bool appendStatus)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	71fb      	strb	r3, [r7, #7]
    _packetMode = mode;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28
    _appendStatus = appendStatus;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	79fa      	ldrb	r2, [r7, #7]
 80017cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    
    uint8_t pktCfg0 = readRegister(Register::PKT_CFG0);
 80017d0:	2128      	movs	r1, #40	@ 0x28
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff fe64 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 80017d8:	4603      	mov	r3, r0
 80017da:	75fb      	strb	r3, [r7, #23]
    
    // Set LENGTH_CONFIG field (bits 0-1)
    if(mode == PacketMode::FIXED_LENGTH)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d104      	bne.n	80017ec <_ZN6CC120013setPacketModeENS_10PacketModeEb+0x38>
    {
        // Clear the LENGTH_CONFIG bits for fixed length
        pktCfg0 &= ~(0b11 << PKT_CFG0_LENGTH_CONFIG);
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e007      	b.n	80017fc <_ZN6CC120013setPacketModeENS_10PacketModeEb+0x48>
    }
    else // VARIABLE_LENGTH
    {
        // Set LENGTH_CONFIG to 1 for variable length
        pktCfg0 &= ~(0b11 << PKT_CFG0_LENGTH_CONFIG);
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80017f2:	75fb      	strb	r3, [r7, #23]
        pktCfg0 |= (0b01 << PKT_CFG0_LENGTH_CONFIG);
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	75fb      	strb	r3, [r7, #23]
    }
    
    // Set PKT_FORMAT field (bits 4-5) to 0 for normal mode
    pktCfg0 &= ~(0b11 << PKT_CFG0_PKT_FORMAT);
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	75fb      	strb	r3, [r7, #23]
    
    // Set APPEND_STATUS field (bit 2)
    if(appendStatus)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <_ZN6CC120013setPacketModeENS_10PacketModeEb+0x60>
    {
        pktCfg0 |= (1 << PKT_CFG0_APPEND_STATUS);
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
 8001812:	e003      	b.n	800181c <_ZN6CC120013setPacketModeENS_10PacketModeEb+0x68>
    }
    else
    {
        pktCfg0 &= ~(1 << PKT_CFG0_APPEND_STATUS);
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]
    }
    
    writeRegister(Register::PKT_CFG0, pktCfg0);
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	461a      	mov	r2, r3
 8001820:	2128      	movs	r1, #40	@ 0x28
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fe5b 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZN6CC120015setPacketLengthEth>:

void CC1200::setPacketLength(uint16_t length, uint8_t bitLength)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
    if(bitLength > 8)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d920      	bls.n	8001888 <_ZN6CC120015setPacketLengthEth+0x58>
    {
        // For packets longer than 255 bytes, we need to use the PKT_CFG1 register
        uint8_t pktCfg1 = readRegister(Register::PKT_CFG1);
 8001846:	2127      	movs	r1, #39	@ 0x27
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fe29 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
        
        // Set PQT_EN field (bit 5) to 0
        pktCfg1 &= ~(1 << PKT_CFG1_PQT_EN);
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001858:	73fb      	strb	r3, [r7, #15]
        
        // Set LENGTH_POSITION field (bit 6) to 0
        pktCfg1 &= ~(1 << PKT_CFG1_LENGTH_POSITION);
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	73fb      	strb	r3, [r7, #15]
        
        // Set the high bits of the length
        pktCfg1 &= ~(0b11 << PKT_CFG1_LENGTH_FIELD_SIZE);
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	f023 0303 	bic.w	r3, r3, #3
 8001868:	73fb      	strb	r3, [r7, #15]
        pktCfg1 |= ((bitLength - 1) << PKT_CFG1_LENGTH_FIELD_SIZE);
 800186a:	787b      	ldrb	r3, [r7, #1]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	b25a      	sxtb	r2, r3
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4313      	orrs	r3, r2
 8001878:	b25b      	sxtb	r3, r3
 800187a:	73fb      	strb	r3, [r7, #15]
        
        writeRegister(Register::PKT_CFG1, pktCfg1);
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	461a      	mov	r2, r3
 8001880:	2127      	movs	r1, #39	@ 0x27
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fe2b 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    }
    
    // Set the packet length
    writeRegister(Register::PKT_LEN, length & 0xFF);
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	212e      	movs	r1, #46	@ 0x2e
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fe24 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZN6CC120013setCRCEnabledEb>:

void CC1200::setCRCEnabled(bool enabled)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
    uint8_t pktCfg1 = readRegister(Register::PKT_CFG1);
 80018aa:	2127      	movs	r1, #39	@ 0x27
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fdf7 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
    
    // Clear the CRC_CFG bits (bits 2-3)
    pktCfg1 &= ~(0b11 << PKT_CFG1_CRC_CFG);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	f023 0306 	bic.w	r3, r3, #6
 80018bc:	73fb      	strb	r3, [r7, #15]
    
    if(enabled)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <_ZN6CC120013setCRCEnabledEb+0x2e>
    {
        // Set CRC_CFG to 1 for CRC enabled
        pktCfg1 |= (0b01 << PKT_CFG1_CRC_CFG);
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	73fb      	strb	r3, [r7, #15]
    }
    
    writeRegister(Register::PKT_CFG1, pktCfg1);
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	461a      	mov	r2, r3
 80018d0:	2127      	movs	r1, #39	@ 0x27
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fe03 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZN6CC120019setModulationFormatENS_9ModFormatE>:

void CC1200::setModulationFormat(ModFormat format)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
    uint8_t modcfgDevE = readRegister(Register::MODCFG_DEV_E);
 80018ec:	210b      	movs	r1, #11
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fdd6 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]
    
    // Clear the MOD_FORMAT bits (bits 4-6)
    modcfgDevE &= ~(0b111 << MODCFG_DEV_E_MOD_FORMAT);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80018fe:	73fb      	strb	r3, [r7, #15]
    
    // Set the new MOD_FORMAT bits
    modcfgDevE |= (static_cast<uint8_t>(format) << MODCFG_DEV_E_MOD_FORMAT);
 8001900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	b25a      	sxtb	r2, r3
 8001908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190c:	4313      	orrs	r3, r2
 800190e:	b25b      	sxtb	r3, r3
 8001910:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(Register::MODCFG_DEV_E, modcfgDevE);
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	461a      	mov	r2, r3
 8001916:	210b      	movs	r1, #11
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fde0 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <_ZN6CC120015setFSKDeviationEf>:

void CC1200::setFSKDeviation(float deviation)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	ed87 0a02 	vstr	s0, [r7, #8]
    // Calculate the register values for the given deviation
    // See CC1200 user guide section 9.12
    
    float normalizedDeviation = deviation / CC1200_OSC_FREQ;
 8001934:	ed97 7a02 	vldr	s14, [r7, #8]
 8001938:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001a58 <_ZN6CC120015setFSKDeviationEf+0x130>
 800193c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001940:	edc7 7a07 	vstr	s15, [r7, #28]
    
    // Find the best exponent (0-7)
    uint8_t devE = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    float devM = normalizedDeviation * 524288.0f; // 2^19
 800194a:	edd7 7a07 	vldr	s15, [r7, #28]
 800194e:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001a5c <_ZN6CC120015setFSKDeviationEf+0x134>
 8001952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001956:	edc7 7a08 	vstr	s15, [r7, #32]
    
    while(devM > 255.0f && devE < 7)
 800195a:	e00c      	b.n	8001976 <_ZN6CC120015setFSKDeviationEf+0x4e>
    {
        devM /= 2.0f;
 800195c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001960:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001968:	edc7 7a08 	vstr	s15, [r7, #32]
        devE++;
 800196c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001970:	3301      	adds	r3, #1
 8001972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while(devM > 255.0f && devE < 7)
 8001976:	edd7 7a08 	vldr	s15, [r7, #32]
 800197a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001a60 <_ZN6CC120015setFSKDeviationEf+0x138>
 800197e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	dd03      	ble.n	8001990 <_ZN6CC120015setFSKDeviationEf+0x68>
 8001988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800198c:	2b06      	cmp	r3, #6
 800198e:	d9e5      	bls.n	800195c <_ZN6CC120015setFSKDeviationEf+0x34>
    }
    
    // Round to nearest integer
    uint8_t devMInt = static_cast<uint8_t>(devM + 0.5f);
 8001990:	edd7 7a08 	vldr	s15, [r7, #32]
 8001994:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800199c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80019a4:	793b      	ldrb	r3, [r7, #4]
 80019a6:	76fb      	strb	r3, [r7, #27]
    {
        devMInt = 255;
    }
    
    // Update the DEVIATION_M register
    writeRegister(Register::DEVIATION_M, devMInt);
 80019a8:	7efb      	ldrb	r3, [r7, #27]
 80019aa:	461a      	mov	r2, r3
 80019ac:	210a      	movs	r1, #10
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f7ff fd95 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    // Update the MODCFG_DEV_E register (preserve the MOD_FORMAT bits)
    uint8_t modcfgDevE = readRegister(Register::MODCFG_DEV_E);
 80019b4:	210b      	movs	r1, #11
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff fd72 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 80019bc:	4603      	mov	r3, r0
 80019be:	76bb      	strb	r3, [r7, #26]
    modcfgDevE &= ~(0b111 << MODCFG_DEV_E_DEV_E); // Clear DEV_E bits (bits 0-2)
 80019c0:	7ebb      	ldrb	r3, [r7, #26]
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	76bb      	strb	r3, [r7, #26]
    modcfgDevE |= (devE << MODCFG_DEV_E_DEV_E); // Set new DEV_E bits
 80019c8:	7eba      	ldrb	r2, [r7, #26]
 80019ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019ce:	4313      	orrs	r3, r2
 80019d0:	76bb      	strb	r3, [r7, #26]
    writeRegister(Register::MODCFG_DEV_E, modcfgDevE);
 80019d2:	7ebb      	ldrb	r3, [r7, #26]
 80019d4:	461a      	mov	r2, r3
 80019d6:	210b      	movs	r1, #11
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fd80 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    // Calculate and store the actual deviation
    float actualDeviation = static_cast<float>(devMInt) * std::pow(2.0f, devE) * CC1200_OSC_FREQ / 524288.0f;
 80019de:	7efb      	ldrb	r3, [r7, #27]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e8:	ee17 0a90 	vmov	r0, s15
 80019ec:	f7fe fdc4 	bl	8000578 <__aeabi_f2d>
 80019f0:	4604      	mov	r4, r0
 80019f2:	460d      	mov	r5, r1
 80019f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019f8:	4618      	mov	r0, r3
 80019fa:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80019fe:	f000 fbcc 	bl	800219a <_ZSt3powIfhEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fe0d 	bl	8000628 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	a30e      	add	r3, pc, #56	@ (adr r3, 8001a50 <_ZN6CC120015setFSKDeviationEf+0x128>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fe04 	bl	8000628 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <_ZN6CC120015setFSKDeviationEf+0x13c>)
 8001a2e:	f7fe ff25 	bl	800087c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f8c5 	bl	8000bc8 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]
    cc1200DebugPrintf("Set FSK deviation to %.2f Hz (requested %.2f Hz)\n", actualDeviation, deviation);
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	418312d0 	.word	0x418312d0
 8001a58:	4c189680 	.word	0x4c189680
 8001a5c:	49000000 	.word	0x49000000
 8001a60:	437f0000 	.word	0x437f0000
 8001a64:	41200000 	.word	0x41200000

08001a68 <_ZN6CC120013setSymbolRateEf>:

// This file contains additional implementation functions for CC1200_HAL.cpp
// These functions should be appended to the main implementation file

void CC1200::setSymbolRate(float symbolRateHz)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	ed87 0a00 	vstr	s0, [r7]
    // Calculate the register values for the given symbol rate
    // See CC1200 user guide section 9.11
    
    float normalizedSymbolRate = symbolRateHz / CC1200_OSC_FREQ;
 8001a74:	ed97 7a00 	vldr	s14, [r7]
 8001a78:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001b7c <_ZN6CC120013setSymbolRateEf+0x114>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // Find the best exponent (0-20)
    uint8_t srE = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	77fb      	strb	r3, [r7, #31]
    float srM = normalizedSymbolRate * twoToThe20;
 8001a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001b80 <_ZN6CC120013setSymbolRateEf+0x118>
 8001a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a94:	edc7 7a06 	vstr	s15, [r7, #24]
    
    while(srM < 128.0f && srE < 20)
 8001a98:	e008      	b.n	8001aac <_ZN6CC120013setSymbolRateEf+0x44>
    {
        srM *= 2.0f;
 8001a9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001aa2:	edc7 7a06 	vstr	s15, [r7, #24]
        srE++;
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	77fb      	strb	r3, [r7, #31]
    while(srM < 128.0f && srE < 20)
 8001aac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001b84 <_ZN6CC120013setSymbolRateEf+0x11c>
 8001ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	d502      	bpl.n	8001ac4 <_ZN6CC120013setSymbolRateEf+0x5c>
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b13      	cmp	r3, #19
 8001ac2:	d9ea      	bls.n	8001a9a <_ZN6CC120013setSymbolRateEf+0x32>
    }
    
    // Round to nearest integer
    uint32_t srMInt = static_cast<uint32_t>(srM + 0.5f);
 8001ac4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ac8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad4:	ee17 3a90 	vmov	r3, s15
 8001ad8:	617b      	str	r3, [r7, #20]
    
    // Make sure we don't exceed the maximum value
    if(srMInt > 255)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2bff      	cmp	r3, #255	@ 0xff
 8001ade:	d901      	bls.n	8001ae4 <_ZN6CC120013setSymbolRateEf+0x7c>
    {
        srMInt = 255;
 8001ae0:	23ff      	movs	r3, #255	@ 0xff
 8001ae2:	617b      	str	r3, [r7, #20]
    }
    
    // Calculate the actual symbol rate
    float actualSymbolRate = static_cast<float>(srMInt) * CC1200_OSC_FREQ / (twoToThe20 * std::pow(2.0f, srE));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aee:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001b7c <_ZN6CC120013setSymbolRateEf+0x114>
 8001af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af6:	ee17 0a90 	vmov	r0, s15
 8001afa:	f7fe fd3d 	bl	8000578 <__aeabi_f2d>
 8001afe:	4604      	mov	r4, r0
 8001b00:	460d      	mov	r5, r1
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
 8001b04:	4618      	mov	r0, r3
 8001b06:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001b0a:	f000 fb46 	bl	800219a <_ZSt3powIfhEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b0e:	ec51 0b10 	vmov	r0, r1, d0
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <_ZN6CC120013setSymbolRateEf+0x120>)
 8001b18:	f7fe fd86 	bl	8000628 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe feaa 	bl	800087c <__aeabi_ddiv>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff f84a 	bl	8000bc8 <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	60fb      	str	r3, [r7, #12]
    currentSymbolRate = actualSymbolRate;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	61da      	str	r2, [r3, #28]
    
    // Update the SYMBOL_RATE registers
    writeRegister(Register::SYMBOL_RATE0, srMInt & 0xFF);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	2115      	movs	r1, #21
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fcc9 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    uint8_t symbolRate1 = readRegister(Register::SYMBOL_RATE1);
 8001b4c:	2114      	movs	r1, #20
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fca6 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 8001b54:	4603      	mov	r3, r0
 8001b56:	72fb      	strb	r3, [r7, #11]
    symbolRate1 &= ~(0b1111 << SYMBOL_RATE1_SRATE_E); // Clear SRATE_E bits (bits 0-3)
 8001b58:	7afb      	ldrb	r3, [r7, #11]
 8001b5a:	f023 030f 	bic.w	r3, r3, #15
 8001b5e:	72fb      	strb	r3, [r7, #11]
    symbolRate1 |= (srE << SYMBOL_RATE1_SRATE_E); // Set new SRATE_E bits
 8001b60:	7afa      	ldrb	r2, [r7, #11]
 8001b62:	7ffb      	ldrb	r3, [r7, #31]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	72fb      	strb	r3, [r7, #11]
    writeRegister(Register::SYMBOL_RATE1, symbolRate1);
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2114      	movs	r1, #20
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fcb5 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    cc1200DebugPrintf("Set symbol rate to %.2f Hz (requested %.2f Hz)\n", actualSymbolRate, symbolRateHz);
}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7c:	4c189680 	.word	0x4c189680
 8001b80:	49800000 	.word	0x49800000
 8001b84:	43000000 	.word	0x43000000
 8001b88:	41300000 	.word	0x41300000

08001b8c <_Z17dBPowerToRegValuef>:

// helper function for power setting
uint8_t dBPowerToRegValue(float powerDB)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	ed87 0a01 	vstr	s0, [r7, #4]
    // Convert dBm to register value
    // The mapping is approximately linear from -16 dBm (0x00) to +14 dBm (0x3F)
    
    // Clamp the power to the valid range
    if(powerDB < -16.0f)
 8001b96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9a:	eebb 7a00 	vmov.f32	s14, #176	@ 0xc1800000 -16.0
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d502      	bpl.n	8001bae <_Z17dBPowerToRegValuef+0x22>
    {
        powerDB = -16.0f;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <_Z17dBPowerToRegValuef+0x6c>)
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	e00a      	b.n	8001bc4 <_Z17dBPowerToRegValuef+0x38>
    }
    else if(powerDB > 14.0f)
 8001bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb2:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8001bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	dd01      	ble.n	8001bc4 <_Z17dBPowerToRegValuef+0x38>
    {
        powerDB = 14.0f;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <_Z17dBPowerToRegValuef+0x70>)
 8001bc2:	607b      	str	r3, [r7, #4]
    }
    
    // Convert to register value (0-63)
    uint8_t regValue = static_cast<uint8_t>((powerDB + 16.0f) * 2.0f + 0.5f);
 8001bc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be0:	edc7 7a00 	vstr	s15, [r7]
 8001be4:	783b      	ldrb	r3, [r7, #0]
 8001be6:	73fb      	strb	r3, [r7, #15]
    
    return regValue;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	c1800000 	.word	0xc1800000
 8001bfc:	41600000 	.word	0x41600000

08001c00 <_ZN6CC120014setOutputPowerEf>:

void CC1200::setOutputPower(float outPower)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	ed87 0a00 	vstr	s0, [r7]
    uint8_t paValue = dBPowerToRegValue(outPower);
 8001c0c:	ed97 0a00 	vldr	s0, [r7]
 8001c10:	f7ff ffbc 	bl	8001b8c <_Z17dBPowerToRegValuef>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
    
    // Update the PA_CFG1 register
    writeRegister(Register::PA_CFG1, paValue);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	212b      	movs	r1, #43	@ 0x2b
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fc5d 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    cc1200DebugPrintf("Set output power to %.2f dBm (register value: 0x%02X)\n", outPower, paValue);
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZN6CC120017setRadioFrequencyENS_4BandEf>:
    
    cc1200DebugPrintf("Set ASK powers to %.2f dBm (max) and %.2f dBm (min)\n", maxPower, minPower);
}

void CC1200::setRadioFrequency(Band band, float frequencyHz)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calculate the register values for the given frequency
    // See CC1200 user guide section 9.10
    
    uint32_t fregValue;
    
    switch(band)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	f200 8101 	bhi.w	8001e44 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x218>
 8001c42:	a201      	add	r2, pc, #4	@ (adr r2, 8001c48 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x1c>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001c59 	.word	0x08001c59
 8001c4c:	08001c81 	.word	0x08001c81
 8001c50:	08001cad 	.word	0x08001cad
 8001c54:	08001cd5 	.word	0x08001cd5
    {
        case Band::BAND_820_960MHz:
            // For 820-960 MHz band, use the formula: FREQ = f * 2^16 / f_XOSC
            fregValue = static_cast<uint32_t>((frequencyHz * twoToThe16 / CC1200_OSC_FREQ) + 0.5f);
 8001c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8001e4c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x220>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c78:	ee17 3a90 	vmov	r3, s15
 8001c7c:	61fb      	str	r3, [r7, #28]
            break;
 8001c7e:	e03f      	b.n	8001d00 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0xd4>
            
        case Band::BAND_410_480MHz:
            // For 410-480 MHz band, use the formula: FREQ = f * 2^17 / f_XOSC
            fregValue = static_cast<uint32_t>((frequencyHz * twoToThe16 * 2.0f / CC1200_OSC_FREQ) + 0.5f);
 8001c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c84:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001e4c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x220>
 8001c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c90:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca4:	ee17 3a90 	vmov	r3, s15
 8001ca8:	61fb      	str	r3, [r7, #28]
            break;
 8001caa:	e029      	b.n	8001d00 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0xd4>
            
        case Band::BAND_136_160MHz:
            // For 136-160 MHz band, use the formula: FREQ = f * 2^21 / f_XOSC
            fregValue = static_cast<uint32_t>((frequencyHz * twoToThe21 / CC1200_OSC_FREQ) + 0.5f);
 8001cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb0:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001e54 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x228>
 8001cb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb8:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	61fb      	str	r3, [r7, #28]
            break;
 8001cd2:	e015      	b.n	8001d00 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0xd4>
            
        case Band::BAND_410_480MHz_HIGH_IF:
            // For 410-480 MHz band with high IF, use the formula: FREQ = f * 2^17 / f_XOSC
            fregValue = static_cast<uint32_t>((frequencyHz * twoToThe16 * 2.0f / CC1200_OSC_FREQ) + 0.5f);
 8001cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001e4c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x220>
 8001cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ce4:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf8:	ee17 3a90 	vmov	r3, s15
 8001cfc:	61fb      	str	r3, [r7, #28]
            break;
 8001cfe:	bf00      	nop
            // Invalid band
            return;
    }
    
    // Make sure we don't exceed the maximum value
    if(fregValue > maxValue24Bits)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d06:	d302      	bcc.n	8001d0e <_ZN6CC120017setRadioFrequencyENS_4BandEf+0xe2>
    {
        fregValue = maxValue24Bits;
 8001d08:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001d0c:	61fb      	str	r3, [r7, #28]
    }
    
    // Update the FREQ registers
    writeRegister(ExtRegister::FREQ0, fregValue & 0xFF);
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	210e      	movs	r1, #14
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff fc1d 	bl	8001556 <_ZN6CC120013writeRegisterENS_11ExtRegisterEh>
    writeRegister(ExtRegister::FREQ1, (fregValue >> 8) & 0xFF);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	210d      	movs	r1, #13
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff fc15 	bl	8001556 <_ZN6CC120013writeRegisterENS_11ExtRegisterEh>
    writeRegister(ExtRegister::FREQ2, (fregValue >> 16) & 0xFF);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	210c      	movs	r1, #12
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff fc0d 	bl	8001556 <_ZN6CC120013writeRegisterENS_11ExtRegisterEh>
    
    // Configure the band-specific settings
    uint8_t fs_cfg = readRegister(Register::FS_CFG);
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff fbae 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 8001d44:	4603      	mov	r3, r0
 8001d46:	76fb      	strb	r3, [r7, #27]
    fs_cfg &= ~(0b11 << FS_CFG_FSD_BANDSELECT); // Clear FSD_BANDSELECT bits (bits 0-1)
 8001d48:	7efb      	ldrb	r3, [r7, #27]
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	76fb      	strb	r3, [r7, #27]
    
    switch(band)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d819      	bhi.n	8001d8a <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x15e>
 8001d56:	a201      	add	r2, pc, #4	@ (adr r2, 8001d5c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x130>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d8b 	.word	0x08001d8b
 8001d60:	08001d6d 	.word	0x08001d6d
 8001d64:	08001d77 	.word	0x08001d77
 8001d68:	08001d81 	.word	0x08001d81
        case Band::BAND_820_960MHz:
            fs_cfg |= (0b00 << FS_CFG_FSD_BANDSELECT); // Set FSD_BANDSELECT to 0 for 820-960 MHz
            break;
            
        case Band::BAND_410_480MHz:
            fs_cfg |= (0b01 << FS_CFG_FSD_BANDSELECT); // Set FSD_BANDSELECT to 1 for 410-480 MHz
 8001d6c:	7efb      	ldrb	r3, [r7, #27]
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	76fb      	strb	r3, [r7, #27]
            break;
 8001d74:	e00a      	b.n	8001d8c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x160>
            
        case Band::BAND_136_160MHz:
            fs_cfg |= (0b10 << FS_CFG_FSD_BANDSELECT); // Set FSD_BANDSELECT to 2 for 136-160 MHz
 8001d76:	7efb      	ldrb	r3, [r7, #27]
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	76fb      	strb	r3, [r7, #27]
            break;
 8001d7e:	e005      	b.n	8001d8c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x160>
            
        case Band::BAND_410_480MHz_HIGH_IF:
            fs_cfg |= (0b11 << FS_CFG_FSD_BANDSELECT); // Set FSD_BANDSELECT to 3 for 410-480 MHz high IF
 8001d80:	7efb      	ldrb	r3, [r7, #27]
 8001d82:	f043 0303 	orr.w	r3, r3, #3
 8001d86:	76fb      	strb	r3, [r7, #27]
            break;
 8001d88:	e000      	b.n	8001d8c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x160>
            
        default:
            break;
 8001d8a:	bf00      	nop
    }
    
    writeRegister(Register::FS_CFG, fs_cfg);
 8001d8c:	7efb      	ldrb	r3, [r7, #27]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2120      	movs	r1, #32
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff fba3 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    // Store the current frequency
    currentFrequency = frequencyHz;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	621a      	str	r2, [r3, #32]
    
    // Calculate the actual frequency
    float actualFrequency;
    switch(band)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d84b      	bhi.n	8001e3c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x210>
 8001da4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dac <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x180>)
 8001da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001daa:	bf00      	nop
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001ddd 	.word	0x08001ddd
 8001db4:	08001dfd 	.word	0x08001dfd
 8001db8:	08001e1d 	.word	0x08001e1d
    {
        case Band::BAND_820_960MHz:
            actualFrequency = static_cast<float>(fregValue) * CC1200_OSC_FREQ / twoToThe16;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dce:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001e4c <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x220>
 8001dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd6:	edc7 7a05 	vstr	s15, [r7, #20]
            break;
 8001dda:	e034      	b.n	8001e46 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x21a>
            
        case Band::BAND_410_480MHz:
            actualFrequency = static_cast<float>(fregValue) * CC1200_OSC_FREQ / (twoToThe16 * 2.0f);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001dea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dee:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001e58 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x22c>
 8001df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df6:	edc7 7a05 	vstr	s15, [r7, #20]
            break;
 8001dfa:	e024      	b.n	8001e46 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x21a>
            
        case Band::BAND_136_160MHz:
            actualFrequency = static_cast<float>(fregValue) * CC1200_OSC_FREQ / twoToThe21;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e06:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001e0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e0e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001e54 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x228>
 8001e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e16:	edc7 7a05 	vstr	s15, [r7, #20]
            break;
 8001e1a:	e014      	b.n	8001e46 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x21a>
            
        case Band::BAND_410_480MHz_HIGH_IF:
            actualFrequency = static_cast<float>(fregValue) * CC1200_OSC_FREQ / (twoToThe16 * 2.0f);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e26:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001e50 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x224>
 8001e2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e2e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001e58 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x22c>
 8001e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e36:	edc7 7a05 	vstr	s15, [r7, #20]
            break;
 8001e3a:	e004      	b.n	8001e46 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x21a>
            
        default:
            actualFrequency = 0.0f;
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
            break;
 8001e42:	e000      	b.n	8001e46 <_ZN6CC120017setRadioFrequencyENS_4BandEf+0x21a>
            return;
 8001e44:	bf00      	nop
    }
    
    cc1200DebugPrintf("Set radio frequency to %.2f Hz (requested %.2f Hz)\n", actualFrequency, frequencyHz);
}
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	47800000 	.word	0x47800000
 8001e50:	4c189680 	.word	0x4c189680
 8001e54:	4a000000 	.word	0x4a000000
 8001e58:	48000000 	.word	0x48000000

08001e5c <_Z20calcReceiveBandwidthhh>:

// helper function for setRXFilterBandwidth:
// calculate actual receive bandwidth from the given decimations.
float calcReceiveBandwidth(uint8_t adcDecimation, uint8_t cicDecimation)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	460a      	mov	r2, r1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
    return CC1200_OSC_FREQ / (8.0f * adcDecimation * cicDecimation);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e76:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001e7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001ea8 <_Z20calcReceiveBandwidthhh+0x4c>
 8001e90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e94:	eef0 7a66 	vmov.f32	s15, s13
}
 8001e98:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	4c189680 	.word	0x4c189680

08001eac <_ZN6CC120020setRXFilterBandwidthEfb>:

void CC1200::setRXFilterBandwidth(float bandwidthHz, bool preferHigherCICDec)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b092      	sub	sp, #72	@ 0x48
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	71fb      	strb	r3, [r7, #7]
    
    // The bandwidth is determined by the formula: BW = f_XOSC / (8 * ADC_DEC * CIC_DEC)
    // where ADC_DEC is 16, 24, 32, or 40, and CIC_DEC is 1, 2, 4, 8, 16, 32, or 64
    
    // Find the best combination of ADC_DEC and CIC_DEC
    uint8_t bestAdcDec = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t bestCicDec = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    float bestBandwidth = 0.0f;
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	643b      	str	r3, [r7, #64]	@ 0x40
    float bestError = std::numeric_limits<float>::max();
 8001ece:	4b48      	ldr	r3, [pc, #288]	@ (8001ff0 <_ZN6CC120020setRXFilterBandwidthEfb+0x144>)
 8001ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
    // ADC decimation options
    const uint8_t adcDecOptions[] = {16, 24, 32, 40};
 8001ed2:	4b48      	ldr	r3, [pc, #288]	@ (8001ff4 <_ZN6CC120020setRXFilterBandwidthEfb+0x148>)
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint8_t adcDecRegValues[] = {0, 1, 2, 3};
 8001ed6:	4b48      	ldr	r3, [pc, #288]	@ (8001ff8 <_ZN6CC120020setRXFilterBandwidthEfb+0x14c>)
 8001ed8:	623b      	str	r3, [r7, #32]
    
    // CIC decimation options
    const uint8_t cicDecOptions[] = {1, 2, 4, 8, 16, 32, 64};
 8001eda:	4a48      	ldr	r2, [pc, #288]	@ (8001ffc <_ZN6CC120020setRXFilterBandwidthEfb+0x150>)
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee4:	6018      	str	r0, [r3, #0]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	8019      	strh	r1, [r3, #0]
 8001eea:	3302      	adds	r3, #2
 8001eec:	0c0a      	lsrs	r2, r1, #16
 8001eee:	701a      	strb	r2, [r3, #0]
    const uint8_t cicDecRegValues[] = {0, 1, 2, 3, 4, 5, 6};
 8001ef0:	4a43      	ldr	r2, [pc, #268]	@ (8002000 <_ZN6CC120020setRXFilterBandwidthEfb+0x154>)
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001efa:	6018      	str	r0, [r3, #0]
 8001efc:	3304      	adds	r3, #4
 8001efe:	8019      	strh	r1, [r3, #0]
 8001f00:	3302      	adds	r3, #2
 8001f02:	0c0a      	lsrs	r2, r1, #16
 8001f04:	701a      	strb	r2, [r3, #0]
    
    for(int i = 0; i < 4; i++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f0a:	e056      	b.n	8001fba <_ZN6CC120020setRXFilterBandwidthEfb+0x10e>
    {
        for(int j = 0; j < 7; j++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f10:	e04d      	b.n	8001fae <_ZN6CC120020setRXFilterBandwidthEfb+0x102>
        {
            float bw = calcReceiveBandwidth(adcDecOptions[i], cicDecOptions[j]);
 8001f12:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f18:	4413      	add	r3, r2
 8001f1a:	7818      	ldrb	r0, [r3, #0]
 8001f1c:	f107 0218 	add.w	r2, r7, #24
 8001f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7ff ff98 	bl	8001e5c <_Z20calcReceiveBandwidthhh>
 8001f2c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            float error = std::abs(bw - bandwidthHz);
 8001f30:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f40:	f7ff f85e 	bl	8001000 <_ZSt3absf>
 8001f44:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
            
            if(error < bestError || (error == bestError && preferHigherCICDec && cicDecOptions[j] > bestCicDec))
 8001f48:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f4c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f58:	d414      	bmi.n	8001f84 <_ZN6CC120020setRXFilterBandwidthEfb+0xd8>
 8001f5a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f5e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f62:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	d11d      	bne.n	8001fa8 <_ZN6CC120020setRXFilterBandwidthEfb+0xfc>
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01a      	beq.n	8001fa8 <_ZN6CC120020setRXFilterBandwidthEfb+0xfc>
 8001f72:	f107 0218 	add.w	r2, r7, #24
 8001f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d211      	bcs.n	8001fa8 <_ZN6CC120020setRXFilterBandwidthEfb+0xfc>
            {
                bestError = error;
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
                bestBandwidth = bw;
 8001f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8a:	643b      	str	r3, [r7, #64]	@ 0x40
                bestAdcDec = adcDecRegValues[i];
 8001f8c:	f107 0220 	add.w	r2, r7, #32
 8001f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                bestCicDec = cicDecRegValues[j];
 8001f9a:	f107 0210 	add.w	r2, r7, #16
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for(int j = 0; j < 7; j++)
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001faa:	3301      	adds	r3, #1
 8001fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	ddae      	ble.n	8001f12 <_ZN6CC120020setRXFilterBandwidthEfb+0x66>
    for(int i = 0; i < 4; i++)
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	dda5      	ble.n	8001f0c <_ZN6CC120020setRXFilterBandwidthEfb+0x60>
            }
        }
    }
    
    // Update the CHAN_BW register
    uint8_t chanBw = (bestAdcDec << CHAN_BW_ADC_CIC_DECFACT) | bestCicDec;
 8001fc0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	b25a      	sxtb	r2, r3
 8001fc8:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    writeRegister(Register::CHAN_BW, chanBw);
 8001fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2110      	movs	r1, #16
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7ff fa7e 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    // Store the current RX bandwidth
    currentRXBandwidth = bestBandwidth;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    
    cc1200DebugPrintf("Set RX filter bandwidth to %.2f Hz (requested %.2f Hz)\n", bestBandwidth, bandwidthHz);
}
 8001fe8:	bf00      	nop
 8001fea:	3748      	adds	r7, #72	@ 0x48
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	7f7fffff 	.word	0x7f7fffff
 8001ff4:	28201810 	.word	0x28201810
 8001ff8:	03020100 	.word	0x03020100
 8001ffc:	08014ae8 	.word	0x08014ae8
 8002000:	08014af0 	.word	0x08014af0

08002004 <_ZN6CC120017configureSyncWordEmNS_8SyncModeEh>:
    
    writeRegister(Register::DCFILT_CFG, dcfiltCfg);
}

void CC1200::configureSyncWord(uint32_t syncWord, SyncMode mode, uint8_t syncThreshold)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	460b      	mov	r3, r1
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	4613      	mov	r3, r2
 8002018:	71bb      	strb	r3, [r7, #6]
    // Update the SYNC registers with the sync word
    writeRegister(Register::SYNC3, (syncWord >> 24) & 0xFF);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	0e1b      	lsrs	r3, r3, #24
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	2104      	movs	r1, #4
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fa5a 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    writeRegister(Register::SYNC2, (syncWord >> 16) & 0xFF);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	2105      	movs	r1, #5
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f7ff fa52 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    writeRegister(Register::SYNC1, (syncWord >> 8) & 0xFF);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	2106      	movs	r1, #6
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff fa4a 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    writeRegister(Register::SYNC0, syncWord & 0xFF);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	2107      	movs	r1, #7
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f7ff fa43 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    // Configure the sync mode
    uint8_t syncCfg0 = readRegister(Register::SYNC_CFG0);
 8002058:	2109      	movs	r1, #9
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fa20 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]
    syncCfg0 &= ~(0b111 << SYNC_CFG0_SYNC_MODE); // Clear SYNC_MODE bits (bits 0-2)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	f023 0307 	bic.w	r3, r3, #7
 800206a:	75fb      	strb	r3, [r7, #23]
    syncCfg0 |= (static_cast<uint8_t>(mode) << SYNC_CFG0_SYNC_MODE); // Set new SYNC_MODE bits
 800206c:	7dfa      	ldrb	r2, [r7, #23]
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4313      	orrs	r3, r2
 8002072:	75fb      	strb	r3, [r7, #23]
    writeRegister(Register::SYNC_CFG0, syncCfg0);
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	461a      	mov	r2, r3
 8002078:	2109      	movs	r1, #9
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff fa2f 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    
    // Set the sync threshold if applicable
    if(syncThreshold > 0)
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d019      	beq.n	80020ba <_ZN6CC120017configureSyncWordEmNS_8SyncModeEh+0xb6>
    {
        uint8_t syncCfg1 = readRegister(Register::SYNC_CFG1);
 8002086:	2108      	movs	r1, #8
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff fa09 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 800208e:	4603      	mov	r3, r0
 8002090:	75bb      	strb	r3, [r7, #22]
        syncCfg1 &= ~(0b111 << SYNC_CFG1_SYNC_THR); // Clear SYNC_THR bits (bits 0-2)
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	f023 0307 	bic.w	r3, r3, #7
 8002098:	75bb      	strb	r3, [r7, #22]
        syncCfg1 |= ((syncThreshold & 0x7) << SYNC_CFG1_SYNC_THR); // Set new SYNC_THR bits
 800209a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	b25a      	sxtb	r2, r3
 80020a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	75bb      	strb	r3, [r7, #22]
        writeRegister(Register::SYNC_CFG1, syncCfg1);
 80020ae:	7dbb      	ldrb	r3, [r7, #22]
 80020b0:	461a      	mov	r2, r3
 80020b2:	2108      	movs	r1, #8
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fa12 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
    }
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_ZN6CC120017configurePreambleEhh>:
    uint8_t fscalCtrl = readRegister(ExtRegister::FSCAL_CTRL);
    return (fscalCtrl & (1 << 6)) != 0;
}

void CC1200::configurePreamble(uint8_t preambleLengthCfg, uint8_t preambleFormatCfg)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
 80020ce:	4613      	mov	r3, r2
 80020d0:	70bb      	strb	r3, [r7, #2]
    // Configure the preamble length and format
    uint8_t preambleCfg0 = readRegister(Register::PREAMBLE_CFG0);
 80020d2:	210e      	movs	r1, #14
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff f9e3 	bl	80014a0 <_ZN6CC120012readRegisterENS_8RegisterE>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
    preambleCfg0 &= ~(0b111 << PREAMBLE_CFG0_NUM_PREAMBLE); // Clear NUM_PREAMBLE bits (bits 0-2)
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	f023 0307 	bic.w	r3, r3, #7
 80020e4:	73fb      	strb	r3, [r7, #15]
    preambleCfg0 |= ((preambleLengthCfg & 0x7) << PREAMBLE_CFG0_NUM_PREAMBLE); // Set new NUM_PREAMBLE bits
 80020e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	b25a      	sxtb	r2, r3
 80020f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	73fb      	strb	r3, [r7, #15]
    
    preambleCfg0 &= ~(0b111 << PREAMBLE_CFG0_PREAMBLE_WORD); // Clear PREAMBLE_WORD bits (bits 5-7)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	73fb      	strb	r3, [r7, #15]
    preambleCfg0 |= ((preambleFormatCfg & 0x7) << PREAMBLE_CFG0_PREAMBLE_WORD); // Set new PREAMBLE_WORD bits
 8002102:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002106:	015b      	lsls	r3, r3, #5
 8002108:	b25a      	sxtb	r2, r3
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4313      	orrs	r3, r2
 8002110:	b25b      	sxtb	r3, r3
 8002112:	73fb      	strb	r3, [r7, #15]
    
    writeRegister(Register::PREAMBLE_CFG0, preambleCfg0);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	461a      	mov	r2, r3
 8002118:	210e      	movs	r1, #14
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff f9df 	bl	80014de <_ZN6CC120013writeRegisterENS_8RegisterEh>
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_ZN6CC120015getRSSIRegisterEv>:
    agcCfg2 |= ((settleWaitCfg & 0x7) << AGC_CFG2_AGC_SETTLE_WAIT); // Set new AGC_SETTLE_WAIT bits
    writeRegister(Register::AGC_CFG2, agcCfg2);
}

float CC1200::getRSSIRegister()
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    // Read the RSSI registers
    uint8_t rssi0 = readRegister(ExtRegister::RSSI0);
 8002130:	2172      	movs	r1, #114	@ 0x72
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff f9ef 	bl	8001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
    uint8_t rssi1 = readRegister(ExtRegister::RSSI1);
 800213c:	2171      	movs	r1, #113	@ 0x71
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff f9e9 	bl	8001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>
 8002144:	4603      	mov	r3, r0
 8002146:	73bb      	strb	r3, [r7, #14]
    
    // Combine the two bytes
    int16_t rssiValue = (static_cast<int16_t>(rssi1) << 8) | rssi0;
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	b21b      	sxth	r3, r3
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	81bb      	strh	r3, [r7, #12]
    
    // Convert to dBm
    // The RSSI value is in 0.5 dBm steps
    float rssiDbm = rssiValue / 2.0f;
 8002158:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002164:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return rssiDbm;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	ee07 3a90 	vmov	s15, r3
}
 8002176:	eeb0 0a67 	vmov.f32	s0, s15
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZN6CC120014getLQIRegisterEv>:
    agcCfg3 |= (adjust & 0xFF); // Set new RSSI_ADJUST bits
    writeRegister(Register::AGC_CFG3, agcCfg3);
}

uint8_t CC1200::getLQIRegister()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    // Read the LQI register
    return readRegister(ExtRegister::LQI_VAL);
 8002188:	2174      	movs	r1, #116	@ 0x74
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff f9c3 	bl	8001516 <_ZN6CC120012readRegisterENS_11ExtRegisterE>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_ZSt3powIfhEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    }

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800219a:	b5b0      	push	{r4, r5, r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	ed87 0a01 	vstr	s0, [r7, #4]
 80021a4:	4603      	mov	r3, r0
 80021a6:	70fb      	strb	r3, [r7, #3]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe f9e5 	bl	8000578 <__aeabi_f2d>
 80021ae:	4604      	mov	r4, r0
 80021b0:	460d      	mov	r5, r1
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9bd 	bl	8000534 <__aeabi_ui2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	ec43 2b11 	vmov	d1, r2, r3
 80021c2:	ec45 4b10 	vmov	d0, r4, r5
 80021c6:	f00e fc37 	bl	8010a38 <pow>
 80021ca:	eeb0 7a40 	vmov.f32	s14, s0
 80021ce:	eef0 7a60 	vmov.f32	s15, s1
    }
 80021d2:	eeb0 0a47 	vmov.f32	s0, s14
 80021d6:	eef0 0a67 	vmov.f32	s1, s15
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdb0      	pop	{r4, r5, r7, pc}

080021e0 <_ZN5RadioC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
#include <cstdio>

/**
 * @brief Constructor for Radio class
 */
Radio::Radio(SPI_HandleTypeDef* spi, 
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	807b      	strh	r3, [r7, #2]
             GPIO_TypeDef* cs_port, uint16_t cs_pin,
             GPIO_TypeDef* rst_port, uint16_t rst_pin)
    : cc1200(spi, cs_port, cs_pin, rst_port, rst_pin, nullptr, false)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	2300      	movs	r3, #0
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	8bbb      	ldrh	r3, [r7, #28]
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	f7fe ff0a 	bl	8001020 <_ZN6CC1200C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tP7__sFILEb>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
{
    // Constructor initializes the CC1200 driver with the provided parameters
}
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <_ZN5Radio4initEv>:

/**
 * @brief Initialize the radio
 */
bool Radio::init()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    // Initialize the CC1200 driver
    if (!cc1200.begin()) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe ff75 	bl	800112a <_ZN6CC12005beginEv>
 8002240:	4603      	mov	r3, r0
 8002242:	f083 0301 	eor.w	r3, r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <_ZN5Radio4initEv+0x20>
        return false;
 800224c:	2300      	movs	r3, #0
 800224e:	e048      	b.n	80022e2 <_ZN5Radio4initEv+0xb2>
    }
    
    // Configure for 4FSK modulation
    if (!configure4FSK()) {
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f84f 	bl	80022f4 <_ZN5Radio13configure4FSKEv>
 8002256:	4603      	mov	r3, r0
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <_ZN5Radio4initEv+0x36>
        return false;
 8002262:	2300      	movs	r3, #0
 8002264:	e03d      	b.n	80022e2 <_ZN5Radio4initEv+0xb2>
    }
    
    // Configure infinite read/write modes
    if (!configureInfiniteRead() || !configureInfiniteWrite()) {
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f882 	bl	8002370 <_ZN5Radio21configureInfiniteReadEv>
 800226c:	4603      	mov	r3, r0
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d108      	bne.n	800228a <_ZN5Radio4initEv+0x5a>
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f892 	bl	80023a2 <_ZN5Radio22configureInfiniteWriteEv>
 800227e:	4603      	mov	r3, r0
 8002280:	f083 0301 	eor.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <_ZN5Radio4initEv+0x5e>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <_ZN5Radio4initEv+0x60>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_ZN5Radio4initEv+0x68>
        return false;
 8002294:	2300      	movs	r3, #0
 8002296:	e024      	b.n	80022e2 <_ZN5Radio4initEv+0xb2>
    }
    
    // Configure DMA
    if (!configureDMA()) {
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f89a 	bl	80023d2 <_ZN5Radio12configureDMAEv>
 800229e:	4603      	mov	r3, r0
 80022a0:	f083 0301 	eor.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <_ZN5Radio4initEv+0x7e>
        return false;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e019      	b.n	80022e2 <_ZN5Radio4initEv+0xb2>
    }
    
    // Configure GPIO interrupts
    if (!configureGPIOInterrupts()) {
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f89a 	bl	80023e8 <_ZN5Radio23configureGPIOInterruptsEv>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <_ZN5Radio4initEv+0x94>
        return false;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e00e      	b.n	80022e2 <_ZN5Radio4initEv+0xb2>
    }
    
    // Set default frequency and symbol rate
    setFrequency(DEFAULT_FREQUENCY);
 80022c4:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80022ec <_ZN5Radio4initEv+0xbc>
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f91f 	bl	800250c <_ZN5Radio12setFrequencyEf>
    setSymbolRate(DEFAULT_SYMBOL_RATE);
 80022ce:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80022f0 <_ZN5Radio4initEv+0xc0>
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f97a 	bl	80025cc <_ZN5Radio13setSymbolRateEf>
    
    initialized = true;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return true;
 80022e0:	2301      	movs	r3, #1
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	4e5a272b 	.word	0x4e5a272b
 80022f0:	47435000 	.word	0x47435000

080022f4 <_ZN5Radio13configure4FSKEv>:

/**
 * @brief Configure the radio for 4FSK modulation
 */
bool Radio::configure4FSK()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    // Set modulation format to 4FSK
    cc1200.setModulationFormat(CC1200::ModFormat::FSK4);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2104      	movs	r1, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff faed 	bl	80018e0 <_ZN6CC120019setModulationFormatENS_9ModFormatE>
    
    // Set FSK deviation
    cc1200.setFSKDeviation(DEFAULT_DEVIATION);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8002364 <_ZN5Radio13configure4FSKEv+0x70>
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fb0b 	bl	8001928 <_ZN6CC120015setFSKDeviationEf>
    
    // Configure sync word (example value, can be changed as needed)
    cc1200.configureSyncWord(0x930B51DE, CC1200::SyncMode::REQUIRE_30_OF_32_SYNC_BITS);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	2300      	movs	r3, #0
 8002316:	2203      	movs	r2, #3
 8002318:	4913      	ldr	r1, [pc, #76]	@ (8002368 <_ZN5Radio13configure4FSKEv+0x74>)
 800231a:	f7ff fe73 	bl	8002004 <_ZN6CC120017configureSyncWordEmNS_8SyncModeEh>
    
    // Configure preamble (example values, can be adjusted)
    cc1200.configurePreamble(0x08, 0x22);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2222      	movs	r2, #34	@ 0x22
 8002322:	2108      	movs	r1, #8
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fecc 	bl	80020c2 <_ZN6CC120017configurePreambleEhh>
    
    // Set packet mode to fixed length for simplicity
    cc1200.setPacketMode(CC1200::PacketMode::FIXED_LENGTH, true);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fa3f 	bl	80017b4 <_ZN6CC120013setPacketModeENS_10PacketModeEb>
    
    // Enable CRC
    cc1200.setCRCEnabled(true);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2101      	movs	r1, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff faaf 	bl	800189e <_ZN6CC120013setCRCEnabledEb>
    
    // Configure RX filter bandwidth (adjust based on symbol rate and deviation)
    cc1200.setRXFilterBandwidth(DEFAULT_SYMBOL_RATE * 1.2f);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2100      	movs	r1, #0
 8002344:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800236c <_ZN5Radio13configure4FSKEv+0x78>
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fdaf 	bl	8001eac <_ZN6CC120020setRXFilterBandwidthEfb>
    
    // Set output power (adjust as needed)
    cc1200.setOutputPower(10.0f); // 10 dBm
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fc53 	bl	8001c00 <_ZN6CC120014setOutputPowerEf>
    
    return true;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	46c35000 	.word	0x46c35000
 8002368:	930b51de 	.word	0x930b51de
 800236c:	476a6001 	.word	0x476a6001

08002370 <_ZN5Radio21configureInfiniteReadEv>:

/**
 * @brief Configure infinite read mode
 */
bool Radio::configureInfiniteRead()
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    // Configure FIFO mode for continuous reception
    cc1200.configureFIFOMode();
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fa0a 	bl	8001794 <_ZN6CC120017configureFIFOModeEv>
    
    // Configure GPIO0 for RXFIFO_THR (RX FIFO threshold)
    cc1200.configureGPIO(0, CC1200::GPIOMode::RXFIFO_THR);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	2300      	movs	r3, #0
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	f7ff f9c4 	bl	8001714 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb>
    
    // Set on-receive state to continue receiving
    cc1200.setOnReceiveState(CC1200::State::RX, CC1200::State::RX);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f960 	bl	8001658 <_ZN6CC120017setOnReceiveStateENS_5StateES0_>
    
    return true;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZN5Radio22configureInfiniteWriteEv>:

/**
 * @brief Configure infinite write mode
 */
bool Radio::configureInfiniteWrite()
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
    // Configure FIFO mode for continuous transmission
    cc1200.configureFIFOMode();
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f9f1 	bl	8001794 <_ZN6CC120017configureFIFOModeEv>
    
    // Configure GPIO2 for TXFIFO_THR (TX FIFO threshold)
    cc1200.configureGPIO(2, CC1200::GPIOMode::TXFIFO_THR);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	2300      	movs	r3, #0
 80023b6:	2202      	movs	r2, #2
 80023b8:	2102      	movs	r1, #2
 80023ba:	f7ff f9ab 	bl	8001714 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb>
    
    // Set on-transmit state to continue transmitting
    cc1200.setOnTransmitState(CC1200::State::TX);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f97f 	bl	80016c6 <_ZN6CC120018setOnTransmitStateENS_5StateE>
    
    return true;
 80023c8:	2301      	movs	r3, #1
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <_ZN5Radio12configureDMAEv>:

/**
 * @brief Configure DMA for data transfer
 */
bool Radio::configureDMA()
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
    // We just need to ensure our CC1200 driver uses it correctly
    
    // Note: The actual DMA handling is done within the CC1200 driver
    // when using the readStream/writeStream methods
    
    return true;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_ZN5Radio23configureGPIOInterruptsEv>:

/**
 * @brief Configure GPIO pins for interrupts
 */
bool Radio::configureGPIOInterrupts()
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    // Configure GPIO3 for PKT_SYNC_RXTX (packet sync received/transmitted)
    cc1200.configureGPIO(3, CC1200::GPIOMode::PKT_SYNC_RXTX);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	2300      	movs	r3, #0
 80023f4:	2206      	movs	r2, #6
 80023f6:	2103      	movs	r1, #3
 80023f8:	f7ff f98c 	bl	8001714 <_ZN6CC120013configureGPIOEhNS_8GPIOModeEb>
    
    // Note: The actual interrupt handling will be set up in the GPIO initialization
    // and handled by the STM32 HAL GPIO interrupt callbacks
    
    return true;
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_ZN5Radio8transmitEPKcj>:

/**
 * @brief Transmit data
 */
bool Radio::transmit(const char* data, size_t len)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
    // Flush TX FIFO before transmitting
    cc1200.sendCommand(CC1200::Command::FLUSH_TX);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	213b      	movs	r1, #59	@ 0x3b
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f8bd 	bl	8001596 <_ZN6CC120011sendCommandENS_7CommandE>
    
    // Set packet length
    cc1200.setPacketLength(len);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	b291      	uxth	r1, r2
 8002422:	2208      	movs	r2, #8
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fa03 	bl	8001830 <_ZN6CC120015setPacketLengthEth>
    
    // Enqueue the packet
    if (!cc1200.enqueuePacket(data, len)) {
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe ff2e 	bl	8001292 <_ZN6CC120013enqueuePacketEPKcj>
 8002436:	4603      	mov	r3, r0
 8002438:	f083 0301 	eor.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <_ZN5Radio8transmitEPKcj+0x40>
        return false;
 8002442:	2300      	movs	r3, #0
 8002444:	e005      	b.n	8002452 <_ZN5Radio8transmitEPKcj+0x4c>
    }
    
    // Send TX command to start transmission
    cc1200.sendCommand(CC1200::Command::TX);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2135      	movs	r1, #53	@ 0x35
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f8a3 	bl	8001596 <_ZN6CC120011sendCommandENS_7CommandE>
    
    return true;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZN5Radio7receiveEPcj>:

/**
 * @brief Receive data
 */
size_t Radio::receive(char* buffer, size_t bufferLen)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
    // Check if a packet has been received
    if (!cc1200.hasReceivedPacket()) {
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe ff60 	bl	800132e <_ZN6CC120017hasReceivedPacketEv>
 800246e:	4603      	mov	r3, r0
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <_ZN5Radio7receiveEPcj+0x24>
        return 0;
 800247a:	2300      	movs	r3, #0
 800247c:	e007      	b.n	800248e <_ZN5Radio7receiveEPcj+0x34>
    }
    
    // Receive the packet
    return cc1200.receivePacket(buffer, bufferLen);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe ff85 	bl	8001394 <_ZN6CC120013receivePacketEPcj>
 800248a:	4603      	mov	r3, r0
 800248c:	bf00      	nop
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_ZN5Radio22startContinuousReceiveEv>:

/**
 * @brief Start continuous reception mode
 */
bool Radio::startContinuousReceive()
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
    if (receiving) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <_ZN5Radio22startContinuousReceiveEv+0x16>
        return true; // Already receiving
 80024a8:	2301      	movs	r3, #1
 80024aa:	e00e      	b.n	80024ca <_ZN5Radio22startContinuousReceiveEv+0x34>
    }
    
    // Flush RX FIFO
    cc1200.sendCommand(CC1200::Command::FLUSH_RX);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	213a      	movs	r1, #58	@ 0x3a
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f870 	bl	8001596 <_ZN6CC120011sendCommandENS_7CommandE>
    
    // Send RX command to start reception
    cc1200.sendCommand(CC1200::Command::RX);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2134      	movs	r1, #52	@ 0x34
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f86b 	bl	8001596 <_ZN6CC120011sendCommandENS_7CommandE>
    
    receiving = true;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    return true;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN5Radio21stopContinuousReceiveEv>:

/**
 * @brief Stop continuous reception mode
 */
bool Radio::stopContinuousReceive()
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
    if (!receiving) {
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <_ZN5Radio21stopContinuousReceiveEv+0x1c>
        return true; // Not receiving
 80024ea:	2301      	movs	r3, #1
 80024ec:	e009      	b.n	8002502 <_ZN5Radio21stopContinuousReceiveEv+0x30>
    }
    
    // Send IDLE command to stop reception
    cc1200.sendCommand(CC1200::Command::IDLE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2136      	movs	r1, #54	@ 0x36
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f84f 	bl	8001596 <_ZN6CC120011sendCommandENS_7CommandE>
    
    receiving = false;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    return true;
 8002500:	2301      	movs	r3, #1
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <_ZN5Radio12setFrequencyEf>:

/**
 * @brief Set the radio frequency
 */
bool Radio::setFrequency(float frequencyHz)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	ed87 0a00 	vstr	s0, [r7]
    // Set radio frequency using the appropriate band
    // Determine the band based on the frequency
    CC1200::Band band;
    
    if (frequencyHz >= 820e6 && frequencyHz <= 960e6) {
 8002518:	edd7 7a00 	vldr	s15, [r7]
 800251c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80025b4 <_ZN5Radio12setFrequencyEf+0xa8>
 8002520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	db0b      	blt.n	8002542 <_ZN5Radio12setFrequencyEf+0x36>
 800252a:	edd7 7a00 	vldr	s15, [r7]
 800252e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80025b8 <_ZN5Radio12setFrequencyEf+0xac>
 8002532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	d802      	bhi.n	8002542 <_ZN5Radio12setFrequencyEf+0x36>
        band = CC1200::Band::BAND_820_960MHz;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e02b      	b.n	800259a <_ZN5Radio12setFrequencyEf+0x8e>
    } else if (frequencyHz >= 410e6 && frequencyHz <= 480e6) {
 8002542:	edd7 7a00 	vldr	s15, [r7]
 8002546:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80025bc <_ZN5Radio12setFrequencyEf+0xb0>
 800254a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	db0b      	blt.n	800256c <_ZN5Radio12setFrequencyEf+0x60>
 8002554:	edd7 7a00 	vldr	s15, [r7]
 8002558:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80025c0 <_ZN5Radio12setFrequencyEf+0xb4>
 800255c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	d802      	bhi.n	800256c <_ZN5Radio12setFrequencyEf+0x60>
        band = CC1200::Band::BAND_410_480MHz;
 8002566:	2301      	movs	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e016      	b.n	800259a <_ZN5Radio12setFrequencyEf+0x8e>
    } else if (frequencyHz >= 136e6 && frequencyHz <= 160e6) {
 800256c:	edd7 7a00 	vldr	s15, [r7]
 8002570:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80025c4 <_ZN5Radio12setFrequencyEf+0xb8>
 8002574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	db0b      	blt.n	8002596 <_ZN5Radio12setFrequencyEf+0x8a>
 800257e:	edd7 7a00 	vldr	s15, [r7]
 8002582:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80025c8 <_ZN5Radio12setFrequencyEf+0xbc>
 8002586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258e:	d802      	bhi.n	8002596 <_ZN5Radio12setFrequencyEf+0x8a>
        band = CC1200::Band::BAND_136_160MHz;
 8002590:	2302      	movs	r3, #2
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	e001      	b.n	800259a <_ZN5Radio12setFrequencyEf+0x8e>
    } else {
        // Frequency out of supported range
        return false;
 8002596:	2300      	movs	r3, #0
 8002598:	e007      	b.n	80025aa <_ZN5Radio12setFrequencyEf+0x9e>
    }
    
    cc1200.setRadioFrequency(band, frequencyHz);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	ed97 0a00 	vldr	s0, [r7]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb42 	bl	8001c2c <_ZN6CC120017setRadioFrequencyENS_4BandEf>
    return true;
 80025a8:	2301      	movs	r3, #1
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	4e4380d4 	.word	0x4e4380d4
 80025b8:	4e64e1c0 	.word	0x4e64e1c0
 80025bc:	4dc380d4 	.word	0x4dc380d4
 80025c0:	4de4e1c0 	.word	0x4de4e1c0
 80025c4:	4d01b320 	.word	0x4d01b320
 80025c8:	4d189680 	.word	0x4d189680

080025cc <_ZN5Radio13setSymbolRateEf>:

/**
 * @brief Set the symbol rate
 */
bool Radio::setSymbolRate(float symbolRateHz)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	ed87 0a00 	vstr	s0, [r7]
    cc1200.setSymbolRate(symbolRateHz);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	ed97 0a00 	vldr	s0, [r7]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fa42 	bl	8001a68 <_ZN6CC120013setSymbolRateEf>
    
    // Update RX filter bandwidth based on symbol rate
    cc1200.setRXFilterBandwidth(symbolRateHz * 1.2f);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	edd7 7a00 	vldr	s15, [r7]
 80025ea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002608 <_ZN5Radio13setSymbolRateEf+0x3c>
 80025ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f2:	2100      	movs	r1, #0
 80025f4:	eeb0 0a67 	vmov.f32	s0, s15
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fc57 	bl	8001eac <_ZN6CC120020setRXFilterBandwidthEfb>
    
    return true;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	3f99999a 	.word	0x3f99999a

0800260c <_ZN5Radio9getCC1200Ev>:
    
    /**
     * @brief Get the CC1200 driver instance
     * @return Pointer to CC1200 driver
     */
    CC1200* getCC1200() { return &cc1200; }
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_ZN7Globals8getRadioEv>:

    /**
     * @brief  Get the Radio instance
     * @retval Radio instance
     */
    Radio* getRadio() { return m_radio; }
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <VCP_RxCallback>:

// Global VCPMenu instance for callback
static VCPMenu* g_vcpMenu = nullptr;

// Global callback function for USB CDC reception
extern "C" void VCP_RxCallback(uint8_t* data, uint32_t len) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
    if (g_vcpMenu != nullptr) {
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <VCP_RxCallback+0x28>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <VCP_RxCallback+0x20>
        g_vcpMenu->handleRxData(data, len);
 800264e:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <VCP_RxCallback+0x28>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fae6 	bl	8002c28 <_ZN7VCPMenu12handleRxDataEPhm>
    }
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	200002e4 	.word	0x200002e4

08002668 <_ZN7VCPMenuC1EP7Globals>:

/**
 * @brief Constructor for VCPMenu class
 */
VCPMenu::VCPMenu(Globals* globals)
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
    : m_globals(globals), m_rxBufferHead(0), m_rxBufferTail(0), m_cmdBufferIndex(0) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
    // Store the global instance for callback
    g_vcpMenu = this;
 8002690:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <_ZN7VCPMenuC1EP7Globals+0x3c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
}
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	200002e4 	.word	0x200002e4

080026a8 <_ZN7VCPMenu4initEv>:

/**
 * @brief Initialize the VCP Menu
 */
void VCPMenu::init() {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    // Clear buffers
    memset(m_rxBuffer, 0, sizeof(m_rxBuffer));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f010 f93a 	bl	8012934 <memset>
    memset(m_txBuffer, 0, sizeof(m_txBuffer));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80026c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f010 f931 	bl	8012934 <memset>
    memset(m_cmdBuffer, 0, sizeof(m_cmdBuffer));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80026d8:	2240      	movs	r2, #64	@ 0x40
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f010 f929 	bl	8012934 <memset>
    
    // Display welcome message
    displayWelcome();
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9a8 	bl	8002a38 <_ZN7VCPMenu14displayWelcomeEv>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN7VCPMenu11processDataEPhm>:

/**
 * @brief Process received data
 */
void VCPMenu::processData(uint8_t* data, uint32_t len) {
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
    // Add data to receive buffer
    for (uint32_t i = 0; i < len; i++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e021      	b.n	8002746 <_ZN7VCPMenu11processDataEPhm+0x56>
        // Check if buffer is full
        if ((m_rxBufferHead + 1) % VCP_RX_BUFFER_SIZE == m_rxBufferTail) {
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002708:	3301      	adds	r3, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002712:	429a      	cmp	r2, r3
 8002714:	d013      	beq.n	800273e <_ZN7VCPMenu11processDataEPhm+0x4e>
            // Buffer is full, discard data
            continue;
        }
        
        // Add data to buffer
        m_rxBuffer[m_rxBufferHead] = data[i];
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	441a      	add	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002722:	7811      	ldrb	r1, [r2, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	460a      	mov	r2, r1
 800272a:	711a      	strb	r2, [r3, #4]
        m_rxBufferHead = (m_rxBufferHead + 1) % VCP_RX_BUFFER_SIZE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002732:	3301      	adds	r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 800273c:	e000      	b.n	8002740 <_ZN7VCPMenu11processDataEPhm+0x50>
            continue;
 800273e:	bf00      	nop
    for (uint32_t i = 0; i < len; i++) {
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3d9      	bcc.n	8002702 <_ZN7VCPMenu11processDataEPhm+0x12>
    }
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <_ZN7VCPMenu15processCommandsEv>:

/**
 * @brief Process commands
 */
void VCPMenu::processCommands() {
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    // Process data in receive buffer
    while (m_rxBufferTail != m_rxBufferHead) {
 8002764:	e07c      	b.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
        // Get next byte
        uint8_t byte = m_rxBuffer[m_rxBufferTail];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	791b      	ldrb	r3, [r3, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
        m_rxBufferTail = (m_rxBufferTail + 1) % VCP_RX_BUFFER_SIZE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800277a:	3301      	adds	r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        
        // Echo character back to terminal
        char echo[2] = {static_cast<char>(byte), 0};
 8002784:	2300      	movs	r3, #0
 8002786:	81bb      	strh	r3, [r7, #12]
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	733b      	strb	r3, [r7, #12]
        sendData(echo, 1);
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2201      	movs	r2, #1
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fa0f 	bl	8002bb8 <_ZN7VCPMenu8sendDataEPKct>
        
        // Process byte
        if (byte == '\r' || byte == '\n') {
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b0d      	cmp	r3, #13
 800279e:	d002      	beq.n	80027a6 <_ZN7VCPMenu15processCommandsEv+0x4a>
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b0a      	cmp	r3, #10
 80027a4:	d125      	bne.n	80027f2 <_ZN7VCPMenu15processCommandsEv+0x96>
            // End of line, process command
            if (m_cmdBufferIndex > 0) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d057      	beq.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
                // Null-terminate command
                m_cmdBuffer[m_cmdBufferIndex] = '\0';
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
                
                // Parse and execute command
                parseCommand(m_cmdBuffer);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f85b 	bl	8002884 <_ZN7VCPMenu12parseCommandEPc>
                
                // Clear command buffer
                m_cmdBufferIndex = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
                memset(m_cmdBuffer, 0, sizeof(m_cmdBuffer));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80027dc:	2240      	movs	r2, #64	@ 0x40
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f010 f8a7 	bl	8012934 <memset>
                
                // Print prompt
                sendData("\r\n> ", 4);
 80027e6:	2204      	movs	r2, #4
 80027e8:	4924      	ldr	r1, [pc, #144]	@ (800287c <_ZN7VCPMenu15processCommandsEv+0x120>)
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9e4 	bl	8002bb8 <_ZN7VCPMenu8sendDataEPKct>
            if (m_cmdBufferIndex > 0) {
 80027f0:	e036      	b.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
            }
        } else if (byte == '\b' || byte == 127) {
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d002      	beq.n	80027fe <_ZN7VCPMenu15processCommandsEv+0xa2>
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80027fc:	d119      	bne.n	8002832 <_ZN7VCPMenu15processCommandsEv+0xd6>
            // Backspace
            if (m_cmdBufferIndex > 0) {
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d02b      	beq.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
                m_cmdBufferIndex--;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 800280e:	1e5a      	subs	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
                m_cmdBuffer[m_cmdBufferIndex] = '\0';
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	2200      	movs	r2, #0
 8002822:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
                
                // Echo backspace sequence
                sendData("\b \b", 3);
 8002826:	2203      	movs	r2, #3
 8002828:	4915      	ldr	r1, [pc, #84]	@ (8002880 <_ZN7VCPMenu15processCommandsEv+0x124>)
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f9c4 	bl	8002bb8 <_ZN7VCPMenu8sendDataEPKct>
            if (m_cmdBufferIndex > 0) {
 8002830:	e016      	b.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
            }
        } else if (byte >= 32 && byte < 127) {
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b1f      	cmp	r3, #31
 8002836:	d913      	bls.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b7e      	cmp	r3, #126	@ 0x7e
 800283c:	d810      	bhi.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
            // Printable character
            if (m_cmdBufferIndex < VCP_CMD_BUFFER_SIZE - 1) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 8002844:	2b3e      	cmp	r3, #62	@ 0x3e
 8002846:	d80b      	bhi.n	8002860 <_ZN7VCPMenu15processCommandsEv+0x104>
                m_cmdBuffer[m_cmdBufferIndex++] = static_cast<char>(byte);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
 800284e:	1c59      	adds	r1, r3, #1
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	f8c2 124c 	str.w	r1, [r2, #588]	@ 0x24c
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
    while (m_rxBufferTail != m_rxBufferHead) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800286c:	429a      	cmp	r2, r3
 800286e:	f47f af7a 	bne.w	8002766 <_ZN7VCPMenu15processCommandsEv+0xa>
            }
        }
    }
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	08014af8 	.word	0x08014af8
 8002880:	08014b00 	.word	0x08014b00

08002884 <_ZN7VCPMenu12parseCommandEPc>:

/**
 * @brief Parse command
 */
void VCPMenu::parseCommand(char* cmd) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	@ 0x30
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
    // Tokenize command
    char* argv[VCP_MAX_ARGS];
    int argc = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    char* token = strtok(cmd, " \t");
 8002892:	4914      	ldr	r1, [pc, #80]	@ (80028e4 <_ZN7VCPMenu12parseCommandEPc+0x60>)
 8002894:	6838      	ldr	r0, [r7, #0]
 8002896:	f010 f867 	bl	8012968 <strtok>
 800289a:	62b8      	str	r0, [r7, #40]	@ 0x28
    while (token != nullptr && argc < VCP_MAX_ARGS) {
 800289c:	e00d      	b.n	80028ba <_ZN7VCPMenu12parseCommandEPc+0x36>
        argv[argc++] = token;
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	3330      	adds	r3, #48	@ 0x30
 80028a8:	443b      	add	r3, r7
 80028aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ac:	f843 2c28 	str.w	r2, [r3, #-40]
        token = strtok(nullptr, " \t");
 80028b0:	490c      	ldr	r1, [pc, #48]	@ (80028e4 <_ZN7VCPMenu12parseCommandEPc+0x60>)
 80028b2:	2000      	movs	r0, #0
 80028b4:	f010 f858 	bl	8012968 <strtok>
 80028b8:	62b8      	str	r0, [r7, #40]	@ 0x28
    while (token != nullptr && argc < VCP_MAX_ARGS) {
 80028ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <_ZN7VCPMenu12parseCommandEPc+0x42>
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	2b07      	cmp	r3, #7
 80028c4:	ddeb      	ble.n	800289e <_ZN7VCPMenu12parseCommandEPc+0x1a>
    }
    
    // Execute command
    if (argc > 0) {
 80028c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	dd06      	ble.n	80028da <_ZN7VCPMenu12parseCommandEPc+0x56>
        executeCommand(cmd, argc, argv);
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f807 	bl	80028e8 <_ZN7VCPMenu14executeCommandEPKciPPc>
    }
}
 80028da:	bf00      	nop
 80028dc:	3730      	adds	r7, #48	@ 0x30
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	08014b04 	.word	0x08014b04

080028e8 <_ZN7VCPMenu14executeCommandEPKciPPc>:

/**
 * @brief Execute command
 */
void VCPMenu::executeCommand(const char* cmd, int argc, char* argv[]) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
    // Check command
    if (strcmp(argv[0], "help") == 0) {
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4944      	ldr	r1, [pc, #272]	@ (8002a0c <_ZN7VCPMenu14executeCommandEPKciPPc+0x124>)
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fc6f 	bl	80001e0 <strcmp>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <_ZN7VCPMenu14executeCommandEPKciPPc+0x2c>
        cmdHelp(argc, argv);
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f99a 	bl	8002c46 <_ZN7VCPMenu7cmdHelpEiPPc>
    } else {
        // Unknown command
        printf("Unknown command: %s\r\n", argv[0]);
        printf("Type 'help' for a list of commands\r\n");
    }
}
 8002912:	e077      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
    } else if (strcmp(argv[0], "status") == 0) {
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	493d      	ldr	r1, [pc, #244]	@ (8002a10 <_ZN7VCPMenu14executeCommandEPKciPPc+0x128>)
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fc60 	bl	80001e0 <strcmp>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <_ZN7VCPMenu14executeCommandEPKciPPc+0x4a>
        cmdStatus(argc, argv);
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f998 	bl	8002c60 <_ZN7VCPMenu9cmdStatusEiPPc>
}
 8002930:	e068      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
    } else if (strcmp(argv[0], "tx") == 0 || strcmp(argv[0], "transmit") == 0) {
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4937      	ldr	r1, [pc, #220]	@ (8002a14 <_ZN7VCPMenu14executeCommandEPKciPPc+0x12c>)
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fc51 	bl	80001e0 <strcmp>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <_ZN7VCPMenu14executeCommandEPKciPPc+0x6e>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4933      	ldr	r1, [pc, #204]	@ (8002a18 <_ZN7VCPMenu14executeCommandEPKciPPc+0x130>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fc48 	bl	80001e0 <strcmp>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <_ZN7VCPMenu14executeCommandEPKciPPc+0x7a>
        cmdTransmit(argc, argv);
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f98e 	bl	8002c7c <_ZN7VCPMenu11cmdTransmitEiPPc>
 8002960:	e050      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
    } else if (strcmp(argv[0], "rx") == 0 || strcmp(argv[0], "receive") == 0) {
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	492d      	ldr	r1, [pc, #180]	@ (8002a1c <_ZN7VCPMenu14executeCommandEPKciPPc+0x134>)
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fc39 	bl	80001e0 <strcmp>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <_ZN7VCPMenu14executeCommandEPKciPPc+0x9e>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4929      	ldr	r1, [pc, #164]	@ (8002a20 <_ZN7VCPMenu14executeCommandEPKciPPc+0x138>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fc30 	bl	80001e0 <strcmp>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <_ZN7VCPMenu14executeCommandEPKciPPc+0xaa>
        cmdReceive(argc, argv);
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fa66 	bl	8002e5c <_ZN7VCPMenu10cmdReceiveEiPPc>
 8002990:	e038      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
    } else if (strcmp(argv[0], "freq") == 0) {
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4923      	ldr	r1, [pc, #140]	@ (8002a24 <_ZN7VCPMenu14executeCommandEPKciPPc+0x13c>)
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fc21 	bl	80001e0 <strcmp>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <_ZN7VCPMenu14executeCommandEPKciPPc+0xc8>
        cmdSetFreq(argc, argv);
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fb11 	bl	8002fd0 <_ZN7VCPMenu10cmdSetFreqEiPPc>
}
 80029ae:	e029      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
    } else if (strcmp(argv[0], "rate") == 0) {
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	491c      	ldr	r1, [pc, #112]	@ (8002a28 <_ZN7VCPMenu14executeCommandEPKciPPc+0x140>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fc12 	bl	80001e0 <strcmp>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <_ZN7VCPMenu14executeCommandEPKciPPc+0xe6>
        cmdSetRate(argc, argv);
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fb64 	bl	8003094 <_ZN7VCPMenu10cmdSetRateEiPPc>
}
 80029cc:	e01a      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
    } else if (strcmp(argv[0], "reset") == 0) {
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4916      	ldr	r1, [pc, #88]	@ (8002a2c <_ZN7VCPMenu14executeCommandEPKciPPc+0x144>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fc03 	bl	80001e0 <strcmp>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <_ZN7VCPMenu14executeCommandEPKciPPc+0x104>
        cmdReset(argc, argv);
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fbb5 	bl	8003154 <_ZN7VCPMenu8cmdResetEiPPc>
}
 80029ea:	e00b      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
        printf("Unknown command: %s\r\n", argv[0]);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	490f      	ldr	r1, [pc, #60]	@ (8002a30 <_ZN7VCPMenu14executeCommandEPKciPPc+0x148>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f8ef 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        printf("Type 'help' for a list of commands\r\n");
 80029fa:	490e      	ldr	r1, [pc, #56]	@ (8002a34 <_ZN7VCPMenu14executeCommandEPKciPPc+0x14c>)
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f8eb 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
}
 8002a02:	e7ff      	b.n	8002a04 <_ZN7VCPMenu14executeCommandEPKciPPc+0x11c>
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	08014b08 	.word	0x08014b08
 8002a10:	08014b10 	.word	0x08014b10
 8002a14:	08014b18 	.word	0x08014b18
 8002a18:	08014b1c 	.word	0x08014b1c
 8002a1c:	08014b28 	.word	0x08014b28
 8002a20:	08014b2c 	.word	0x08014b2c
 8002a24:	08014b34 	.word	0x08014b34
 8002a28:	08014b3c 	.word	0x08014b3c
 8002a2c:	08014b44 	.word	0x08014b44
 8002a30:	08014b4c 	.word	0x08014b4c
 8002a34:	08014b64 	.word	0x08014b64

08002a38 <_ZN7VCPMenu14displayWelcomeEv>:

/**
 * @brief Display welcome message
 */
void VCPMenu::displayWelcome() {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    printf("\r\n\r\n");
 8002a40:	4913      	ldr	r1, [pc, #76]	@ (8002a90 <_ZN7VCPMenu14displayWelcomeEv+0x58>)
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8c8 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("*************************************************\r\n");
 8002a48:	4912      	ldr	r1, [pc, #72]	@ (8002a94 <_ZN7VCPMenu14displayWelcomeEv+0x5c>)
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8c4 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("*                                               *\r\n");
 8002a50:	4911      	ldr	r1, [pc, #68]	@ (8002a98 <_ZN7VCPMenu14displayWelcomeEv+0x60>)
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8c0 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("*           CC1200 Radio HAT Terminal           *\r\n");
 8002a58:	4910      	ldr	r1, [pc, #64]	@ (8002a9c <_ZN7VCPMenu14displayWelcomeEv+0x64>)
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8bc 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("*                                               *\r\n");
 8002a60:	490d      	ldr	r1, [pc, #52]	@ (8002a98 <_ZN7VCPMenu14displayWelcomeEv+0x60>)
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8b8 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("*************************************************\r\n");
 8002a68:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <_ZN7VCPMenu14displayWelcomeEv+0x5c>)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8b4 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("\r\n");
 8002a70:	490b      	ldr	r1, [pc, #44]	@ (8002aa0 <_ZN7VCPMenu14displayWelcomeEv+0x68>)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8b0 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("Type 'help' for a list of commands\r\n");
 8002a78:	490a      	ldr	r1, [pc, #40]	@ (8002aa4 <_ZN7VCPMenu14displayWelcomeEv+0x6c>)
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8ac 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("\r\n> ");
 8002a80:	4909      	ldr	r1, [pc, #36]	@ (8002aa8 <_ZN7VCPMenu14displayWelcomeEv+0x70>)
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8a8 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	08014b8c 	.word	0x08014b8c
 8002a94:	08014b94 	.word	0x08014b94
 8002a98:	08014bc8 	.word	0x08014bc8
 8002a9c:	08014bfc 	.word	0x08014bfc
 8002aa0:	08014c30 	.word	0x08014c30
 8002aa4:	08014b64 	.word	0x08014b64
 8002aa8:	08014af8 	.word	0x08014af8

08002aac <_ZN7VCPMenu11displayHelpEv>:

/**
 * @brief Display help menu
 */
void VCPMenu::displayHelp() {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    printf("\r\nAvailable commands:\r\n");
 8002ab4:	4913      	ldr	r1, [pc, #76]	@ (8002b04 <_ZN7VCPMenu11displayHelpEv+0x58>)
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f88e 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  help                 - Display this help message\r\n");
 8002abc:	4912      	ldr	r1, [pc, #72]	@ (8002b08 <_ZN7VCPMenu11displayHelpEv+0x5c>)
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f88a 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  status               - Display radio status\r\n");
 8002ac4:	4911      	ldr	r1, [pc, #68]	@ (8002b0c <_ZN7VCPMenu11displayHelpEv+0x60>)
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f886 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  tx <data>            - Transmit data\r\n");
 8002acc:	4910      	ldr	r1, [pc, #64]	@ (8002b10 <_ZN7VCPMenu11displayHelpEv+0x64>)
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f882 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  rx                   - Start receiving data\r\n");
 8002ad4:	490f      	ldr	r1, [pc, #60]	@ (8002b14 <_ZN7VCPMenu11displayHelpEv+0x68>)
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f87e 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  freq <frequency>     - Set radio frequency in Hz\r\n");
 8002adc:	490e      	ldr	r1, [pc, #56]	@ (8002b18 <_ZN7VCPMenu11displayHelpEv+0x6c>)
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f87a 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  rate <symbol_rate>   - Set symbol rate in Hz\r\n");
 8002ae4:	490d      	ldr	r1, [pc, #52]	@ (8002b1c <_ZN7VCPMenu11displayHelpEv+0x70>)
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f876 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  reset                - Reset the radio\r\n");
 8002aec:	490c      	ldr	r1, [pc, #48]	@ (8002b20 <_ZN7VCPMenu11displayHelpEv+0x74>)
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f872 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("\r\n");
 8002af4:	490b      	ldr	r1, [pc, #44]	@ (8002b24 <_ZN7VCPMenu11displayHelpEv+0x78>)
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f86e 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	08014c34 	.word	0x08014c34
 8002b08:	08014c4c 	.word	0x08014c4c
 8002b0c:	08014c84 	.word	0x08014c84
 8002b10:	08014cb4 	.word	0x08014cb4
 8002b14:	08014ce0 	.word	0x08014ce0
 8002b18:	08014d10 	.word	0x08014d10
 8002b1c:	08014d48 	.word	0x08014d48
 8002b20:	08014d7c 	.word	0x08014d7c
 8002b24:	08014c30 	.word	0x08014c30

08002b28 <_ZN7VCPMenu13displayStatusEv>:

/**
 * @brief Display status
 */
void VCPMenu::displayStatus() {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
    Radio* radio = m_globals->getRadio();
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fd74 	bl	8002622 <_ZN7Globals8getRadioEv>
 8002b3a:	60f8      	str	r0, [r7, #12]
    if (radio == nullptr) {
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <_ZN7VCPMenu13displayStatusEv+0x24>
        printf("Radio not initialized\r\n");
 8002b42:	4917      	ldr	r1, [pc, #92]	@ (8002ba0 <_ZN7VCPMenu13displayStatusEv+0x78>)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f847 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        return;
 8002b4a:	e026      	b.n	8002b9a <_ZN7VCPMenu13displayStatusEv+0x72>
    }
    
    CC1200* cc1200 = radio->getCC1200();
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff fd5d 	bl	800260c <_ZN5Radio9getCC1200Ev>
 8002b52:	60b8      	str	r0, [r7, #8]
    
    printf("\r\nRadio Status:\r\n");
 8002b54:	4913      	ldr	r1, [pc, #76]	@ (8002ba4 <_ZN7VCPMenu13displayStatusEv+0x7c>)
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f83e 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  Initialized: Yes\r\n");
 8002b5c:	4912      	ldr	r1, [pc, #72]	@ (8002ba8 <_ZN7VCPMenu13displayStatusEv+0x80>)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f83a 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  RSSI: %.1f dBm\r\n", cc1200->getRSSIRegister());
 8002b64:	68b8      	ldr	r0, [r7, #8]
 8002b66:	f7ff fadf 	bl	8002128 <_ZN6CC120015getRSSIRegisterEv>
 8002b6a:	ee10 3a10 	vmov	r3, s0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fd02 	bl	8000578 <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	490c      	ldr	r1, [pc, #48]	@ (8002bac <_ZN7VCPMenu13displayStatusEv+0x84>)
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f82c 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("  LQI: %u\r\n", cc1200->getLQIRegister());
 8002b80:	68b8      	ldr	r0, [r7, #8]
 8002b82:	f7ff fafd 	bl	8002180 <_ZN6CC120014getLQIRegisterEv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4909      	ldr	r1, [pc, #36]	@ (8002bb0 <_ZN7VCPMenu13displayStatusEv+0x88>)
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f823 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("\r\n");
 8002b92:	4908      	ldr	r1, [pc, #32]	@ (8002bb4 <_ZN7VCPMenu13displayStatusEv+0x8c>)
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f81f 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
}
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	08014da8 	.word	0x08014da8
 8002ba4:	08014dc0 	.word	0x08014dc0
 8002ba8:	08014dd4 	.word	0x08014dd4
 8002bac:	08014dec 	.word	0x08014dec
 8002bb0:	08014e00 	.word	0x08014e00
 8002bb4:	08014c30 	.word	0x08014c30

08002bb8 <_ZN7VCPMenu8sendDataEPKct>:

/**
 * @brief Send data over VCP
 */
void VCPMenu::sendData(const char* data, uint16_t len) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
    // Send data over USB CDC
    CDC_Transmit_FS((uint8_t*)data, len);
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	68b8      	ldr	r0, [r7, #8]
 8002bcc:	f00d fad8 	bl	8010180 <CDC_Transmit_FS>
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZN7VCPMenu6printfEPKcz>:

/**
 * @brief Print formatted string to VCP
 */
void VCPMenu::printf(const char* format, ...) {
 8002bd8:	b40e      	push	{r1, r2, r3}
 8002bda:	b590      	push	{r4, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, format);
 8002be2:	f107 0320 	add.w	r3, r7, #32
 8002be6:	60fb      	str	r3, [r7, #12]
    
    // Format string
    vsnprintf((char*)m_txBuffer, VCP_TX_BUFFER_SIZE, format, args);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f503 7086 	add.w	r0, r3, #268	@ 0x10c
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bf6:	f00f f80b 	bl	8011c10 <vsniprintf>
    
    va_end(args);
    
    // Send data
    sendData((char*)m_txBuffer, strlen((char*)m_txBuffer));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f503 7486 	add.w	r4, r3, #268	@ 0x10c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd faf4 	bl	80001f4 <strlen>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	4621      	mov	r1, r4
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ffcf 	bl	8002bb8 <_ZN7VCPMenu8sendDataEPKct>
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c24:	b003      	add	sp, #12
 8002c26:	4770      	bx	lr

08002c28 <_ZN7VCPMenu12handleRxDataEPhm>:

/**
 * @brief Handle received data callback
 */
void VCPMenu::handleRxData(uint8_t* data, uint32_t len) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
    processData(data, len);
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fd59 	bl	80026f0 <_ZN7VCPMenu11processDataEPhm>
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_ZN7VCPMenu7cmdHelpEiPPc>:

/**
 * @brief Command handler: help
 */
void VCPMenu::cmdHelp(int argc, char* argv[]) {
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
    displayHelp();
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ff2a 	bl	8002aac <_ZN7VCPMenu11displayHelpEv>
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZN7VCPMenu9cmdStatusEiPPc>:

/**
 * @brief Command handler: status
 */
void VCPMenu::cmdStatus(int argc, char* argv[]) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
    displayStatus();
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ff5b 	bl	8002b28 <_ZN7VCPMenu13displayStatusEv>
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <_ZN7VCPMenu11cmdTransmitEiPPc>:

/**
 * @brief Command handler: transmit
 */
void VCPMenu::cmdTransmit(int argc, char* argv[]) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0c8      	sub	sp, #288	@ 0x120
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c8a:	6018      	str	r0, [r3, #0]
 8002c8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c94:	6019      	str	r1, [r3, #0]
 8002c96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c9e:	601a      	str	r2, [r3, #0]
    Radio* radio = m_globals->getRadio();
 8002ca0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ca4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fcb8 	bl	8002622 <_ZN7Globals8getRadioEv>
 8002cb2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (radio == nullptr) {
 8002cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <_ZN7VCPMenu11cmdTransmitEiPPc+0x54>
        printf("Radio not initialized\r\n");
 8002cbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cc2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cc6:	495f      	ldr	r1, [pc, #380]	@ (8002e44 <_ZN7VCPMenu11cmdTransmitEiPPc+0x1c8>)
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	f7ff ff85 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        return;
 8002cce:	e0b5      	b.n	8002e3c <_ZN7VCPMenu11cmdTransmitEiPPc+0x1c0>
    }
    
    if (argc < 2) {
 8002cd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cd4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	dc08      	bgt.n	8002cf0 <_ZN7VCPMenu11cmdTransmitEiPPc+0x74>
        printf("Usage: tx <data>\r\n");
 8002cde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ce2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ce6:	4958      	ldr	r1, [pc, #352]	@ (8002e48 <_ZN7VCPMenu11cmdTransmitEiPPc+0x1cc>)
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	f7ff ff75 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        return;
 8002cee:	e0a5      	b.n	8002e3c <_ZN7VCPMenu11cmdTransmitEiPPc+0x1c0>
    }
    
    // Reconstruct data from arguments
    char txData[VCP_TX_BUFFER_SIZE] = {0};
 8002cf0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cf4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2100      	movs	r1, #0
 8002d02:	f00f fe17 	bl	8012934 <memset>
    size_t txLen = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    
    for (int i = 1; i < argc; i++) {
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002d12:	e04c      	b.n	8002dae <_ZN7VCPMenu11cmdTransmitEiPPc+0x132>
        size_t argLen = strlen(argv[i]);
 8002d14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002d1e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fa63 	bl	80001f4 <strlen>
 8002d2e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
        
        // Check if buffer has enough space
        if (txLen + argLen + 1 >= VCP_TX_BUFFER_SIZE) {
 8002d32:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	2bff      	cmp	r3, #255	@ 0xff
 8002d40:	d908      	bls.n	8002d54 <_ZN7VCPMenu11cmdTransmitEiPPc+0xd8>
            printf("Data too long\r\n");
 8002d42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002d46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d4a:	4940      	ldr	r1, [pc, #256]	@ (8002e4c <_ZN7VCPMenu11cmdTransmitEiPPc+0x1d0>)
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	f7ff ff43 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
            return;
 8002d52:	e073      	b.n	8002e3c <_ZN7VCPMenu11cmdTransmitEiPPc+0x1c0>
        }
        
        // Add argument to buffer
        if (i > 1) {
 8002d54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	dd0a      	ble.n	8002d72 <_ZN7VCPMenu11cmdTransmitEiPPc+0xf6>
            txData[txLen++] = ' ';
 8002d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002d66:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002d6a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002d6e:	2120      	movs	r1, #32
 8002d70:	54d1      	strb	r1, [r2, r3]
        }
        
        strcpy(txData + txLen, argv[i]);
 8002d72:	f107 0210 	add.w	r2, r7, #16
 8002d76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d7a:	18d0      	adds	r0, r2, r3
 8002d7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002d86:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f00f ff21 	bl	8012bd8 <strcpy>
        txLen += argLen;
 8002d96:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002d9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d9e:	4413      	add	r3, r2
 8002da0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for (int i = 1; i < argc; i++) {
 8002da4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002da8:	3301      	adds	r3, #1
 8002daa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002dae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002db2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002db6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dba9      	blt.n	8002d14 <_ZN7VCPMenu11cmdTransmitEiPPc+0x98>
    }
    
    // Transmit data
    printf("Transmitting: %s\r\n", txData);
 8002dc0:	f107 0210 	add.w	r2, r7, #16
 8002dc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002dc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002dcc:	4920      	ldr	r1, [pc, #128]	@ (8002e50 <_ZN7VCPMenu11cmdTransmitEiPPc+0x1d4>)
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	f7ff ff02 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    
    if (radio->transmit(txData, txLen)) {
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8002de2:	f7ff fb10 	bl	8002406 <_ZN5Radio8transmitEPKcj>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01f      	beq.n	8002e2c <_ZN7VCPMenu11cmdTransmitEiPPc+0x1b0>
        printf("Transmission successful\r\n");
 8002dec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002df0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002df4:	4917      	ldr	r1, [pc, #92]	@ (8002e54 <_ZN7VCPMenu11cmdTransmitEiPPc+0x1d8>)
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	f7ff feee 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        
        // Turn on TX LED for visual feedback
        m_globals->setTxLED(1);
 8002dfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e00:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fbbc 	bl	8003588 <_ZN7Globals8setTxLEDEh>
        
        // Turn off TX LED after a short delay
        HAL_Delay(100);
 8002e10:	2064      	movs	r0, #100	@ 0x64
 8002e12:	f001 fac7 	bl	80043a4 <HAL_Delay>
        m_globals->setTxLED(0);
 8002e16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fbaf 	bl	8003588 <_ZN7Globals8setTxLEDEh>
 8002e2a:	e007      	b.n	8002e3c <_ZN7VCPMenu11cmdTransmitEiPPc+0x1c0>
    } else {
        printf("Transmission failed\r\n");
 8002e2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e34:	4908      	ldr	r1, [pc, #32]	@ (8002e58 <_ZN7VCPMenu11cmdTransmitEiPPc+0x1dc>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	f7ff fece 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    }
}
 8002e3c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	08014da8 	.word	0x08014da8
 8002e48:	08014e0c 	.word	0x08014e0c
 8002e4c:	08014e20 	.word	0x08014e20
 8002e50:	08014e30 	.word	0x08014e30
 8002e54:	08014e44 	.word	0x08014e44
 8002e58:	08014e60 	.word	0x08014e60

08002e5c <_ZN7VCPMenu10cmdReceiveEiPPc>:

/**
 * @brief Command handler: receive
 */
void VCPMenu::cmdReceive(int argc, char* argv[]) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0c8      	sub	sp, #288	@ 0x120
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e6a:	6018      	str	r0, [r3, #0]
 8002e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e74:	6019      	str	r1, [r3, #0]
 8002e76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e7e:	601a      	str	r2, [r3, #0]
    Radio* radio = m_globals->getRadio();
 8002e80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e84:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fbc8 	bl	8002622 <_ZN7Globals8getRadioEv>
 8002e92:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    if (radio == nullptr) {
 8002e96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <_ZN7VCPMenu10cmdReceiveEiPPc+0x54>
        printf("Radio not initialized\r\n");
 8002e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ea2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ea6:	4945      	ldr	r1, [pc, #276]	@ (8002fbc <_ZN7VCPMenu10cmdReceiveEiPPc+0x160>)
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	f7ff fe95 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
 8002eae:	e080      	b.n	8002fb2 <_ZN7VCPMenu10cmdReceiveEiPPc+0x156>
        return;
    }
    
    printf("Starting continuous receive mode...\r\n");
 8002eb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002eb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eb8:	4941      	ldr	r1, [pc, #260]	@ (8002fc0 <_ZN7VCPMenu10cmdReceiveEiPPc+0x164>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	f7ff fe8c 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    printf("Press any key to stop\r\n");
 8002ec0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ec4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ec8:	493e      	ldr	r1, [pc, #248]	@ (8002fc4 <_ZN7VCPMenu10cmdReceiveEiPPc+0x168>)
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	f7ff fe84 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    
    // Start continuous receive mode
    radio->startContinuousReceive();
 8002ed0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002ed4:	f7ff fadf 	bl	8002496 <_ZN5Radio22startContinuousReceiveEv>
    
    // Turn on RX LED for visual feedback
    m_globals->setRxLED(1);
 8002ed8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002edc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fb36 	bl	8003558 <_ZN7Globals8setRxLEDEh>
    
    // Receive buffer
    char rxBuffer[VCP_RX_BUFFER_SIZE];
    
    // Receive loop
    bool receiving = true;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    while (receiving) {
 8002ef2:	e036      	b.n	8002f62 <_ZN7VCPMenu10cmdReceiveEiPPc+0x106>
        // Check for received data
        size_t rxLen = radio->receive(rxBuffer, sizeof(rxBuffer) - 1);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	22ff      	movs	r2, #255	@ 0xff
 8002efa:	4619      	mov	r1, r3
 8002efc:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002f00:	f7ff faab 	bl	800245a <_ZN5Radio7receiveEPcj>
 8002f04:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
        
        if (rxLen > 0) {
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d012      	beq.n	8002f36 <_ZN7VCPMenu10cmdReceiveEiPPc+0xda>
            // Null-terminate received data
            rxBuffer[rxLen] = '\0';
 8002f10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f14:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	4413      	add	r3, r2
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
            
            // Display received data
            printf("Received: %s\r\n", rxBuffer);
 8002f22:	f107 0214 	add.w	r2, r7, #20
 8002f26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f2e:	4926      	ldr	r1, [pc, #152]	@ (8002fc8 <_ZN7VCPMenu10cmdReceiveEiPPc+0x16c>)
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	f7ff fe51 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        }
        
        // Check if user pressed a key to stop
        if (m_rxBufferTail != m_rxBufferHead) {
 8002f36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002f44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d002      	beq.n	8002f5c <_ZN7VCPMenu10cmdReceiveEiPPc+0x100>
            receiving = false;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        }
        
        // Give other tasks a chance to run
        HAL_Delay(10);
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	f001 fa21 	bl	80043a4 <HAL_Delay>
    while (receiving) {
 8002f62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1c4      	bne.n	8002ef4 <_ZN7VCPMenu10cmdReceiveEiPPc+0x98>
    }
    
    // Stop continuous receive mode
    radio->stopContinuousReceive();
 8002f6a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002f6e:	f7ff fab0 	bl	80024d2 <_ZN5Radio21stopContinuousReceiveEv>
    
    // Turn off RX LED
    m_globals->setRxLED(0);
 8002f72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f76:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fae9 	bl	8003558 <_ZN7Globals8setRxLEDEh>
    
    printf("Receive mode stopped\r\n");
 8002f86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f8e:	490f      	ldr	r1, [pc, #60]	@ (8002fcc <_ZN7VCPMenu10cmdReceiveEiPPc+0x170>)
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	f7ff fe21 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    
    // Clear any pending input
    m_rxBufferHead = m_rxBufferTail;
 8002f96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002fa4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fa8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
}
 8002fb2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	08014da8 	.word	0x08014da8
 8002fc0:	08014e78 	.word	0x08014e78
 8002fc4:	08014ea0 	.word	0x08014ea0
 8002fc8:	08014eb8 	.word	0x08014eb8
 8002fcc:	08014ec8 	.word	0x08014ec8

08002fd0 <_ZN7VCPMenu10cmdSetFreqEiPPc>:

/**
 * @brief Command handler: set frequency
 */
void VCPMenu::cmdSetFreq(int argc, char* argv[]) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
    Radio* radio = m_globals->getRadio();
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fb1e 	bl	8002622 <_ZN7Globals8getRadioEv>
 8002fe6:	6138      	str	r0, [r7, #16]
    if (radio == nullptr) {
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <_ZN7VCPMenu10cmdSetFreqEiPPc+0x28>
        printf("Radio not initialized\r\n");
 8002fee:	4924      	ldr	r1, [pc, #144]	@ (8003080 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xb0>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff fdf1 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        return;
 8002ff6:	e03c      	b.n	8003072 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xa2>
    }
    
    if (argc < 2) {
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	dc04      	bgt.n	8003008 <_ZN7VCPMenu10cmdSetFreqEiPPc+0x38>
        printf("Usage: freq <frequency>\r\n");
 8002ffe:	4921      	ldr	r1, [pc, #132]	@ (8003084 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xb4>)
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff fde9 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        return;
 8003006:	e034      	b.n	8003072 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xa2>
    }
    
    // Parse frequency
    float freq = strtof(argv[1], nullptr);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f00f fc0d 	bl	8012830 <strtof>
 8003016:	ed87 0a05 	vstr	s0, [r7, #20]
    
    if (freq < 1e6) {
 800301a:	edd7 7a05 	vldr	s15, [r7, #20]
 800301e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003088 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xb8>
 8003022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d507      	bpl.n	800303c <_ZN7VCPMenu10cmdSetFreqEiPPc+0x6c>
        // Assume MHz if value is small
        freq *= 1e6;
 800302c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003030:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003088 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xb8>
 8003034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003038:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    // Set frequency
    if (radio->setFrequency(freq)) {
 800303c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003040:	6938      	ldr	r0, [r7, #16]
 8003042:	f7ff fa63 	bl	800250c <_ZN5Radio12setFrequencyEf>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <_ZN7VCPMenu10cmdSetFreqEiPPc+0x9a>
        printf("Frequency set to %.3f MHz\r\n", freq / 1e6);
 800304c:	6978      	ldr	r0, [r7, #20]
 800304e:	f7fd fa93 	bl	8000578 <__aeabi_f2d>
 8003052:	a309      	add	r3, pc, #36	@ (adr r3, 8003078 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xa8>)
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f7fd fc10 	bl	800087c <__aeabi_ddiv>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	490a      	ldr	r1, [pc, #40]	@ (800308c <_ZN7VCPMenu10cmdSetFreqEiPPc+0xbc>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fdb8 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
 8003068:	e003      	b.n	8003072 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xa2>
    } else {
        printf("Failed to set frequency\r\n");
 800306a:	4909      	ldr	r1, [pc, #36]	@ (8003090 <_ZN7VCPMenu10cmdSetFreqEiPPc+0xc0>)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fdb3 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    }
}
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	00000000 	.word	0x00000000
 800307c:	412e8480 	.word	0x412e8480
 8003080:	08014da8 	.word	0x08014da8
 8003084:	08014ee0 	.word	0x08014ee0
 8003088:	49742400 	.word	0x49742400
 800308c:	08014efc 	.word	0x08014efc
 8003090:	08014f18 	.word	0x08014f18

08003094 <_ZN7VCPMenu10cmdSetRateEiPPc>:

/**
 * @brief Command handler: set symbol rate
 */
void VCPMenu::cmdSetRate(int argc, char* argv[]) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
    Radio* radio = m_globals->getRadio();
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fabc 	bl	8002622 <_ZN7Globals8getRadioEv>
 80030aa:	6138      	str	r0, [r7, #16]
    if (radio == nullptr) {
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <_ZN7VCPMenu10cmdSetRateEiPPc+0x28>
        printf("Radio not initialized\r\n");
 80030b2:	4922      	ldr	r1, [pc, #136]	@ (800313c <_ZN7VCPMenu10cmdSetRateEiPPc+0xa8>)
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fd8f 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        return;
 80030ba:	e03c      	b.n	8003136 <_ZN7VCPMenu10cmdSetRateEiPPc+0xa2>
    }
    
    if (argc < 2) {
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	dc04      	bgt.n	80030cc <_ZN7VCPMenu10cmdSetRateEiPPc+0x38>
        printf("Usage: rate <symbol_rate>\r\n");
 80030c2:	491f      	ldr	r1, [pc, #124]	@ (8003140 <_ZN7VCPMenu10cmdSetRateEiPPc+0xac>)
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fd87 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
        return;
 80030ca:	e034      	b.n	8003136 <_ZN7VCPMenu10cmdSetRateEiPPc+0xa2>
    }
    
    // Parse symbol rate
    float rate = strtof(argv[1], nullptr);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f00f fbab 	bl	8012830 <strtof>
 80030da:	ed87 0a05 	vstr	s0, [r7, #20]
    
    if (rate < 1e3) {
 80030de:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003144 <_ZN7VCPMenu10cmdSetRateEiPPc+0xb0>
 80030e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ee:	d507      	bpl.n	8003100 <_ZN7VCPMenu10cmdSetRateEiPPc+0x6c>
        // Assume kBaud if value is small
        rate *= 1e3;
 80030f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003144 <_ZN7VCPMenu10cmdSetRateEiPPc+0xb0>
 80030f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fc:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    // Set symbol rate
    if (radio->setSymbolRate(rate)) {
 8003100:	ed97 0a05 	vldr	s0, [r7, #20]
 8003104:	6938      	ldr	r0, [r7, #16]
 8003106:	f7ff fa61 	bl	80025cc <_ZN5Radio13setSymbolRateEf>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <_ZN7VCPMenu10cmdSetRateEiPPc+0x9a>
        printf("Symbol rate set to %.3f kBaud\r\n", rate / 1e3);
 8003110:	6978      	ldr	r0, [r7, #20]
 8003112:	f7fd fa31 	bl	8000578 <__aeabi_f2d>
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	4b0b      	ldr	r3, [pc, #44]	@ (8003148 <_ZN7VCPMenu10cmdSetRateEiPPc+0xb4>)
 800311c:	f7fd fbae 	bl	800087c <__aeabi_ddiv>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4909      	ldr	r1, [pc, #36]	@ (800314c <_ZN7VCPMenu10cmdSetRateEiPPc+0xb8>)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fd56 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
 800312c:	e003      	b.n	8003136 <_ZN7VCPMenu10cmdSetRateEiPPc+0xa2>
    } else {
        printf("Failed to set symbol rate\r\n");
 800312e:	4908      	ldr	r1, [pc, #32]	@ (8003150 <_ZN7VCPMenu10cmdSetRateEiPPc+0xbc>)
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fd51 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    }
}
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	08014da8 	.word	0x08014da8
 8003140:	08014f34 	.word	0x08014f34
 8003144:	447a0000 	.word	0x447a0000
 8003148:	408f4000 	.word	0x408f4000
 800314c:	08014f50 	.word	0x08014f50
 8003150:	08014f70 	.word	0x08014f70

08003154 <_ZN7VCPMenu8cmdResetEiPPc>:

/**
 * @brief Command handler: reset
 */
void VCPMenu::cmdReset(int argc, char* argv[]) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
    printf("Resetting radio...\r\n");
 8003160:	490e      	ldr	r1, [pc, #56]	@ (800319c <_ZN7VCPMenu8cmdResetEiPPc+0x48>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff fd38 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    
    // Reset the radio
    m_globals->resetCC1200();
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fa23 	bl	80035b8 <_ZN7Globals11resetCC1200Ev>
    
    // Re-initialize the radio
    if (m_globals->initRadio()) {
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f9a0 	bl	80034bc <_ZN7Globals9initRadioEv>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <_ZN7VCPMenu8cmdResetEiPPc+0x38>
        printf("Radio reset and initialized successfully\r\n");
 8003182:	4907      	ldr	r1, [pc, #28]	@ (80031a0 <_ZN7VCPMenu8cmdResetEiPPc+0x4c>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff fd27 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
    } else {
        printf("Failed to initialize radio after reset\r\n");
    }
}
 800318a:	e003      	b.n	8003194 <_ZN7VCPMenu8cmdResetEiPPc+0x40>
        printf("Failed to initialize radio after reset\r\n");
 800318c:	4905      	ldr	r1, [pc, #20]	@ (80031a4 <_ZN7VCPMenu8cmdResetEiPPc+0x50>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff fd22 	bl	8002bd8 <_ZN7VCPMenu6printfEPKcz>
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	08014f8c 	.word	0x08014f8c
 80031a0:	08014fa4 	.word	0x08014fa4
 80031a4:	08014fd0 	.word	0x08014fd0

080031a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <MX_DMA_Init+0x6c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <MX_DMA_Init+0x6c>)
 80031b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031be:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <MX_DMA_Init+0x6c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2105      	movs	r1, #5
 80031ce:	2038      	movs	r0, #56	@ 0x38
 80031d0:	f001 f9da 	bl	8004588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031d4:	2038      	movs	r0, #56	@ 0x38
 80031d6:	f001 fa03 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2105      	movs	r1, #5
 80031de:	203a      	movs	r0, #58	@ 0x3a
 80031e0:	f001 f9d2 	bl	8004588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80031e4:	203a      	movs	r0, #58	@ 0x3a
 80031e6:	f001 f9fb 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2105      	movs	r1, #5
 80031ee:	2044      	movs	r0, #68	@ 0x44
 80031f0:	f001 f9ca 	bl	8004588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80031f4:	2044      	movs	r0, #68	@ 0x44
 80031f6:	f001 f9f3 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2105      	movs	r1, #5
 80031fe:	2046      	movs	r0, #70	@ 0x46
 8003200:	f001 f9c2 	bl	8004588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003204:	2046      	movs	r0, #70	@ 0x46
 8003206:	f001 f9eb 	bl	80045e0 <HAL_NVIC_EnableIRQ>

}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800

08003218 <_Z16MX_FREERTOS_InitP7Globals>:
/**
  * @brief  FreeRTOS initialization
  * @param  globals: Pointer to the globals object
  * @retval None
  */
void MX_FREERTOS_Init(Globals* globals) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  // Store the globals pointer for use in this file
  g_globals = globals;
 8003220:	4a31      	ldr	r2, [pc, #196]	@ (80032e8 <_Z16MX_FREERTOS_InitP7Globals+0xd0>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8003226:	4831      	ldr	r0, [pc, #196]	@ (80032ec <_Z16MX_FREERTOS_InitP7Globals+0xd4>)
 8003228:	f009 fe9a 	bl	800cf60 <osMutexNew>
 800322c:	4603      	mov	r3, r0
 800322e:	4a30      	ldr	r2, [pc, #192]	@ (80032f0 <_Z16MX_FREERTOS_InitP7Globals+0xd8>)
 8003230:	6013      	str	r3, [r2, #0]

  /* creation of myMutex02 */
  myMutex02Handle = osMutexNew(&myMutex02_attributes);
 8003232:	4830      	ldr	r0, [pc, #192]	@ (80032f4 <_Z16MX_FREERTOS_InitP7Globals+0xdc>)
 8003234:	f009 fe94 	bl	800cf60 <osMutexNew>
 8003238:	4603      	mov	r3, r0
 800323a:	4a2f      	ldr	r2, [pc, #188]	@ (80032f8 <_Z16MX_FREERTOS_InitP7Globals+0xe0>)
 800323c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 800323e:	4a2f      	ldr	r2, [pc, #188]	@ (80032fc <_Z16MX_FREERTOS_InitP7Globals+0xe4>)
 8003240:	2100      	movs	r1, #0
 8003242:	2001      	movs	r0, #1
 8003244:	f009 ff12 	bl	800d06c <osSemaphoreNew>
 8003248:	4603      	mov	r3, r0
 800324a:	4a2d      	ldr	r2, [pc, #180]	@ (8003300 <_Z16MX_FREERTOS_InitP7Globals+0xe8>)
 800324c:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 800324e:	4a2d      	ldr	r2, [pc, #180]	@ (8003304 <_Z16MX_FREERTOS_InitP7Globals+0xec>)
 8003250:	2102      	movs	r1, #2
 8003252:	2002      	movs	r0, #2
 8003254:	f009 ff0a 	bl	800d06c <osSemaphoreNew>
 8003258:	4603      	mov	r3, r0
 800325a:	4a2b      	ldr	r2, [pc, #172]	@ (8003308 <_Z16MX_FREERTOS_InitP7Globals+0xf0>)
 800325c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 800325e:	4b2b      	ldr	r3, [pc, #172]	@ (800330c <_Z16MX_FREERTOS_InitP7Globals+0xf4>)
 8003260:	2200      	movs	r2, #0
 8003262:	2101      	movs	r1, #1
 8003264:	482a      	ldr	r0, [pc, #168]	@ (8003310 <_Z16MX_FREERTOS_InitP7Globals+0xf8>)
 8003266:	f009 fdff 	bl	800ce68 <osTimerNew>
 800326a:	4603      	mov	r3, r0
 800326c:	4a29      	ldr	r2, [pc, #164]	@ (8003314 <_Z16MX_FREERTOS_InitP7Globals+0xfc>)
 800326e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8003270:	4a29      	ldr	r2, [pc, #164]	@ (8003318 <_Z16MX_FREERTOS_InitP7Globals+0x100>)
 8003272:	2102      	movs	r1, #2
 8003274:	2010      	movs	r0, #16
 8003276:	f009 ff82 	bl	800d17e <osMessageQueueNew>
 800327a:	4603      	mov	r3, r0
 800327c:	4a27      	ldr	r2, [pc, #156]	@ (800331c <_Z16MX_FREERTOS_InitP7Globals+0x104>)
 800327e:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 8003280:	4a27      	ldr	r2, [pc, #156]	@ (8003320 <_Z16MX_FREERTOS_InitP7Globals+0x108>)
 8003282:	2102      	movs	r1, #2
 8003284:	2010      	movs	r0, #16
 8003286:	f009 ff7a 	bl	800d17e <osMessageQueueNew>
 800328a:	4603      	mov	r3, r0
 800328c:	4a25      	ldr	r2, [pc, #148]	@ (8003324 <_Z16MX_FREERTOS_InitP7Globals+0x10c>)
 800328e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew((osThreadFunc_t)StartDefaultTask, g_globals, &defaultTask_attributes);
 8003290:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <_Z16MX_FREERTOS_InitP7Globals+0xd0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a24      	ldr	r2, [pc, #144]	@ (8003328 <_Z16MX_FREERTOS_InitP7Globals+0x110>)
 8003296:	4619      	mov	r1, r3
 8003298:	4824      	ldr	r0, [pc, #144]	@ (800332c <_Z16MX_FREERTOS_InitP7Globals+0x114>)
 800329a:	f009 fd22 	bl	800cce2 <osThreadNew>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <_Z16MX_FREERTOS_InitP7Globals+0x118>)
 80032a2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew((osThreadFunc_t)StartTask02, g_globals, &myTask02_attributes);
 80032a4:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <_Z16MX_FREERTOS_InitP7Globals+0xd0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a22      	ldr	r2, [pc, #136]	@ (8003334 <_Z16MX_FREERTOS_InitP7Globals+0x11c>)
 80032aa:	4619      	mov	r1, r3
 80032ac:	4822      	ldr	r0, [pc, #136]	@ (8003338 <_Z16MX_FREERTOS_InitP7Globals+0x120>)
 80032ae:	f009 fd18 	bl	800cce2 <osThreadNew>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4a21      	ldr	r2, [pc, #132]	@ (800333c <_Z16MX_FREERTOS_InitP7Globals+0x124>)
 80032b6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew((osThreadFunc_t)StartTask03, g_globals, &myTask03_attributes);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <_Z16MX_FREERTOS_InitP7Globals+0xd0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a20      	ldr	r2, [pc, #128]	@ (8003340 <_Z16MX_FREERTOS_InitP7Globals+0x128>)
 80032be:	4619      	mov	r1, r3
 80032c0:	4820      	ldr	r0, [pc, #128]	@ (8003344 <_Z16MX_FREERTOS_InitP7Globals+0x12c>)
 80032c2:	f009 fd0e 	bl	800cce2 <osThreadNew>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <_Z16MX_FREERTOS_InitP7Globals+0x130>)
 80032ca:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew((osThreadFunc_t)StartTask04, g_globals, &myTask04_attributes);
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <_Z16MX_FREERTOS_InitP7Globals+0xd0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <_Z16MX_FREERTOS_InitP7Globals+0x134>)
 80032d2:	4619      	mov	r1, r3
 80032d4:	481e      	ldr	r0, [pc, #120]	@ (8003350 <_Z16MX_FREERTOS_InitP7Globals+0x138>)
 80032d6:	f009 fd04 	bl	800cce2 <osThreadNew>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <_Z16MX_FREERTOS_InitP7Globals+0x13c>)
 80032de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	200002e8 	.word	0x200002e8
 80032ec:	080153c0 	.word	0x080153c0
 80032f0:	2000030c 	.word	0x2000030c
 80032f4:	080153d0 	.word	0x080153d0
 80032f8:	20000310 	.word	0x20000310
 80032fc:	080153e0 	.word	0x080153e0
 8003300:	20000314 	.word	0x20000314
 8003304:	080153f0 	.word	0x080153f0
 8003308:	20000318 	.word	0x20000318
 800330c:	080153b0 	.word	0x080153b0
 8003310:	08003475 	.word	0x08003475
 8003314:	20000308 	.word	0x20000308
 8003318:	08015380 	.word	0x08015380
 800331c:	20000300 	.word	0x20000300
 8003320:	08015398 	.word	0x08015398
 8003324:	20000304 	.word	0x20000304
 8003328:	080152f0 	.word	0x080152f0
 800332c:	08003359 	.word	0x08003359
 8003330:	200002f0 	.word	0x200002f0
 8003334:	08015314 	.word	0x08015314
 8003338:	0800342d 	.word	0x0800342d
 800333c:	200002f4 	.word	0x200002f4
 8003340:	08015338 	.word	0x08015338
 8003344:	08003445 	.word	0x08003445
 8003348:	200002f8 	.word	0x200002f8
 800334c:	0801535c 	.word	0x0801535c
 8003350:	0800345d 	.word	0x0800345d
 8003354:	200002fc 	.word	0x200002fc

08003358 <_Z16StartDefaultTaskP7Globals>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(Globals* globals)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003360:	f00c fe4a 	bl	800fff8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // Initialize the Radio
  if (!globals->initRadio()) {
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f8a9 	bl	80034bc <_ZN7Globals9initRadioEv>
 800336a:	4603      	mov	r3, r0
 800336c:	f083 0301 	eor.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d016      	beq.n	80033a4 <_Z16StartDefaultTaskP7Globals+0x4c>
    // Radio initialization failed
    // Flash service LED rapidly to indicate error
    for (int i = 0; i < 10; i++) {
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e010      	b.n	800339e <_Z16StartDefaultTaskP7Globals+0x46>
      globals->setServiceLED(1);
 800337c:	2101      	movs	r1, #1
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8d2 	bl	8003528 <_ZN7Globals13setServiceLEDEh>
      osDelay(100);
 8003384:	2064      	movs	r0, #100	@ 0x64
 8003386:	f009 fd3e 	bl	800ce06 <osDelay>
      globals->setServiceLED(0);
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f8cb 	bl	8003528 <_ZN7Globals13setServiceLEDEh>
      osDelay(100);
 8003392:	2064      	movs	r0, #100	@ 0x64
 8003394:	f009 fd37 	bl	800ce06 <osDelay>
    for (int i = 0; i < 10; i++) {
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b09      	cmp	r3, #9
 80033a2:	ddeb      	ble.n	800337c <_Z16StartDefaultTaskP7Globals+0x24>
    }
  }
  
  // Create and initialize VCP Menu
  g_vcpMenu = new VCPMenu(globals);
 80033a4:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80033a8:	f00d fb2c 	bl	8010a04 <_Znwj>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461c      	mov	r4, r3
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7ff f958 	bl	8002668 <_ZN7VCPMenuC1EP7Globals>
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <_Z16StartDefaultTaskP7Globals+0xc8>)
 80033ba:	601c      	str	r4, [r3, #0]
  g_vcpMenu->init();
 80033bc:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <_Z16StartDefaultTaskP7Globals+0xc8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f971 	bl	80026a8 <_ZN7VCPMenu4initEv>
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f009 fd1d 	bl	800ce06 <osDelay>
    
    // Process VCP Menu commands
    g_vcpMenu->processCommands();
 80033cc:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <_Z16StartDefaultTaskP7Globals+0xc8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f9c3 	bl	800275c <_ZN7VCPMenu15processCommandsEv>
    
    // Toggle service LED every second to indicate system is running
    static uint32_t lastToggle = 0;
    if (osKernelGetTickCount() - lastToggle > 1000) {
 80033d6:	f009 fc6f 	bl	800ccb8 <osKernelGetTickCount>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <_Z16StartDefaultTaskP7Globals+0xcc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033e6:	bf8c      	ite	hi
 80033e8:	2301      	movhi	r3, #1
 80033ea:	2300      	movls	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0e9      	beq.n	80033c6 <_Z16StartDefaultTaskP7Globals+0x6e>
      static uint8_t ledState = 0;
      globals->setServiceLED(ledState);
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <_Z16StartDefaultTaskP7Globals+0xd0>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f895 	bl	8003528 <_ZN7Globals13setServiceLEDEh>
      ledState = !ledState;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <_Z16StartDefaultTaskP7Globals+0xd0>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <_Z16StartDefaultTaskP7Globals+0xd0>)
 8003410:	701a      	strb	r2, [r3, #0]
      lastToggle = osKernelGetTickCount();
 8003412:	f009 fc51 	bl	800ccb8 <osKernelGetTickCount>
 8003416:	4603      	mov	r3, r0
 8003418:	4a02      	ldr	r2, [pc, #8]	@ (8003424 <_Z16StartDefaultTaskP7Globals+0xcc>)
 800341a:	6013      	str	r3, [r2, #0]
    }
  }
 800341c:	e7d3      	b.n	80033c6 <_Z16StartDefaultTaskP7Globals+0x6e>
 800341e:	bf00      	nop
 8003420:	200002ec 	.word	0x200002ec
 8003424:	2000031c 	.word	0x2000031c
 8003428:	20000320 	.word	0x20000320

0800342c <_Z11StartTask02P7Globals>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(Globals* globals)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003434:	2001      	movs	r0, #1
 8003436:	f009 fce6 	bl	800ce06 <osDelay>
    globals->refreshWatchdog(); // Use the globals object to refresh the watchdog
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f866 	bl	800350c <_ZN7Globals15refreshWatchdogEv>
    osDelay(1);
 8003440:	bf00      	nop
 8003442:	e7f7      	b.n	8003434 <_Z11StartTask02P7Globals+0x8>

08003444 <_Z11StartTask03P7Globals>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(Globals* globals)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  // This task handles radio transmission
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(10); // 10ms delay
 800344c:	200a      	movs	r0, #10
 800344e:	f009 fcda 	bl	800ce06 <osDelay>
    
    // Get the Radio instance
    Radio* radio = globals->getRadio();
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff f8e5 	bl	8002622 <_ZN7Globals8getRadioEv>
 8003458:	60f8      	str	r0, [r7, #12]
      // For now, this is handled by the VCP Menu commands
      
      // Update TX LED based on radio state
      // This will be handled by the VCP Menu for now
    }
  }
 800345a:	e7f7      	b.n	800344c <_Z11StartTask03P7Globals+0x8>

0800345c <_Z11StartTask04P7Globals>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(Globals* globals)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  // This task handles radio reception
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(10); // 10ms delay
 8003464:	200a      	movs	r0, #10
 8003466:	f009 fcce 	bl	800ce06 <osDelay>
    
    // Get the Radio instance
    Radio* radio = globals->getRadio();
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff f8d9 	bl	8002622 <_ZN7Globals8getRadioEv>
 8003470:	60f8      	str	r0, [r7, #12]
      // For now, this is handled by the VCP Menu commands
      
      // Update RX LED based on radio state
      // This will be handled by the VCP Menu for now
    }
  }
 8003472:	e7f7      	b.n	8003464 <_Z11StartTask04P7Globals+0x8>

08003474 <_Z10Callback01Pv>:
  /* USER CODE END StartTask04 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <_ZN7GlobalsC1EP20__UART_HandleTypeDefP18IWDG_HandleTypeDefP19__SPI_HandleTypeDef>:
  * @param  uart: Pointer to UART handle
  * @param  iwdg: Pointer to IWDG handle
  * @param  spi: Pointer to SPI handle
  * @retval None
  */
Globals::Globals(UART_HandleTypeDef* uart, IWDG_HandleTypeDef* iwdg, SPI_HandleTypeDef* spi)
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
    : m_uart(uart), m_iwdg(iwdg), m_spi(spi), m_radio(nullptr) {
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	60da      	str	r2, [r3, #12]
    // Store the peripheral handles provided
}
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_ZN7Globals9initRadioEv>:

/**
  * @brief  Initialize the Radio
  * @retval true if initialization was successful
  */
bool Globals::initRadio() {
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b085      	sub	sp, #20
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	6078      	str	r0, [r7, #4]
    // Create the Radio instance if it doesn't exist
    if (m_radio == nullptr) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d111      	bne.n	80034f0 <_ZN7Globals9initRadioEv+0x34>
        // Initialize Radio with the appropriate GPIO pins and SPI
        m_radio = new Radio(m_spi, 
                           GPIOA, GPIO_PIN_4, // CS pin (SPI1_NSS)
                           _CC_RST_GPIO_Port, _CC_RST_Pin); // Reset pin
 80034cc:	2034      	movs	r0, #52	@ 0x34
 80034ce:	f00d fa99 	bl	8010a04 <_Znwj>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461c      	mov	r4, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6899      	ldr	r1, [r3, #8]
 80034da:	2301      	movs	r3, #1
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <_ZN7Globals9initRadioEv+0x48>)
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2310      	movs	r3, #16
 80034e4:	4a08      	ldr	r2, [pc, #32]	@ (8003508 <_ZN7Globals9initRadioEv+0x4c>)
 80034e6:	4620      	mov	r0, r4
 80034e8:	f7fe fe7a 	bl	80021e0 <_ZN5RadioC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
        m_radio = new Radio(m_spi, 
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60dc      	str	r4, [r3, #12]
    }
    
    // Initialize the radio
    return m_radio->init();
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fe9b 	bl	8002230 <_ZN5Radio4initEv>
 80034fa:	4603      	mov	r3, r0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}
 8003504:	40020400 	.word	0x40020400
 8003508:	40020000 	.word	0x40020000

0800350c <_ZN7Globals15refreshWatchdogEv>:

/**
  * @brief  Refresh the watchdog
  * @retval None
  */
void Globals::refreshWatchdog() {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    HAL_IWDG_Refresh(m_iwdg);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	f002 f89d 	bl	8005658 <HAL_IWDG_Refresh>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <_ZN7Globals13setServiceLEDEh>:
/**
  * @brief  Set the service LED state
  * @param  state: LED state (0 = off, 1 = on)
  * @retval None
  */
void Globals::setServiceLED(uint8_t state) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SVC_LED_GPIO_Port, SVC_LED_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <_ZN7Globals13setServiceLEDEh+0x16>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <_ZN7Globals13setServiceLEDEh+0x18>
 800353e:	2300      	movs	r3, #0
 8003540:	461a      	mov	r2, r3
 8003542:	2108      	movs	r1, #8
 8003544:	4803      	ldr	r0, [pc, #12]	@ (8003554 <_ZN7Globals13setServiceLEDEh+0x2c>)
 8003546:	f001 ffe3 	bl	8005510 <HAL_GPIO_WritePin>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40020400 	.word	0x40020400

08003558 <_ZN7Globals8setRxLEDEh>:
/**
  * @brief  Set the RX LED state
  * @param  state: LED state (0 = off, 1 = on)
  * @retval None
  */
void Globals::setRxLED(uint8_t state) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <_ZN7Globals8setRxLEDEh+0x16>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <_ZN7Globals8setRxLEDEh+0x18>
 800356e:	2300      	movs	r3, #0
 8003570:	461a      	mov	r2, r3
 8003572:	2110      	movs	r1, #16
 8003574:	4803      	ldr	r0, [pc, #12]	@ (8003584 <_ZN7Globals8setRxLEDEh+0x2c>)
 8003576:	f001 ffcb 	bl	8005510 <HAL_GPIO_WritePin>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40020400 	.word	0x40020400

08003588 <_ZN7Globals8setTxLEDEh>:
/**
  * @brief  Set the TX LED state
  * @param  state: LED state (0 = off, 1 = on)
  * @retval None
  */
void Globals::setTxLED(uint8_t state) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <_ZN7Globals8setTxLEDEh+0x16>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <_ZN7Globals8setTxLEDEh+0x18>
 800359e:	2300      	movs	r3, #0
 80035a0:	461a      	mov	r2, r3
 80035a2:	2120      	movs	r1, #32
 80035a4:	4803      	ldr	r0, [pc, #12]	@ (80035b4 <_ZN7Globals8setTxLEDEh+0x2c>)
 80035a6:	f001 ffb3 	bl	8005510 <HAL_GPIO_WritePin>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40020400 	.word	0x40020400

080035b8 <_ZN7Globals11resetCC1200Ev>:

/**
  * @brief  Reset the CC1200 radio
  * @retval None
  */
void Globals::resetCC1200() {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CC_RST_GPIO_Port, _CC_RST_Pin, GPIO_PIN_RESET);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2101      	movs	r1, #1
 80035c4:	4807      	ldr	r0, [pc, #28]	@ (80035e4 <_ZN7Globals11resetCC1200Ev+0x2c>)
 80035c6:	f001 ffa3 	bl	8005510 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Short delay for reset pulse
 80035ca:	2001      	movs	r0, #1
 80035cc:	f000 feea 	bl	80043a4 <HAL_Delay>
    HAL_GPIO_WritePin(_CC_RST_GPIO_Port, _CC_RST_Pin, GPIO_PIN_SET);
 80035d0:	2201      	movs	r2, #1
 80035d2:	2101      	movs	r1, #1
 80035d4:	4803      	ldr	r0, [pc, #12]	@ (80035e4 <_ZN7Globals11resetCC1200Ev+0x2c>)
 80035d6:	f001 ff9b 	bl	8005510 <HAL_GPIO_WritePin>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40020400 	.word	0x40020400

080035e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	4a40      	ldr	r2, [pc, #256]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6313      	str	r3, [r2, #48]	@ 0x30
 800360e:	4b3e      	ldr	r3, [pc, #248]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b3a      	ldr	r3, [pc, #232]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	4a39      	ldr	r2, [pc, #228]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003628:	6313      	str	r3, [r2, #48]	@ 0x30
 800362a:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <MX_GPIO_Init+0x120>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b33      	ldr	r3, [pc, #204]	@ (8003708 <MX_GPIO_Init+0x120>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	4a32      	ldr	r2, [pc, #200]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	6313      	str	r3, [r2, #48]	@ 0x30
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	4b2c      	ldr	r3, [pc, #176]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a2b      	ldr	r2, [pc, #172]	@ (8003708 <MX_GPIO_Init+0x120>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b29      	ldr	r3, [pc, #164]	@ (8003708 <MX_GPIO_Init+0x120>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _CC_RST_Pin|SVC_LED_Pin|RX_LED_Pin|TX_LED_Pin, GPIO_PIN_RESET);
 800366e:	2200      	movs	r2, #0
 8003670:	2139      	movs	r1, #57	@ 0x39
 8003672:	4826      	ldr	r0, [pc, #152]	@ (800370c <MX_GPIO_Init+0x124>)
 8003674:	f001 ff4c 	bl	8005510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003678:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800367c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800367e:	2303      	movs	r3, #3
 8003680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	4619      	mov	r1, r3
 800368c:	4820      	ldr	r0, [pc, #128]	@ (8003710 <MX_GPIO_Init+0x128>)
 800368e:	f001 fca7 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003692:	f248 130f 	movw	r3, #33039	@ 0x810f
 8003696:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003698:	2303      	movs	r3, #3
 800369a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4619      	mov	r1, r3
 80036a6:	481b      	ldr	r0, [pc, #108]	@ (8003714 <MX_GPIO_Init+0x12c>)
 80036a8:	f001 fc9a 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = _CC_RST_Pin|SVC_LED_Pin|RX_LED_Pin|TX_LED_Pin;
 80036ac:	2339      	movs	r3, #57	@ 0x39
 80036ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b0:	2301      	movs	r3, #1
 80036b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	4619      	mov	r1, r3
 80036c2:	4812      	ldr	r0, [pc, #72]	@ (800370c <MX_GPIO_Init+0x124>)
 80036c4:	f001 fc8c 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB15
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_15
 80036c8:	f248 73c6 	movw	r3, #34758	@ 0x87c6
 80036cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ce:	2303      	movs	r3, #3
 80036d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4619      	mov	r1, r3
 80036dc:	480b      	ldr	r0, [pc, #44]	@ (800370c <MX_GPIO_Init+0x124>)
 80036de:	f001 fc7f 	bl	8004fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CC_GPIO0_Pin|CC_GPIO2_Pin|CC_GPIO3_Pin;
 80036e2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80036e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4619      	mov	r1, r3
 80036f8:	4804      	ldr	r0, [pc, #16]	@ (800370c <MX_GPIO_Init+0x124>)
 80036fa:	f001 fc71 	bl	8004fe0 <HAL_GPIO_Init>

}
 80036fe:	bf00      	nop
 8003700:	3728      	adds	r7, #40	@ 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40020400 	.word	0x40020400
 8003710:	40020800 	.word	0x40020800
 8003714:	40020000 	.word	0x40020000

08003718 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800371c:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <MX_IWDG_Init+0x2c>)
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <MX_IWDG_Init+0x30>)
 8003720:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <MX_IWDG_Init+0x2c>)
 8003724:	2204      	movs	r2, #4
 8003726:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <MX_IWDG_Init+0x2c>)
 800372a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800372e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003730:	4804      	ldr	r0, [pc, #16]	@ (8003744 <MX_IWDG_Init+0x2c>)
 8003732:	f001 ff19 	bl	8005568 <HAL_IWDG_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800373c:	f000 f8c0 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000324 	.word	0x20000324
 8003748:	40003000 	.word	0x40003000

0800374c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800374c:	b598      	push	{r3, r4, r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003750:	f000 fde6 	bl	8004320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003754:	f000 f82e 	bl	80037b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003758:	f7ff ff46 	bl	80035e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800375c:	f7ff fd24 	bl	80031a8 <MX_DMA_Init>
  MX_IWDG_Init();
 8003760:	f7ff ffda 	bl	8003718 <MX_IWDG_Init>
  MX_SPI1_Init();
 8003764:	f000 f8be 	bl	80038e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003768:	f000 fc00 	bl	8003f6c <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800376c:	f000 fb78 	bl	8003e60 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003770:	f000 fb9a 	bl	8003ea8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  // Create the globals instance with the initialized peripheral handles
  g_globals = new Globals(&huart1, &hiwdg, &hspi1);
 8003774:	2010      	movs	r0, #16
 8003776:	f00d f945 	bl	8010a04 <_Znwj>
 800377a:	4603      	mov	r3, r0
 800377c:	461c      	mov	r4, r3
 800377e:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <main+0x58>)
 8003780:	4a09      	ldr	r2, [pc, #36]	@ (80037a8 <main+0x5c>)
 8003782:	490a      	ldr	r1, [pc, #40]	@ (80037ac <main+0x60>)
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff fe7f 	bl	8003488 <_ZN7GlobalsC1EP20__UART_HandleTypeDefP18IWDG_HandleTypeDefP19__SPI_HandleTypeDef>
 800378a:	4b09      	ldr	r3, [pc, #36]	@ (80037b0 <main+0x64>)
 800378c:	601c      	str	r4, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800378e:	f009 fa49 	bl	800cc24 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init(g_globals);
 8003792:	4b07      	ldr	r3, [pc, #28]	@ (80037b0 <main+0x64>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fd3e 	bl	8003218 <_Z16MX_FREERTOS_InitP7Globals>

  /* Start scheduler */
  osKernelStart();
 800379c:	f009 fa66 	bl	800cc6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037a0:	bf00      	nop
 80037a2:	e7fd      	b.n	80037a0 <main+0x54>
 80037a4:	20000334 	.word	0x20000334
 80037a8:	20000324 	.word	0x20000324
 80037ac:	20000528 	.word	0x20000528
 80037b0:	20000330 	.word	0x20000330

080037b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b094      	sub	sp, #80	@ 0x50
 80037b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ba:	f107 0320 	add.w	r3, r7, #32
 80037be:	2230      	movs	r2, #48	@ 0x30
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f00f f8b6 	bl	8012934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003894 <SystemClock_Config+0xe0>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003894 <SystemClock_Config+0xe0>)
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003894 <SystemClock_Config+0xe0>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f4:	2300      	movs	r3, #0
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <SystemClock_Config+0xe4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <SystemClock_Config+0xe4>)
 80037fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <SystemClock_Config+0xe4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003810:	2309      	movs	r3, #9
 8003812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800381a:	2301      	movs	r3, #1
 800381c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800381e:	2302      	movs	r3, #2
 8003820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003828:	2319      	movs	r3, #25
 800382a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800382c:	23c0      	movs	r3, #192	@ 0xc0
 800382e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003830:	2302      	movs	r3, #2
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003834:	2304      	movs	r3, #4
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003838:	f107 0320 	add.w	r3, r7, #32
 800383c:	4618      	mov	r0, r3
 800383e:	f003 f979 	bl	8006b34 <HAL_RCC_OscConfig>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003852:	f000 f835 	bl	80038c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003856:	230f      	movs	r3, #15
 8003858:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800385a:	2302      	movs	r3, #2
 800385c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	2103      	movs	r1, #3
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fc8a 	bl	800718c <HAL_RCC_ClockConfig>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8003888:	f000 f81a 	bl	80038c0 <Error_Handler>
  }
}
 800388c:	bf00      	nop
 800388e:	3750      	adds	r7, #80	@ 0x50
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000

0800389c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a04      	ldr	r2, [pc, #16]	@ (80038bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038ae:	f000 fd59 	bl	8004364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000

080038c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038c4:	b672      	cpsid	i
}
 80038c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <Error_Handler+0x8>

080038cc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80038e8:	4b17      	ldr	r3, [pc, #92]	@ (8003948 <MX_SPI1_Init+0x64>)
 80038ea:	4a18      	ldr	r2, [pc, #96]	@ (800394c <MX_SPI1_Init+0x68>)
 80038ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038ee:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <MX_SPI1_Init+0x64>)
 80038f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038f6:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <MX_SPI1_Init+0x64>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038fc:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <MX_SPI1_Init+0x64>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003902:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <MX_SPI1_Init+0x64>)
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003908:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <MX_SPI1_Init+0x64>)
 800390a:	2200      	movs	r2, #0
 800390c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800390e:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <MX_SPI1_Init+0x64>)
 8003910:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003916:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <MX_SPI1_Init+0x64>)
 8003918:	2200      	movs	r2, #0
 800391a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <MX_SPI1_Init+0x64>)
 800391e:	2200      	movs	r2, #0
 8003920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <MX_SPI1_Init+0x64>)
 8003924:	2200      	movs	r2, #0
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003928:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <MX_SPI1_Init+0x64>)
 800392a:	2200      	movs	r2, #0
 800392c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <MX_SPI1_Init+0x64>)
 8003930:	220a      	movs	r2, #10
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003934:	4804      	ldr	r0, [pc, #16]	@ (8003948 <MX_SPI1_Init+0x64>)
 8003936:	f003 fee3 	bl	8007700 <HAL_SPI_Init>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003940:	f7ff ffbe 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000334 	.word	0x20000334
 800394c:	40013000 	.word	0x40013000

08003950 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a47      	ldr	r2, [pc, #284]	@ (8003a8c <HAL_SPI_MspInit+0x13c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	f040 8088 	bne.w	8003a84 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	4b45      	ldr	r3, [pc, #276]	@ (8003a90 <HAL_SPI_MspInit+0x140>)
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	4a44      	ldr	r2, [pc, #272]	@ (8003a90 <HAL_SPI_MspInit+0x140>)
 800397e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003982:	6453      	str	r3, [r2, #68]	@ 0x44
 8003984:	4b42      	ldr	r3, [pc, #264]	@ (8003a90 <HAL_SPI_MspInit+0x140>)
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	4b3e      	ldr	r3, [pc, #248]	@ (8003a90 <HAL_SPI_MspInit+0x140>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	4a3d      	ldr	r2, [pc, #244]	@ (8003a90 <HAL_SPI_MspInit+0x140>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003a90 <HAL_SPI_MspInit+0x140>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039ac:	23f0      	movs	r3, #240	@ 0xf0
 80039ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039bc:	2305      	movs	r3, #5
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	4619      	mov	r1, r3
 80039c6:	4833      	ldr	r0, [pc, #204]	@ (8003a94 <HAL_SPI_MspInit+0x144>)
 80039c8:	f001 fb0a 	bl	8004fe0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80039cc:	4b32      	ldr	r3, [pc, #200]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039ce:	4a33      	ldr	r2, [pc, #204]	@ (8003a9c <HAL_SPI_MspInit+0x14c>)
 80039d0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80039d2:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039d4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80039d8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039da:	4b2f      	ldr	r3, [pc, #188]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039f4:	4b28      	ldr	r3, [pc, #160]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80039fa:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a06:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003a0c:	4822      	ldr	r0, [pc, #136]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 8003a0e:	f000 fdff 	bl	8004610 <HAL_DMA_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003a18:	f7ff ff52 	bl	80038c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 8003a20:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003a22:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_SPI_MspInit+0x148>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <HAL_SPI_MspInit+0x154>)
 8003a2c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a34:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a38:	2240      	movs	r2, #64	@ 0x40
 8003a3a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a3c:	4b18      	ldr	r3, [pc, #96]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a42:	4b17      	ldr	r3, [pc, #92]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a48:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a50:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a56:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a5c:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a68:	480d      	ldr	r0, [pc, #52]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a6a:	f000 fdd1 	bl	8004610 <HAL_DMA_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003a74:	f7ff ff24 	bl	80038c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a09      	ldr	r2, [pc, #36]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a7c:	649a      	str	r2, [r3, #72]	@ 0x48
 8003a7e:	4a08      	ldr	r2, [pc, #32]	@ (8003aa0 <HAL_SPI_MspInit+0x150>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a84:	bf00      	nop
 8003a86:	3728      	adds	r7, #40	@ 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40013000 	.word	0x40013000
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40020000 	.word	0x40020000
 8003a98:	2000038c 	.word	0x2000038c
 8003a9c:	40026410 	.word	0x40026410
 8003aa0:	200003ec 	.word	0x200003ec
 8003aa4:	40026440 	.word	0x40026440

08003aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <HAL_MspInit+0x54>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	4a11      	ldr	r2, [pc, #68]	@ (8003afc <HAL_MspInit+0x54>)
 8003ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003abe:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <HAL_MspInit+0x54>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <HAL_MspInit+0x54>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <HAL_MspInit+0x54>)
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_MspInit+0x54>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	210f      	movs	r1, #15
 8003aea:	f06f 0001 	mvn.w	r0, #1
 8003aee:	f000 fd4b 	bl	8004588 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800

08003b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	@ 0x30
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd0 <HAL_InitTick+0xd0>)
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd0 <HAL_InitTick+0xd0>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b20:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd0 <HAL_InitTick+0xd0>)
 8003b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b2c:	f107 020c 	add.w	r2, r7, #12
 8003b30:	f107 0310 	add.w	r3, r7, #16
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fdb0 	bl	800769c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f003 fd9a 	bl	8007674 <HAL_RCC_GetPCLK2Freq>
 8003b40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <HAL_InitTick+0xd4>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b50:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b52:	4a22      	ldr	r2, [pc, #136]	@ (8003bdc <HAL_InitTick+0xdc>)
 8003b54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b64:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003b76:	4818      	ldr	r0, [pc, #96]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b78:	f004 f9f0 	bl	8007f5c <HAL_TIM_Base_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003b82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11b      	bne.n	8003bc2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003b8a:	4813      	ldr	r0, [pc, #76]	@ (8003bd8 <HAL_InitTick+0xd8>)
 8003b8c:	f004 fad4 	bl	8008138 <HAL_TIM_Base_Start_IT>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d111      	bne.n	8003bc2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b9e:	2019      	movs	r0, #25
 8003ba0:	f000 fd1e 	bl	80045e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d808      	bhi.n	8003bbc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003baa:	2200      	movs	r2, #0
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	2019      	movs	r0, #25
 8003bb0:	f000 fcea 	bl	8004588 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003be0 <HAL_InitTick+0xe0>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e002      	b.n	8003bc2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3730      	adds	r7, #48	@ 0x30
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	431bde83 	.word	0x431bde83
 8003bd8:	2000044c 	.word	0x2000044c
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	20000004 	.word	0x20000004

08003be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <NMI_Handler+0x4>

08003bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <HardFault_Handler+0x4>

08003bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <MemManage_Handler+0x4>

08003bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <BusFault_Handler+0x4>

08003c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <UsageFault_Handler+0x4>

08003c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c20:	4803      	ldr	r0, [pc, #12]	@ (8003c30 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003c22:	f004 fb1b 	bl	800825c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003c26:	4803      	ldr	r0, [pc, #12]	@ (8003c34 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003c28:	f004 fb18 	bl	800825c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	2000044c 	.word	0x2000044c
 8003c34:	20000498 	.word	0x20000498

08003c38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c3c:	4802      	ldr	r0, [pc, #8]	@ (8003c48 <USART1_IRQHandler+0x10>)
 8003c3e:	f004 fd7f 	bl	8008740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000528 	.word	0x20000528

08003c4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003c50:	4802      	ldr	r0, [pc, #8]	@ (8003c5c <DMA2_Stream0_IRQHandler+0x10>)
 8003c52:	f000 ff89 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000038c 	.word	0x2000038c

08003c60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003c64:	4802      	ldr	r0, [pc, #8]	@ (8003c70 <DMA2_Stream2_IRQHandler+0x10>)
 8003c66:	f000 ff7f 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200003ec 	.word	0x200003ec

08003c74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c78:	4802      	ldr	r0, [pc, #8]	@ (8003c84 <OTG_FS_IRQHandler+0x10>)
 8003c7a:	f001 fe4c 	bl	8005916 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20006514 	.word	0x20006514

08003c88 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c8c:	4802      	ldr	r0, [pc, #8]	@ (8003c98 <DMA2_Stream5_IRQHandler+0x10>)
 8003c8e:	f000 ff6b 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000570 	.word	0x20000570

08003c9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ca0:	4802      	ldr	r0, [pc, #8]	@ (8003cac <DMA2_Stream7_IRQHandler+0x10>)
 8003ca2:	f000 ff61 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200005d0 	.word	0x200005d0

08003cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return 1;
 8003cb4:	2301      	movs	r3, #1
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_kill>:

int _kill(int pid, int sig)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cca:	f00e fefd 	bl	8012ac8 <__errno>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2216      	movs	r2, #22
 8003cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_exit>:

void _exit (int status)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ffe7 	bl	8003cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cf2:	bf00      	nop
 8003cf4:	e7fd      	b.n	8003cf2 <_exit+0x12>

08003cf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e00a      	b.n	8003d1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d08:	f3af 8000 	nop.w
 8003d0c:	4601      	mov	r1, r0
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	60ba      	str	r2, [r7, #8]
 8003d14:	b2ca      	uxtb	r2, r1
 8003d16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	dbf0      	blt.n	8003d08 <_read+0x12>
  }

  return len;
 8003d26:	687b      	ldr	r3, [r7, #4]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e009      	b.n	8003d56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	60ba      	str	r2, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3301      	adds	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	dbf1      	blt.n	8003d42 <_write+0x12>
  }
  return len;
 8003d5e:	687b      	ldr	r3, [r7, #4]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_close>:

int _close(int file)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d90:	605a      	str	r2, [r3, #4]
  return 0;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <_isatty>:

int _isatty(int file)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003da8:	2301      	movs	r3, #1
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd8:	4a14      	ldr	r2, [pc, #80]	@ (8003e2c <_sbrk+0x5c>)
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <_sbrk+0x60>)
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003de4:	4b13      	ldr	r3, [pc, #76]	@ (8003e34 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dec:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <_sbrk+0x64>)
 8003dee:	4a12      	ldr	r2, [pc, #72]	@ (8003e38 <_sbrk+0x68>)
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003df2:	4b10      	ldr	r3, [pc, #64]	@ (8003e34 <_sbrk+0x64>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e00:	f00e fe62 	bl	8012ac8 <__errno>
 8003e04:	4603      	mov	r3, r0
 8003e06:	220c      	movs	r2, #12
 8003e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e0e:	e009      	b.n	8003e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <_sbrk+0x64>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e16:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <_sbrk+0x64>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	4a05      	ldr	r2, [pc, #20]	@ (8003e34 <_sbrk+0x64>)
 8003e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20020000 	.word	0x20020000
 8003e30:	00000400 	.word	0x00000400
 8003e34:	20000494 	.word	0x20000494
 8003e38:	20006d68 	.word	0x20006d68

08003e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <SystemInit+0x20>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	4a05      	ldr	r2, [pc, #20]	@ (8003e5c <SystemInit+0x20>)
 8003e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003e64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <MX_TIM10_Init+0x40>)
 8003e66:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea4 <MX_TIM10_Init+0x44>)
 8003e68:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <MX_TIM10_Init+0x40>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <MX_TIM10_Init+0x40>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <MX_TIM10_Init+0x40>)
 8003e78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e7c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <MX_TIM10_Init+0x40>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e84:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <MX_TIM10_Init+0x40>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003e8a:	4805      	ldr	r0, [pc, #20]	@ (8003ea0 <MX_TIM10_Init+0x40>)
 8003e8c:	f004 f866 	bl	8007f5c <HAL_TIM_Base_Init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003e96:	f7ff fd13 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000498 	.word	0x20000498
 8003ea4:	40014400 	.word	0x40014400

08003ea8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <MX_TIM11_Init+0x40>)
 8003eae:	4a0f      	ldr	r2, [pc, #60]	@ (8003eec <MX_TIM11_Init+0x44>)
 8003eb0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <MX_TIM11_Init+0x40>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <MX_TIM11_Init+0x40>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <MX_TIM11_Init+0x40>)
 8003ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ec4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec6:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <MX_TIM11_Init+0x40>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <MX_TIM11_Init+0x40>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003ed2:	4805      	ldr	r0, [pc, #20]	@ (8003ee8 <MX_TIM11_Init+0x40>)
 8003ed4:	f004 f842 	bl	8007f5c <HAL_TIM_Base_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003ede:	f7ff fcef 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200004e0 	.word	0x200004e0
 8003eec:	40014800 	.word	0x40014800

08003ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_TIM_Base_MspInit+0x70>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d116      	bne.n	8003f30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <HAL_TIM_Base_MspInit+0x74>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <HAL_TIM_Base_MspInit+0x74>)
 8003f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f12:	4b14      	ldr	r3, [pc, #80]	@ (8003f64 <HAL_TIM_Base_MspInit+0x74>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2105      	movs	r1, #5
 8003f22:	2019      	movs	r0, #25
 8003f24:	f000 fb30 	bl	8004588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f28:	2019      	movs	r0, #25
 8003f2a:	f000 fb59 	bl	80045e0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003f2e:	e012      	b.n	8003f56 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0c      	ldr	r2, [pc, #48]	@ (8003f68 <HAL_TIM_Base_MspInit+0x78>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10d      	bne.n	8003f56 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	4b09      	ldr	r3, [pc, #36]	@ (8003f64 <HAL_TIM_Base_MspInit+0x74>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	4a08      	ldr	r2, [pc, #32]	@ (8003f64 <HAL_TIM_Base_MspInit+0x74>)
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f4a:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <HAL_TIM_Base_MspInit+0x74>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40014800 	.word	0x40014800

08003f6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f70:	4b11      	ldr	r3, [pc, #68]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f72:	4a12      	ldr	r2, [pc, #72]	@ (8003fbc <MX_USART1_UART_Init+0x50>)
 8003f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f76:	4b10      	ldr	r3, [pc, #64]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f84:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f90:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f92:	220c      	movs	r2, #12
 8003f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fa2:	4805      	ldr	r0, [pc, #20]	@ (8003fb8 <MX_USART1_UART_Init+0x4c>)
 8003fa4:	f004 fb12 	bl	80085cc <HAL_UART_Init>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fae:	f7ff fc87 	bl	80038c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000528 	.word	0x20000528
 8003fbc:	40011000 	.word	0x40011000

08003fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8004110 <HAL_UART_MspInit+0x150>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	f040 8091 	bne.w	8004106 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8004114 <HAL_UART_MspInit+0x154>)
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	4a49      	ldr	r2, [pc, #292]	@ (8004114 <HAL_UART_MspInit+0x154>)
 8003fee:	f043 0310 	orr.w	r3, r3, #16
 8003ff2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ff4:	4b47      	ldr	r3, [pc, #284]	@ (8004114 <HAL_UART_MspInit+0x154>)
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	4b43      	ldr	r3, [pc, #268]	@ (8004114 <HAL_UART_MspInit+0x154>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	4a42      	ldr	r2, [pc, #264]	@ (8004114 <HAL_UART_MspInit+0x154>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004010:	4b40      	ldr	r3, [pc, #256]	@ (8004114 <HAL_UART_MspInit+0x154>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MCU_TX_Pin|MCU_RX_Pin;
 800401c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402a:	2303      	movs	r3, #3
 800402c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800402e:	2307      	movs	r3, #7
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	4837      	ldr	r0, [pc, #220]	@ (8004118 <HAL_UART_MspInit+0x158>)
 800403a:	f000 ffd1 	bl	8004fe0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800403e:	4b37      	ldr	r3, [pc, #220]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004040:	4a37      	ldr	r2, [pc, #220]	@ (8004120 <HAL_UART_MspInit+0x160>)
 8004042:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004044:	4b35      	ldr	r3, [pc, #212]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004046:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800404a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800404c:	4b33      	ldr	r3, [pc, #204]	@ (800411c <HAL_UART_MspInit+0x15c>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004052:	4b32      	ldr	r3, [pc, #200]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004054:	2200      	movs	r2, #0
 8004056:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004058:	4b30      	ldr	r3, [pc, #192]	@ (800411c <HAL_UART_MspInit+0x15c>)
 800405a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800405e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004060:	4b2e      	ldr	r3, [pc, #184]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004062:	2200      	movs	r2, #0
 8004064:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004066:	4b2d      	ldr	r3, [pc, #180]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800406c:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <HAL_UART_MspInit+0x15c>)
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004072:	4b2a      	ldr	r3, [pc, #168]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004074:	2200      	movs	r2, #0
 8004076:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004078:	4b28      	ldr	r3, [pc, #160]	@ (800411c <HAL_UART_MspInit+0x15c>)
 800407a:	2200      	movs	r2, #0
 800407c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800407e:	4827      	ldr	r0, [pc, #156]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004080:	f000 fac6 	bl	8004610 <HAL_DMA_Init>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800408a:	f7ff fc19 	bl	80038c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a22      	ldr	r2, [pc, #136]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004092:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004094:	4a21      	ldr	r2, [pc, #132]	@ (800411c <HAL_UART_MspInit+0x15c>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800409a:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <HAL_UART_MspInit+0x164>)
 800409c:	4a22      	ldr	r2, [pc, #136]	@ (8004128 <HAL_UART_MspInit+0x168>)
 800409e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80040a0:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80040a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040aa:	2240      	movs	r2, #64	@ 0x40
 80040ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040bc:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040be:	2200      	movs	r2, #0
 80040c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80040c8:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040ce:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040d4:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80040da:	4812      	ldr	r0, [pc, #72]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040dc:	f000 fa98 	bl	8004610 <HAL_DMA_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80040e6:	f7ff fbeb 	bl	80038c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80040f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <HAL_UART_MspInit+0x164>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2105      	movs	r1, #5
 80040fa:	2025      	movs	r0, #37	@ 0x25
 80040fc:	f000 fa44 	bl	8004588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004100:	2025      	movs	r0, #37	@ 0x25
 8004102:	f000 fa6d 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004106:	bf00      	nop
 8004108:	3728      	adds	r7, #40	@ 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40011000 	.word	0x40011000
 8004114:	40023800 	.word	0x40023800
 8004118:	40020000 	.word	0x40020000
 800411c:	20000570 	.word	0x20000570
 8004120:	40026488 	.word	0x40026488
 8004124:	200005d0 	.word	0x200005d0
 8004128:	400264b8 	.word	0x400264b8

0800412c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800412c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004130:	f7ff fe84 	bl	8003e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004134:	480c      	ldr	r0, [pc, #48]	@ (8004168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004136:	490d      	ldr	r1, [pc, #52]	@ (800416c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004138:	4a0d      	ldr	r2, [pc, #52]	@ (8004170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800413c:	e002      	b.n	8004144 <LoopCopyDataInit>

0800413e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800413e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004142:	3304      	adds	r3, #4

08004144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004148:	d3f9      	bcc.n	800413e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414a:	4a0a      	ldr	r2, [pc, #40]	@ (8004174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800414c:	4c0a      	ldr	r4, [pc, #40]	@ (8004178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004150:	e001      	b.n	8004156 <LoopFillZerobss>

08004152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004154:	3204      	adds	r2, #4

08004156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004158:	d3fb      	bcc.n	8004152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800415a:	f00e fcbb 	bl	8012ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800415e:	f7ff faf5 	bl	800374c <main>
  bx  lr    
 8004162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800416c:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8004170:	08015880 	.word	0x08015880
  ldr r2, =_sbss
 8004174:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8004178:	20006d64 	.word	0x20006d64

0800417c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800417c:	e7fe      	b.n	800417c <ADC_IRQHandler>

0800417e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800418c:	b672      	cpsid	i
}
 800418e:	bf00      	nop
 8004190:	f7ff fb96 	bl	80038c0 <Error_Handler>
 8004194:	bf00      	nop
 8004196:	e7fd      	b.n	8004194 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e007      	b.n	80041ae <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	2100      	movs	r1, #0
 80041a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d9f4      	bls.n	800419e <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	721a      	strb	r2, [r3, #8]
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80041d0:	b672      	cpsid	i
}
 80041d2:	bf00      	nop
 80041d4:	f7ff fb74 	bl	80038c0 <Error_Handler>
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	7a1b      	ldrb	r3, [r3, #8]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d905      	bls.n	80041f0 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80041e4:	b672      	cpsid	i
}
 80041e6:	bf00      	nop
 80041e8:	f7ff fb6a 	bl	80038c0 <Error_Handler>
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7a1b      	ldrb	r3, [r3, #8]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	b2d1      	uxtb	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	7211      	strb	r1, [r2, #8]
 80041fc:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60fa      	str	r2, [r7, #12]
 8004214:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004234:	b672      	cpsid	i
}
 8004236:	bf00      	nop
 8004238:	f7ff fb42 	bl	80038c0 <Error_Handler>
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <stm32_lock_release+0x16>
  lock->nesting_level--;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	7a1b      	ldrb	r3, [r3, #8]
 8004244:	3b01      	subs	r3, #1
 8004246:	b2da      	uxtb	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	7a1b      	ldrb	r3, [r3, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d905      	bls.n	8004260 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004254:	b672      	cpsid	i
}
 8004256:	bf00      	nop
 8004258:	f7ff fb32 	bl	80038c0 <Error_Handler>
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7a1b      	ldrb	r3, [r3, #8]
 8004264:	461a      	mov	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004274:	bf00      	nop
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 800428c:	f00e fc1c 	bl	8012ac8 <__errno>
 8004290:	4603      	mov	r3, r0
 8004292:	2216      	movs	r2, #22
 8004294:	601a      	str	r2, [r3, #0]
    return;
 8004296:	e016      	b.n	80042c6 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8004298:	200c      	movs	r0, #12
 800429a:	f00d fb31 	bl	8011900 <malloc>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff ff63 	bl	800417e <stm32_lock_init>
    return;
 80042b8:	e005      	b.n	80042c6 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80042ba:	b672      	cpsid	i
}
 80042bc:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80042be:	f7ff faff 	bl	80038c0 <Error_Handler>
 80042c2:	bf00      	nop
 80042c4:	e7fd      	b.n	80042c2 <__retarget_lock_init_recursive+0x44>
}
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80042da:	b672      	cpsid	i
}
 80042dc:	bf00      	nop
 80042de:	f7ff faef 	bl	80038c0 <Error_Handler>
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff6a 	bl	80041c2 <stm32_lock_acquire>
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8004304:	b672      	cpsid	i
}
 8004306:	bf00      	nop
 8004308:	f7ff fada 	bl	80038c0 <Error_Handler>
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ff87 	bl	8004226 <stm32_lock_release>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004324:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <HAL_Init+0x40>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0d      	ldr	r2, [pc, #52]	@ (8004360 <HAL_Init+0x40>)
 800432a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800432e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <HAL_Init+0x40>)
 8004336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800433a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800433c:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <HAL_Init+0x40>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a07      	ldr	r2, [pc, #28]	@ (8004360 <HAL_Init+0x40>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004348:	2003      	movs	r0, #3
 800434a:	f000 f8fd 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800434e:	2005      	movs	r0, #5
 8004350:	f7ff fbd6 	bl	8003b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004354:	f7ff fba8 	bl	8003aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023c00 	.word	0x40023c00

08004364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <HAL_IncTick+0x20>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <HAL_IncTick+0x24>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4413      	add	r3, r2
 8004374:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <HAL_IncTick+0x24>)
 8004376:	6013      	str	r3, [r2, #0]
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000008 	.word	0x20000008
 8004388:	20000648 	.word	0x20000648

0800438c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return uwTick;
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <HAL_GetTick+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000648 	.word	0x20000648

080043a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7ff ffee 	bl	800438c <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043bc:	d005      	beq.n	80043ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043be:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <HAL_Delay+0x44>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ca:	bf00      	nop
 80043cc:	f7ff ffde 	bl	800438c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d8f7      	bhi.n	80043cc <HAL_Delay+0x28>
  {
  }
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000008 	.word	0x20000008

080043ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <__NVIC_SetPriorityGrouping+0x44>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004408:	4013      	ands	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800441c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800441e:	4a04      	ldr	r2, [pc, #16]	@ (8004430 <__NVIC_SetPriorityGrouping+0x44>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	60d3      	str	r3, [r2, #12]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004438:	4b04      	ldr	r3, [pc, #16]	@ (800444c <__NVIC_GetPriorityGrouping+0x18>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	f003 0307 	and.w	r3, r3, #7
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	2b00      	cmp	r3, #0
 8004460:	db0b      	blt.n	800447a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	f003 021f 	and.w	r2, r3, #31
 8004468:	4907      	ldr	r1, [pc, #28]	@ (8004488 <__NVIC_EnableIRQ+0x38>)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2001      	movs	r0, #1
 8004472:	fa00 f202 	lsl.w	r2, r0, r2
 8004476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000e100 	.word	0xe000e100

0800448c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db0a      	blt.n	80044b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	490c      	ldr	r1, [pc, #48]	@ (80044d8 <__NVIC_SetPriority+0x4c>)
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	0112      	lsls	r2, r2, #4
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	440b      	add	r3, r1
 80044b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b4:	e00a      	b.n	80044cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4908      	ldr	r1, [pc, #32]	@ (80044dc <__NVIC_SetPriority+0x50>)
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	3b04      	subs	r3, #4
 80044c4:	0112      	lsls	r2, r2, #4
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	440b      	add	r3, r1
 80044ca:	761a      	strb	r2, [r3, #24]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000e100 	.word	0xe000e100
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	@ 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f1c3 0307 	rsb	r3, r3, #7
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	bf28      	it	cs
 80044fe:	2304      	movcs	r3, #4
 8004500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3304      	adds	r3, #4
 8004506:	2b06      	cmp	r3, #6
 8004508:	d902      	bls.n	8004510 <NVIC_EncodePriority+0x30>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3b03      	subs	r3, #3
 800450e:	e000      	b.n	8004512 <NVIC_EncodePriority+0x32>
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	401a      	ands	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004528:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa01 f303 	lsl.w	r3, r1, r3
 8004532:	43d9      	mvns	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004538:	4313      	orrs	r3, r2
         );
}
 800453a:	4618      	mov	r0, r3
 800453c:	3724      	adds	r7, #36	@ 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b07      	cmp	r3, #7
 8004554:	d00f      	beq.n	8004576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d00c      	beq.n	8004576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b05      	cmp	r3, #5
 8004560:	d009      	beq.n	8004576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d006      	beq.n	8004576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d003      	beq.n	8004576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800456e:	2190      	movs	r1, #144	@ 0x90
 8004570:	4804      	ldr	r0, [pc, #16]	@ (8004584 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004572:	f7ff f9ab 	bl	80038cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff38 	bl	80043ec <__NVIC_SetPriorityGrouping>
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	08015088 	.word	0x08015088

08004588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b0f      	cmp	r3, #15
 800459e:	d903      	bls.n	80045a8 <HAL_NVIC_SetPriority+0x20>
 80045a0:	21a8      	movs	r1, #168	@ 0xa8
 80045a2:	480e      	ldr	r0, [pc, #56]	@ (80045dc <HAL_NVIC_SetPriority+0x54>)
 80045a4:	f7ff f992 	bl	80038cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	d903      	bls.n	80045b6 <HAL_NVIC_SetPriority+0x2e>
 80045ae:	21a9      	movs	r1, #169	@ 0xa9
 80045b0:	480a      	ldr	r0, [pc, #40]	@ (80045dc <HAL_NVIC_SetPriority+0x54>)
 80045b2:	f7ff f98b 	bl	80038cc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045b6:	f7ff ff3d 	bl	8004434 <__NVIC_GetPriorityGrouping>
 80045ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	f7ff ff8d 	bl	80044e0 <NVIC_EncodePriority>
 80045c6:	4602      	mov	r2, r0
 80045c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff5c 	bl	800448c <__NVIC_SetPriority>
}
 80045d4:	bf00      	nop
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	08015088 	.word	0x08015088

080045e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	da03      	bge.n	80045fa <HAL_NVIC_EnableIRQ+0x1a>
 80045f2:	21bc      	movs	r1, #188	@ 0xbc
 80045f4:	4805      	ldr	r0, [pc, #20]	@ (800460c <HAL_NVIC_EnableIRQ+0x2c>)
 80045f6:	f7ff f969 	bl	80038cc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff ff26 	bl	8004450 <__NVIC_EnableIRQ>
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	08015088 	.word	0x08015088

08004610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff feb6 	bl	800438c <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e203      	b.n	8004a34 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a8b      	ldr	r2, [pc, #556]	@ (8004860 <HAL_DMA_Init+0x250>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d04e      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a8a      	ldr	r2, [pc, #552]	@ (8004864 <HAL_DMA_Init+0x254>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d049      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a88      	ldr	r2, [pc, #544]	@ (8004868 <HAL_DMA_Init+0x258>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d044      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a87      	ldr	r2, [pc, #540]	@ (800486c <HAL_DMA_Init+0x25c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d03f      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a85      	ldr	r2, [pc, #532]	@ (8004870 <HAL_DMA_Init+0x260>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d03a      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a84      	ldr	r2, [pc, #528]	@ (8004874 <HAL_DMA_Init+0x264>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d035      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a82      	ldr	r2, [pc, #520]	@ (8004878 <HAL_DMA_Init+0x268>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d030      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a81      	ldr	r2, [pc, #516]	@ (800487c <HAL_DMA_Init+0x26c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d02b      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a7f      	ldr	r2, [pc, #508]	@ (8004880 <HAL_DMA_Init+0x270>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d026      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7e      	ldr	r2, [pc, #504]	@ (8004884 <HAL_DMA_Init+0x274>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d021      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a7c      	ldr	r2, [pc, #496]	@ (8004888 <HAL_DMA_Init+0x278>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01c      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a7b      	ldr	r2, [pc, #492]	@ (800488c <HAL_DMA_Init+0x27c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d017      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a79      	ldr	r2, [pc, #484]	@ (8004890 <HAL_DMA_Init+0x280>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d012      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a78      	ldr	r2, [pc, #480]	@ (8004894 <HAL_DMA_Init+0x284>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a76      	ldr	r2, [pc, #472]	@ (8004898 <HAL_DMA_Init+0x288>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d008      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a75      	ldr	r2, [pc, #468]	@ (800489c <HAL_DMA_Init+0x28c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <HAL_DMA_Init+0xc4>
 80046cc:	21b7      	movs	r1, #183	@ 0xb7
 80046ce:	4874      	ldr	r0, [pc, #464]	@ (80048a0 <HAL_DMA_Init+0x290>)
 80046d0:	f7ff f8fc 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d026      	beq.n	800472a <HAL_DMA_Init+0x11a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046e4:	d021      	beq.n	800472a <HAL_DMA_Init+0x11a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ee:	d01c      	beq.n	800472a <HAL_DMA_Init+0x11a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80046f8:	d017      	beq.n	800472a <HAL_DMA_Init+0x11a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004702:	d012      	beq.n	800472a <HAL_DMA_Init+0x11a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800470c:	d00d      	beq.n	800472a <HAL_DMA_Init+0x11a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004716:	d008      	beq.n	800472a <HAL_DMA_Init+0x11a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8004720:	d003      	beq.n	800472a <HAL_DMA_Init+0x11a>
 8004722:	21b8      	movs	r1, #184	@ 0xb8
 8004724:	485e      	ldr	r0, [pc, #376]	@ (80048a0 <HAL_DMA_Init+0x290>)
 8004726:	f7ff f8d1 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_DMA_Init+0x13a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b40      	cmp	r3, #64	@ 0x40
 8004738:	d007      	beq.n	800474a <HAL_DMA_Init+0x13a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b80      	cmp	r3, #128	@ 0x80
 8004740:	d003      	beq.n	800474a <HAL_DMA_Init+0x13a>
 8004742:	21b9      	movs	r1, #185	@ 0xb9
 8004744:	4856      	ldr	r0, [pc, #344]	@ (80048a0 <HAL_DMA_Init+0x290>)
 8004746:	f7ff f8c1 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004752:	d007      	beq.n	8004764 <HAL_DMA_Init+0x154>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_DMA_Init+0x154>
 800475c:	21ba      	movs	r1, #186	@ 0xba
 800475e:	4850      	ldr	r0, [pc, #320]	@ (80048a0 <HAL_DMA_Init+0x290>)
 8004760:	f7ff f8b4 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476c:	d007      	beq.n	800477e <HAL_DMA_Init+0x16e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_DMA_Init+0x16e>
 8004776:	21bb      	movs	r1, #187	@ 0xbb
 8004778:	4849      	ldr	r0, [pc, #292]	@ (80048a0 <HAL_DMA_Init+0x290>)
 800477a:	f7ff f8a7 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <HAL_DMA_Init+0x192>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478e:	d008      	beq.n	80047a2 <HAL_DMA_Init+0x192>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004798:	d003      	beq.n	80047a2 <HAL_DMA_Init+0x192>
 800479a:	21bc      	movs	r1, #188	@ 0xbc
 800479c:	4840      	ldr	r0, [pc, #256]	@ (80048a0 <HAL_DMA_Init+0x290>)
 800479e:	f7ff f895 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <HAL_DMA_Init+0x1b6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b2:	d008      	beq.n	80047c6 <HAL_DMA_Init+0x1b6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047bc:	d003      	beq.n	80047c6 <HAL_DMA_Init+0x1b6>
 80047be:	21bd      	movs	r1, #189	@ 0xbd
 80047c0:	4837      	ldr	r0, [pc, #220]	@ (80048a0 <HAL_DMA_Init+0x290>)
 80047c2:	f7ff f883 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_DMA_Init+0x1d8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d6:	d007      	beq.n	80047e8 <HAL_DMA_Init+0x1d8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d003      	beq.n	80047e8 <HAL_DMA_Init+0x1d8>
 80047e0:	21be      	movs	r1, #190	@ 0xbe
 80047e2:	482f      	ldr	r0, [pc, #188]	@ (80048a0 <HAL_DMA_Init+0x290>)
 80047e4:	f7ff f872 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d012      	beq.n	8004816 <HAL_DMA_Init+0x206>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f8:	d00d      	beq.n	8004816 <HAL_DMA_Init+0x206>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004802:	d008      	beq.n	8004816 <HAL_DMA_Init+0x206>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800480c:	d003      	beq.n	8004816 <HAL_DMA_Init+0x206>
 800480e:	21bf      	movs	r1, #191	@ 0xbf
 8004810:	4823      	ldr	r0, [pc, #140]	@ (80048a0 <HAL_DMA_Init+0x290>)
 8004812:	f7ff f85b 	bl	80038cc <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_DMA_Init+0x21e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	2b04      	cmp	r3, #4
 8004824:	d003      	beq.n	800482e <HAL_DMA_Init+0x21e>
 8004826:	21c0      	movs	r1, #192	@ 0xc0
 8004828:	481d      	ldr	r0, [pc, #116]	@ (80048a0 <HAL_DMA_Init+0x290>)
 800482a:	f7ff f84f 	bl	80038cc <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	2b00      	cmp	r3, #0
 8004834:	d064      	beq.n	8004900 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	2b00      	cmp	r3, #0
 800483c:	d032      	beq.n	80048a4 <HAL_DMA_Init+0x294>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004842:	2b01      	cmp	r3, #1
 8004844:	d02e      	beq.n	80048a4 <HAL_DMA_Init+0x294>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	2b02      	cmp	r3, #2
 800484c:	d02a      	beq.n	80048a4 <HAL_DMA_Init+0x294>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004852:	2b03      	cmp	r3, #3
 8004854:	d026      	beq.n	80048a4 <HAL_DMA_Init+0x294>
 8004856:	21c5      	movs	r1, #197	@ 0xc5
 8004858:	4811      	ldr	r0, [pc, #68]	@ (80048a0 <HAL_DMA_Init+0x290>)
 800485a:	f7ff f837 	bl	80038cc <assert_failed>
 800485e:	e021      	b.n	80048a4 <HAL_DMA_Init+0x294>
 8004860:	40026010 	.word	0x40026010
 8004864:	40026028 	.word	0x40026028
 8004868:	40026040 	.word	0x40026040
 800486c:	40026058 	.word	0x40026058
 8004870:	40026070 	.word	0x40026070
 8004874:	40026088 	.word	0x40026088
 8004878:	400260a0 	.word	0x400260a0
 800487c:	400260b8 	.word	0x400260b8
 8004880:	40026410 	.word	0x40026410
 8004884:	40026428 	.word	0x40026428
 8004888:	40026440 	.word	0x40026440
 800488c:	40026458 	.word	0x40026458
 8004890:	40026470 	.word	0x40026470
 8004894:	40026488 	.word	0x40026488
 8004898:	400264a0 	.word	0x400264a0
 800489c:	400264b8 	.word	0x400264b8
 80048a0:	080150c4 	.word	0x080150c4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <HAL_DMA_Init+0x2c2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048b4:	d00d      	beq.n	80048d2 <HAL_DMA_Init+0x2c2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048be:	d008      	beq.n	80048d2 <HAL_DMA_Init+0x2c2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048c8:	d003      	beq.n	80048d2 <HAL_DMA_Init+0x2c2>
 80048ca:	21c6      	movs	r1, #198	@ 0xc6
 80048cc:	485b      	ldr	r0, [pc, #364]	@ (8004a3c <HAL_DMA_Init+0x42c>)
 80048ce:	f7fe fffd 	bl	80038cc <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <HAL_DMA_Init+0x2f0>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048e2:	d00d      	beq.n	8004900 <HAL_DMA_Init+0x2f0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ec:	d008      	beq.n	8004900 <HAL_DMA_Init+0x2f0>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048f6:	d003      	beq.n	8004900 <HAL_DMA_Init+0x2f0>
 80048f8:	21c7      	movs	r1, #199	@ 0xc7
 80048fa:	4850      	ldr	r0, [pc, #320]	@ (8004a3c <HAL_DMA_Init+0x42c>)
 80048fc:	f7fe ffe6 	bl	80038cc <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004920:	e00f      	b.n	8004942 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004922:	f7ff fd33 	bl	800438c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b05      	cmp	r3, #5
 800492e:	d908      	bls.n	8004942 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2203      	movs	r2, #3
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e078      	b.n	8004a34 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e8      	bne.n	8004922 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <HAL_DMA_Init+0x430>)
 800495c:	4013      	ands	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800496e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	2b04      	cmp	r3, #4
 800499a:	d107      	bne.n	80049ac <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	4313      	orrs	r3, r2
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0307 	bic.w	r3, r3, #7
 80049c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d117      	bne.n	8004a06 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa7d 	bl	8004ee8 <DMA_CheckFifoParam>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2240      	movs	r2, #64	@ 0x40
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a02:	2301      	movs	r3, #1
 8004a04:	e016      	b.n	8004a34 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa34 	bl	8004e7c <DMA_CalcBaseAndBitshift>
 8004a14:	4603      	mov	r3, r0
 8004a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1c:	223f      	movs	r2, #63	@ 0x3f
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	080150c4 	.word	0x080150c4
 8004a40:	f010803f 	.word	0xf010803f

08004a44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a52:	f7ff fc9b 	bl	800438c <HAL_GetTick>
 8004a56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d008      	beq.n	8004a76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2280      	movs	r2, #128	@ 0x80
 8004a68:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e052      	b.n	8004b1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0216 	bic.w	r2, r2, #22
 8004a84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_DMA_Abort+0x62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0208 	bic.w	r2, r2, #8
 8004ab4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ac6:	e013      	b.n	8004af0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ac8:	f7ff fc60 	bl	800438c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d90c      	bls.n	8004af0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2203      	movs	r2, #3
 8004ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e015      	b.n	8004b1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e4      	bne.n	8004ac8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	223f      	movs	r2, #63	@ 0x3f
 8004b04:	409a      	lsls	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2280      	movs	r2, #128	@ 0x80
 8004b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e00c      	b.n	8004b5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2205      	movs	r2, #5
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b74:	4b8e      	ldr	r3, [pc, #568]	@ (8004db0 <HAL_DMA_IRQHandler+0x248>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a8e      	ldr	r2, [pc, #568]	@ (8004db4 <HAL_DMA_IRQHandler+0x24c>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	2208      	movs	r2, #8
 8004b94:	409a      	lsls	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01a      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bcc:	f043 0201 	orr.w	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd8:	2201      	movs	r2, #1
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	f043 0202 	orr.w	r2, r3, #2
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	2204      	movs	r2, #4
 8004c10:	409a      	lsls	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d012      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c38:	f043 0204 	orr.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c44:	2210      	movs	r2, #16
 8004c46:	409a      	lsls	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d043      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03c      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c62:	2210      	movs	r2, #16
 8004c64:	409a      	lsls	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d024      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
 8004c96:	e01f      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01b      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
 8004ca8:	e016      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0208 	bic.w	r2, r2, #8
 8004cc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cdc:	2220      	movs	r2, #32
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 808f 	beq.w	8004e08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8087 	beq.w	8004e08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfe:	2220      	movs	r2, #32
 8004d00:	409a      	lsls	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d136      	bne.n	8004d80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0216 	bic.w	r2, r2, #22
 8004d20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_DMA_IRQHandler+0x1da>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0208 	bic.w	r2, r2, #8
 8004d50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	223f      	movs	r2, #63	@ 0x3f
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d07e      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
        }
        return;
 8004d7e:	e079      	b.n	8004e74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01d      	beq.n	8004dca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d031      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
 8004dac:	e02c      	b.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
 8004dae:	bf00      	nop
 8004db0:	20000000 	.word	0x20000000
 8004db4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d023      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
 8004dc8:	e01e      	b.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10f      	bne.n	8004df8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0210 	bic.w	r2, r2, #16
 8004de6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d032      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d022      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2205      	movs	r2, #5
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d307      	bcc.n	8004e50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f2      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x2cc>
 8004e4e:	e000      	b.n	8004e52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
 8004e72:	e000      	b.n	8004e76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e74:	bf00      	nop
    }
  }
}
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3b10      	subs	r3, #16
 8004e8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <DMA_CalcBaseAndBitshift+0x64>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e96:	4a13      	ldr	r2, [pc, #76]	@ (8004ee4 <DMA_CalcBaseAndBitshift+0x68>)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d909      	bls.n	8004ebe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ebc:	e007      	b.n	8004ece <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	aaaaaaab 	.word	0xaaaaaaab
 8004ee4:	08015418 	.word	0x08015418

08004ee8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11f      	bne.n	8004f42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d856      	bhi.n	8004fb6 <DMA_CheckFifoParam+0xce>
 8004f08:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <DMA_CheckFifoParam+0x28>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f33 	.word	0x08004f33
 8004f18:	08004f21 	.word	0x08004f21
 8004f1c:	08004fb7 	.word	0x08004fb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d046      	beq.n	8004fba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f30:	e043      	b.n	8004fba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f3a:	d140      	bne.n	8004fbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f40:	e03d      	b.n	8004fbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f4a:	d121      	bne.n	8004f90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d837      	bhi.n	8004fc2 <DMA_CheckFifoParam+0xda>
 8004f52:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <DMA_CheckFifoParam+0x70>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004f69 	.word	0x08004f69
 8004f5c:	08004f6f 	.word	0x08004f6f
 8004f60:	08004f69 	.word	0x08004f69
 8004f64:	08004f81 	.word	0x08004f81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	e030      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d025      	beq.n	8004fc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7e:	e022      	b.n	8004fc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f88:	d11f      	bne.n	8004fca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f8e:	e01c      	b.n	8004fca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d903      	bls.n	8004f9e <DMA_CheckFifoParam+0xb6>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d003      	beq.n	8004fa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f9c:	e018      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa2:	e015      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00e      	beq.n	8004fce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb4:	e00b      	b.n	8004fce <DMA_CheckFifoParam+0xe6>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e00a      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e008      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e006      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e004      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e002      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fca:	bf00      	nop
 8004fcc:	e000      	b.n	8004fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004fce:	bf00      	nop
    }
  } 
  
  return status; 
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop

08004fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a32      	ldr	r2, [pc, #200]	@ (80050c4 <HAL_GPIO_Init+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d017      	beq.n	800502e <HAL_GPIO_Init+0x4e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a31      	ldr	r2, [pc, #196]	@ (80050c8 <HAL_GPIO_Init+0xe8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_GPIO_Init+0x4e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a30      	ldr	r2, [pc, #192]	@ (80050cc <HAL_GPIO_Init+0xec>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00f      	beq.n	800502e <HAL_GPIO_Init+0x4e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2f      	ldr	r2, [pc, #188]	@ (80050d0 <HAL_GPIO_Init+0xf0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <HAL_GPIO_Init+0x4e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2e      	ldr	r2, [pc, #184]	@ (80050d4 <HAL_GPIO_Init+0xf4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <HAL_GPIO_Init+0x4e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2d      	ldr	r2, [pc, #180]	@ (80050d8 <HAL_GPIO_Init+0xf8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x4e>
 8005026:	21ac      	movs	r1, #172	@ 0xac
 8005028:	482c      	ldr	r0, [pc, #176]	@ (80050dc <HAL_GPIO_Init+0xfc>)
 800502a:	f7fe fc4f 	bl	80038cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <HAL_GPIO_Init+0x62>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005040:	d303      	bcc.n	800504a <HAL_GPIO_Init+0x6a>
 8005042:	21ad      	movs	r1, #173	@ 0xad
 8005044:	4825      	ldr	r0, [pc, #148]	@ (80050dc <HAL_GPIO_Init+0xfc>)
 8005046:	f7fe fc41 	bl	80038cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d035      	beq.n	80050be <HAL_GPIO_Init+0xde>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d031      	beq.n	80050be <HAL_GPIO_Init+0xde>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b11      	cmp	r3, #17
 8005060:	d02d      	beq.n	80050be <HAL_GPIO_Init+0xde>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d029      	beq.n	80050be <HAL_GPIO_Init+0xde>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b12      	cmp	r3, #18
 8005070:	d025      	beq.n	80050be <HAL_GPIO_Init+0xde>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800507a:	d020      	beq.n	80050be <HAL_GPIO_Init+0xde>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005084:	d01b      	beq.n	80050be <HAL_GPIO_Init+0xde>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 800508e:	d016      	beq.n	80050be <HAL_GPIO_Init+0xde>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8005098:	d011      	beq.n	80050be <HAL_GPIO_Init+0xde>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80050a2:	d00c      	beq.n	80050be <HAL_GPIO_Init+0xde>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80050ac:	d007      	beq.n	80050be <HAL_GPIO_Init+0xde>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_Init+0xde>
 80050b6:	21ae      	movs	r1, #174	@ 0xae
 80050b8:	4808      	ldr	r0, [pc, #32]	@ (80050dc <HAL_GPIO_Init+0xfc>)
 80050ba:	f7fe fc07 	bl	80038cc <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e20b      	b.n	80054dc <HAL_GPIO_Init+0x4fc>
 80050c4:	40020000 	.word	0x40020000
 80050c8:	40020400 	.word	0x40020400
 80050cc:	40020800 	.word	0x40020800
 80050d0:	40020c00 	.word	0x40020c00
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40021c00 	.word	0x40021c00
 80050dc:	080150fc 	.word	0x080150fc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050e0:	2201      	movs	r2, #1
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	f040 81ec 	bne.w	80054d6 <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d005      	beq.n	8005116 <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005112:	2b02      	cmp	r3, #2
 8005114:	d144      	bne.n	80051a0 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00f      	beq.n	800513e <HAL_GPIO_Init+0x15e>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d00b      	beq.n	800513e <HAL_GPIO_Init+0x15e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d007      	beq.n	800513e <HAL_GPIO_Init+0x15e>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d003      	beq.n	800513e <HAL_GPIO_Init+0x15e>
 8005136:	21c0      	movs	r1, #192	@ 0xc0
 8005138:	4884      	ldr	r0, [pc, #528]	@ (800534c <HAL_GPIO_Init+0x36c>)
 800513a:	f7fe fbc7 	bl	80038cc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	2203      	movs	r2, #3
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005174:	2201      	movs	r2, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 0201 	and.w	r2, r3, #1
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d027      	beq.n	80051fc <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_GPIO_Init+0x1ec>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d007      	beq.n	80051cc <HAL_GPIO_Init+0x1ec>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d003      	beq.n	80051cc <HAL_GPIO_Init+0x1ec>
 80051c4:	21d1      	movs	r1, #209	@ 0xd1
 80051c6:	4861      	ldr	r0, [pc, #388]	@ (800534c <HAL_GPIO_Init+0x36c>)
 80051c8:	f7fe fb80 	bl	80038cc <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	2203      	movs	r2, #3
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b02      	cmp	r3, #2
 8005206:	f040 80a3 	bne.w	8005350 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d077      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b09      	cmp	r3, #9
 8005218:	d073      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d06f      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d06b      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d067      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d063      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d05f      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d05b      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d057      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d053      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d04f      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d04b      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b04      	cmp	r3, #4
 8005270:	d047      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d043      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b05      	cmp	r3, #5
 8005280:	d03f      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d03b      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b05      	cmp	r3, #5
 8005290:	d037      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b06      	cmp	r3, #6
 8005298:	d033      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d02f      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d02b      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d027      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	d023      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b07      	cmp	r3, #7
 80052c0:	d01f      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b07      	cmp	r3, #7
 80052c8:	d01b      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d017      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b0a      	cmp	r3, #10
 80052d8:	d013      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b09      	cmp	r3, #9
 80052e0:	d00f      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d00b      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d007      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x322>
 80052fa:	21de      	movs	r1, #222	@ 0xde
 80052fc:	4813      	ldr	r0, [pc, #76]	@ (800534c <HAL_GPIO_Init+0x36c>)
 80052fe:	f7fe fae5 	bl	80038cc <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	08da      	lsrs	r2, r3, #3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3208      	adds	r2, #8
 800530a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	220f      	movs	r2, #15
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4013      	ands	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	08da      	lsrs	r2, r3, #3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3208      	adds	r2, #8
 8005344:	69b9      	ldr	r1, [r7, #24]
 8005346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800534a:	e001      	b.n	8005350 <HAL_GPIO_Init+0x370>
 800534c:	080150fc 	.word	0x080150fc
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	2203      	movs	r2, #3
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4013      	ands	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 0203 	and.w	r2, r3, #3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80a2 	beq.w	80054d6 <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b56      	ldr	r3, [pc, #344]	@ (80054f0 <HAL_GPIO_Init+0x510>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	4a55      	ldr	r2, [pc, #340]	@ (80054f0 <HAL_GPIO_Init+0x510>)
 800539c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053a2:	4b53      	ldr	r3, [pc, #332]	@ (80054f0 <HAL_GPIO_Init+0x510>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ae:	4a51      	ldr	r2, [pc, #324]	@ (80054f4 <HAL_GPIO_Init+0x514>)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	3302      	adds	r3, #2
 80053b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	220f      	movs	r2, #15
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a48      	ldr	r2, [pc, #288]	@ (80054f8 <HAL_GPIO_Init+0x518>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d019      	beq.n	800540e <HAL_GPIO_Init+0x42e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a47      	ldr	r2, [pc, #284]	@ (80054fc <HAL_GPIO_Init+0x51c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_GPIO_Init+0x42a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a46      	ldr	r2, [pc, #280]	@ (8005500 <HAL_GPIO_Init+0x520>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00d      	beq.n	8005406 <HAL_GPIO_Init+0x426>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a45      	ldr	r2, [pc, #276]	@ (8005504 <HAL_GPIO_Init+0x524>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <HAL_GPIO_Init+0x422>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a44      	ldr	r2, [pc, #272]	@ (8005508 <HAL_GPIO_Init+0x528>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d101      	bne.n	80053fe <HAL_GPIO_Init+0x41e>
 80053fa:	2304      	movs	r3, #4
 80053fc:	e008      	b.n	8005410 <HAL_GPIO_Init+0x430>
 80053fe:	2307      	movs	r3, #7
 8005400:	e006      	b.n	8005410 <HAL_GPIO_Init+0x430>
 8005402:	2303      	movs	r3, #3
 8005404:	e004      	b.n	8005410 <HAL_GPIO_Init+0x430>
 8005406:	2302      	movs	r3, #2
 8005408:	e002      	b.n	8005410 <HAL_GPIO_Init+0x430>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_GPIO_Init+0x430>
 800540e:	2300      	movs	r3, #0
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	f002 0203 	and.w	r2, r2, #3
 8005416:	0092      	lsls	r2, r2, #2
 8005418:	4093      	lsls	r3, r2
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005420:	4934      	ldr	r1, [pc, #208]	@ (80054f4 <HAL_GPIO_Init+0x514>)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	3302      	adds	r3, #2
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800542e:	4b37      	ldr	r3, [pc, #220]	@ (800550c <HAL_GPIO_Init+0x52c>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005452:	4a2e      	ldr	r2, [pc, #184]	@ (800550c <HAL_GPIO_Init+0x52c>)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005458:	4b2c      	ldr	r3, [pc, #176]	@ (800550c <HAL_GPIO_Init+0x52c>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800547c:	4a23      	ldr	r2, [pc, #140]	@ (800550c <HAL_GPIO_Init+0x52c>)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005482:	4b22      	ldr	r3, [pc, #136]	@ (800550c <HAL_GPIO_Init+0x52c>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054a6:	4a19      	ldr	r2, [pc, #100]	@ (800550c <HAL_GPIO_Init+0x52c>)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ac:	4b17      	ldr	r3, [pc, #92]	@ (800550c <HAL_GPIO_Init+0x52c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054d0:	4a0e      	ldr	r2, [pc, #56]	@ (800550c <HAL_GPIO_Init+0x52c>)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b0f      	cmp	r3, #15
 80054e0:	f67f adfe 	bls.w	80050e0 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40013800 	.word	0x40013800
 80054f8:	40020000 	.word	0x40020000
 80054fc:	40020400 	.word	0x40020400
 8005500:	40020800 	.word	0x40020800
 8005504:	40020c00 	.word	0x40020c00
 8005508:	40021000 	.word	0x40021000
 800550c:	40013c00 	.word	0x40013c00

08005510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	807b      	strh	r3, [r7, #2]
 800551c:	4613      	mov	r3, r2
 800551e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <HAL_GPIO_WritePin+0x20>
 8005526:	f240 119d 	movw	r1, #413	@ 0x19d
 800552a:	480e      	ldr	r0, [pc, #56]	@ (8005564 <HAL_GPIO_WritePin+0x54>)
 800552c:	f7fe f9ce 	bl	80038cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005530:	787b      	ldrb	r3, [r7, #1]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <HAL_GPIO_WritePin+0x36>
 8005536:	787b      	ldrb	r3, [r7, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d004      	beq.n	8005546 <HAL_GPIO_WritePin+0x36>
 800553c:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8005540:	4808      	ldr	r0, [pc, #32]	@ (8005564 <HAL_GPIO_WritePin+0x54>)
 8005542:	f7fe f9c3 	bl	80038cc <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005546:	787b      	ldrb	r3, [r7, #1]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 800554c:	887a      	ldrh	r2, [r7, #2]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005552:	e003      	b.n	800555c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	041a      	lsls	r2, r3, #16
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	619a      	str	r2, [r3, #24]
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	080150fc 	.word	0x080150fc

08005568 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e066      	b.n	8005648 <HAL_IWDG_Init+0xe0>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a34      	ldr	r2, [pc, #208]	@ (8005650 <HAL_IWDG_Init+0xe8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <HAL_IWDG_Init+0x24>
 8005584:	21ae      	movs	r1, #174	@ 0xae
 8005586:	4833      	ldr	r0, [pc, #204]	@ (8005654 <HAL_IWDG_Init+0xec>)
 8005588:	f7fe f9a0 	bl	80038cc <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <HAL_IWDG_Init+0x64>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d017      	beq.n	80055cc <HAL_IWDG_Init+0x64>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d013      	beq.n	80055cc <HAL_IWDG_Init+0x64>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d00f      	beq.n	80055cc <HAL_IWDG_Init+0x64>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d00b      	beq.n	80055cc <HAL_IWDG_Init+0x64>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	d007      	beq.n	80055cc <HAL_IWDG_Init+0x64>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b06      	cmp	r3, #6
 80055c2:	d003      	beq.n	80055cc <HAL_IWDG_Init+0x64>
 80055c4:	21af      	movs	r1, #175	@ 0xaf
 80055c6:	4823      	ldr	r0, [pc, #140]	@ (8005654 <HAL_IWDG_Init+0xec>)
 80055c8:	f7fe f980 	bl	80038cc <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d4:	d303      	bcc.n	80055de <HAL_IWDG_Init+0x76>
 80055d6:	21b0      	movs	r1, #176	@ 0xb0
 80055d8:	481e      	ldr	r0, [pc, #120]	@ (8005654 <HAL_IWDG_Init+0xec>)
 80055da:	f7fe f977 	bl	80038cc <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80055e6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f245 5255 	movw	r2, #21845	@ 0x5555
 80055f0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6852      	ldr	r2, [r2, #4]
 80055fa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6892      	ldr	r2, [r2, #8]
 8005604:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005606:	f7fe fec1 	bl	800438c <HAL_GetTick>
 800560a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800560c:	e00f      	b.n	800562e <HAL_IWDG_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800560e:	f7fe febd 	bl	800438c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b31      	cmp	r3, #49	@ 0x31
 800561a:	d908      	bls.n	800562e <HAL_IWDG_Init+0xc6>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_IWDG_Init+0xc6>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e00c      	b.n	8005648 <HAL_IWDG_Init+0xe0>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e8      	bne.n	800560e <HAL_IWDG_Init+0xa6>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005644:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40003000 	.word	0x40003000
 8005654:	08015138 	.word	0x08015138

08005658 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005668:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af02      	add	r7, sp, #8
 800567e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e10a      	b.n	80058a0 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005692:	d003      	beq.n	800569c <HAL_PCD_Init+0x24>
 8005694:	2189      	movs	r1, #137	@ 0x89
 8005696:	4884      	ldr	r0, [pc, #528]	@ (80058a8 <HAL_PCD_Init+0x230>)
 8005698:	f7fe f918 	bl	80038cc <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f00a fe9a 	bl	80103f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2203      	movs	r2, #3
 80056c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056ca:	d102      	bne.n	80056d2 <HAL_PCD_Init+0x5a>
  {
    hpcd->Init.dma_enable = 0U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f004 f85d 	bl	8009796 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7c1a      	ldrb	r2, [r3, #16]
 80056e4:	f88d 2000 	strb.w	r2, [sp]
 80056e8:	3304      	adds	r3, #4
 80056ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ec:	f003 ff3c 	bl	8009568 <USB_CoreInit>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_PCD_Init+0x8a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e0ce      	b.n	80058a0 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2100      	movs	r1, #0
 8005708:	4618      	mov	r0, r3
 800570a:	f004 f855 	bl	80097b8 <USB_SetCurrentMode>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_PCD_Init+0xa8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0bf      	b.n	80058a0 <HAL_PCD_Init+0x228>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	e04a      	b.n	80057bc <HAL_PCD_Init+0x144>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	3315      	adds	r3, #21
 8005736:	2201      	movs	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800573a:	7bfa      	ldrb	r2, [r7, #15]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3314      	adds	r3, #20
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	b298      	uxth	r0, r3
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	332e      	adds	r3, #46	@ 0x2e
 8005762:	4602      	mov	r2, r0
 8005764:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3318      	adds	r3, #24
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	331c      	adds	r3, #28
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800578e:	7bfa      	ldrb	r2, [r7, #15]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	3320      	adds	r3, #32
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3324      	adds	r3, #36	@ 0x24
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	3301      	adds	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	791b      	ldrb	r3, [r3, #4]
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3af      	bcc.n	8005726 <HAL_PCD_Init+0xae>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
 80057ca:	e044      	b.n	8005856 <HAL_PCD_Init+0x1de>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057e2:	7bfa      	ldrb	r2, [r7, #15]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80057f4:	7bfa      	ldrb	r2, [r7, #15]
 80057f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057f8:	7bfa      	ldrb	r2, [r7, #15]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005824:	7bfa      	ldrb	r2, [r7, #15]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800583a:	7bfa      	ldrb	r2, [r7, #15]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	3301      	adds	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	791b      	ldrb	r3, [r3, #4]
 800585a:	7bfa      	ldrb	r2, [r7, #15]
 800585c:	429a      	cmp	r2, r3
 800585e:	d3b5      	bcc.n	80057cc <HAL_PCD_Init+0x154>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7c1a      	ldrb	r2, [r3, #16]
 8005868:	f88d 2000 	strb.w	r2, [sp]
 800586c:	3304      	adds	r3, #4
 800586e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005870:	f003 ffee 	bl	8009850 <USB_DevInit>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_PCD_Init+0x20e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e00c      	b.n	80058a0 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f005 f838 	bl	800a90e <USB_DevDisconnect>

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	08015174 	.word	0x08015174

080058ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_PCD_Start+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e022      	b.n	800590e <HAL_PCD_Start+0x62>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d105      	bne.n	80058f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f003 ff3d 	bl	8009774 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f004 ffe4 	bl	800a8cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005916:	b590      	push	{r4, r7, lr}
 8005918:	b08d      	sub	sp, #52	@ 0x34
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f005 f8a2 	bl	800aa76 <USB_GetMode>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 848c 	bne.w	8006252 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f005 f806 	bl	800a950 <USB_ReadInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8482 	beq.w	8006250 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f004 fff3 	bl	800a950 <USB_ReadInterrupts>
 800596a:	4603      	mov	r3, r0
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b02      	cmp	r3, #2
 8005972:	d107      	bne.n	8005984 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f002 0202 	and.w	r2, r2, #2
 8005982:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f004 ffe1 	bl	800a950 <USB_ReadInterrupts>
 800598e:	4603      	mov	r3, r0
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d161      	bne.n	8005a5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0210 	bic.w	r2, r2, #16
 80059a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f003 020f 	and.w	r2, r3, #15
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	3304      	adds	r3, #4
 80059c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80059ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059d2:	d124      	bne.n	8005a1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d035      	beq.n	8005a4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	6a38      	ldr	r0, [r7, #32]
 80059f4:	f004 fe18 	bl	800a628 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a04:	441a      	add	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a16:	441a      	add	r2, r3
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	615a      	str	r2, [r3, #20]
 8005a1c:	e016      	b.n	8005a4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005a24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a28:	d110      	bne.n	8005a4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a30:	2208      	movs	r2, #8
 8005a32:	4619      	mov	r1, r3
 8005a34:	6a38      	ldr	r0, [r7, #32]
 8005a36:	f004 fdf7 	bl	800a628 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a46:	441a      	add	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0210 	orr.w	r2, r2, #16
 8005a5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f004 ff75 	bl	800a950 <USB_ReadInterrupts>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a70:	f040 80a7 	bne.w	8005bc2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f004 ff7a 	bl	800a976 <USB_ReadDevAllOutEpInterrupt>
 8005a82:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005a84:	e099      	b.n	8005bba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 808e 	beq.w	8005bae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f004 ff9e 	bl	800a9de <USB_ReadDevOutEPInterrupt>
 8005aa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aba:	461a      	mov	r2, r3
 8005abc:	2301      	movs	r3, #1
 8005abe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fea4 	bl	8006810 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 ff7a 	bl	80069e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b02:	461a      	mov	r2, r3
 8005b04:	2310      	movs	r3, #16
 8005b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d030      	beq.n	8005b74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	2b80      	cmp	r3, #128	@ 0x80
 8005b1c:	d109      	bne.n	8005b32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b34:	4613      	mov	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	3304      	adds	r3, #4
 8005b46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d108      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f00a fd43 	bl	80105e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2302      	movs	r3, #2
 8005b72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f47f af62 	bne.w	8005a86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f004 fec2 	bl	800a950 <USB_ReadInterrupts>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bd6:	f040 80db 	bne.w	8005d90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 fee3 	bl	800a9aa <USB_ReadDevAllInEpInterrupt>
 8005be4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005bea:	e0cd      	b.n	8005d88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80c2 	beq.w	8005d7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f004 ff09 	bl	800aa1a <USB_ReadDevInEPInterrupt>
 8005c08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d057      	beq.n	8005cc4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	69f9      	ldr	r1, [r7, #28]
 8005c30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c34:	4013      	ands	r3, r2
 8005c36:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c44:	461a      	mov	r2, r3
 8005c46:	2301      	movs	r3, #1
 8005c48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	799b      	ldrb	r3, [r3, #6]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d132      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3320      	adds	r3, #32
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4403      	add	r3, r0
 8005c72:	331c      	adds	r3, #28
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4419      	add	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4403      	add	r3, r0
 8005c86:	3320      	adds	r3, #32
 8005c88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d113      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x3a2>
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c94:	4613      	mov	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3324      	adds	r3, #36	@ 0x24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	f004 ff10 	bl	800aad8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f00a fc17 	bl	80104f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2308      	movs	r3, #8
 8005cde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d12:	461a      	mov	r2, r3
 8005d14:	2340      	movs	r3, #64	@ 0x40
 8005d16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d023      	beq.n	8005d6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d24:	6a38      	ldr	r0, [r7, #32]
 8005d26:	f003 fef7 	bl	8009b18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	3310      	adds	r3, #16
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	78db      	ldrb	r3, [r3, #3]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d108      	bne.n	8005d58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f00a fc5a 	bl	801060c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	461a      	mov	r2, r3
 8005d66:	2302      	movs	r3, #2
 8005d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fcbd 	bl	80066f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	3301      	adds	r3, #1
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f47f af2e 	bne.w	8005bec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f004 fddb 	bl	800a950 <USB_ReadInterrupts>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da4:	d122      	bne.n	8005dec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d108      	bne.n	8005dd6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005dcc:	2100      	movs	r1, #0
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fea4 	bl	8006b1c <HAL_PCDEx_LPM_Callback>
 8005dd4:	e002      	b.n	8005ddc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f00a fbf8 	bl	80105cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f004 fdad 	bl	800a950 <USB_ReadInterrupts>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e00:	d112      	bne.n	8005e28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d102      	bne.n	8005e18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f00a fbb4 	bl	8010580 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695a      	ldr	r2, [r3, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005e26:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f004 fd8f 	bl	800a950 <USB_ReadInterrupts>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3c:	f040 80b7 	bne.w	8005fae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2110      	movs	r1, #16
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f003 fe5c 	bl	8009b18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e60:	2300      	movs	r3, #0
 8005e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e64:	e046      	b.n	8005ef4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e72:	461a      	mov	r2, r3
 8005e74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ecc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005eec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	791b      	ldrb	r3, [r3, #4]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d3b2      	bcc.n	8005e66 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f0e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005f12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7bdb      	ldrb	r3, [r3, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d016      	beq.n	8005f4a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f2c:	f043 030b 	orr.w	r3, r3, #11
 8005f30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f42:	f043 030b 	orr.w	r3, r3, #11
 8005f46:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f48:	e015      	b.n	8005f76 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f5c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005f60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f70:	f043 030b 	orr.w	r3, r3, #11
 8005f74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f84:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f004 fd9d 	bl	800aad8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f004 fccc 	bl	800a950 <USB_ReadInterrupts>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc2:	d123      	bne.n	800600c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f004 fd62 	bl	800aa92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f003 fe19 	bl	8009c0a <USB_GetDevSpeed>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681c      	ldr	r4, [r3, #0]
 8005fe4:	f001 fb26 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f003 fb1d 	bl	8009630 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f00a faa3 	bl	8010542 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800600a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f004 fc9d 	bl	800a950 <USB_ReadInterrupts>
 8006016:	4603      	mov	r3, r0
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b08      	cmp	r3, #8
 800601e:	d10a      	bne.n	8006036 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f00a fa80 	bl	8010526 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f002 0208 	and.w	r2, r2, #8
 8006034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f004 fc88 	bl	800a950 <USB_ReadInterrupts>
 8006040:	4603      	mov	r3, r0
 8006042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006046:	2b80      	cmp	r3, #128	@ 0x80
 8006048:	d123      	bne.n	8006092 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006056:	2301      	movs	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
 800605a:	e014      	b.n	8006086 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006060:	4613      	mov	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d105      	bne.n	8006080 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	b2db      	uxtb	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fb0a 	bl	8006694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	3301      	adds	r3, #1
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	461a      	mov	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	4293      	cmp	r3, r2
 8006090:	d3e4      	bcc.n	800605c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f004 fc5a 	bl	800a950 <USB_ReadInterrupts>
 800609c:	4603      	mov	r3, r0
 800609e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060a6:	d13c      	bne.n	8006122 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060a8:	2301      	movs	r3, #1
 80060aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ac:	e02b      	b.n	8006106 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3318      	adds	r3, #24
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d115      	bne.n	8006100 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da12      	bge.n	8006100 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060de:	4613      	mov	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3317      	adds	r3, #23
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 faca 	bl	8006694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	3301      	adds	r3, #1
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	791b      	ldrb	r3, [r3, #4]
 800610a:	461a      	mov	r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610e:	4293      	cmp	r3, r2
 8006110:	d3cd      	bcc.n	80060ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f004 fc12 	bl	800a950 <USB_ReadInterrupts>
 800612c:	4603      	mov	r3, r0
 800612e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006136:	d156      	bne.n	80061e6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006138:	2301      	movs	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
 800613c:	e045      	b.n	80061ca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006152:	4613      	mov	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d12e      	bne.n	80061c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006166:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006168:	2b00      	cmp	r3, #0
 800616a:	da2b      	bge.n	80061c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006178:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800617c:	429a      	cmp	r2, r3
 800617e:	d121      	bne.n	80061c4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006192:	2201      	movs	r2, #1
 8006194:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061c0:	6053      	str	r3, [r2, #4]
            break;
 80061c2:	e008      	b.n	80061d6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	3301      	adds	r3, #1
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	791b      	ldrb	r3, [r3, #4]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d3b3      	bcc.n	800613e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80061e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f004 fbb0 	bl	800a950 <USB_ReadInterrupts>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fa:	d10a      	bne.n	8006212 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f00a fa17 	bl	8010630 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f004 fb9a 	bl	800a950 <USB_ReadInterrupts>
 800621c:	4603      	mov	r3, r0
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b04      	cmp	r3, #4
 8006224:	d115      	bne.n	8006252 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f00a fa07 	bl	801064c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	e000      	b.n	8006252 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006250:	bf00      	nop
    }
  }
}
 8006252:	3734      	adds	r7, #52	@ 0x34
 8006254:	46bd      	mov	sp, r7
 8006256:	bd90      	pop	{r4, r7, pc}

08006258 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_PCD_SetAddress+0x1a>
 800626e:	2302      	movs	r3, #2
 8006270:	e012      	b.n	8006298 <HAL_PCD_SetAddress+0x40>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f004 faf9 	bl	800a880 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	4608      	mov	r0, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	461a      	mov	r2, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	70fb      	strb	r3, [r7, #3]
 80062b2:	460b      	mov	r3, r1
 80062b4:	803b      	strh	r3, [r7, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	da0f      	bge.n	80062e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	3310      	adds	r3, #16
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	4413      	add	r3, r2
 80062da:	3304      	adds	r3, #4
 80062dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	705a      	strb	r2, [r3, #1]
 80062e4:	e00f      	b.n	8006306 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	f003 020f 	and.w	r2, r3, #15
 80062ec:	4613      	mov	r3, r2
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	3304      	adds	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	b2da      	uxtb	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006312:	883b      	ldrh	r3, [r7, #0]
 8006314:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	78ba      	ldrb	r2, [r7, #2]
 8006320:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006334:	78bb      	ldrb	r3, [r7, #2]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d102      	bne.n	8006340 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_PCD_EP_Open+0xae>
 800634a:	2302      	movs	r3, #2
 800634c:	e00e      	b.n	800636c <HAL_PCD_EP_Open+0xcc>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	4618      	mov	r0, r3
 800635e:	f003 fc79 	bl	8009c54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800636a:	7afb      	ldrb	r3, [r7, #11]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006384:	2b00      	cmp	r3, #0
 8006386:	da0f      	bge.n	80063a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	f003 020f 	and.w	r2, r3, #15
 800638e:	4613      	mov	r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	3310      	adds	r3, #16
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	4413      	add	r3, r2
 800639c:	3304      	adds	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	705a      	strb	r2, [r3, #1]
 80063a6:	e00f      	b.n	80063c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	4613      	mov	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	3304      	adds	r3, #4
 80063c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_PCD_EP_Close+0x6e>
 80063de:	2302      	movs	r3, #2
 80063e0:	e00e      	b.n	8006400 <HAL_PCD_EP_Close+0x8c>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f003 fcb7 	bl	8009d64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	607a      	str	r2, [r7, #4]
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	460b      	mov	r3, r1
 8006416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	f003 020f 	and.w	r2, r3, #15
 800641e:	4613      	mov	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	3304      	adds	r3, #4
 8006430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2200      	movs	r2, #0
 8006442:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2200      	movs	r2, #0
 8006448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	b2da      	uxtb	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	799b      	ldrb	r3, [r3, #6]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d102      	bne.n	8006464 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	799b      	ldrb	r3, [r3, #6]
 800646c:	461a      	mov	r2, r3
 800646e:	6979      	ldr	r1, [r7, #20]
 8006470:	f003 fd54 	bl	8009f1c <USB_EPStartXfer>

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80064a0:	681b      	ldr	r3, [r3, #0]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	460b      	mov	r3, r1
 80064bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	4613      	mov	r3, r2
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	3310      	adds	r3, #16
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	3304      	adds	r3, #4
 80064d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2201      	movs	r2, #1
 80064ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	799b      	ldrb	r3, [r3, #6]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d102      	bne.n	8006508 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	799b      	ldrb	r3, [r3, #6]
 8006510:	461a      	mov	r2, r3
 8006512:	6979      	ldr	r1, [r7, #20]
 8006514:	f003 fd02 	bl	8009f1c <USB_EPStartXfer>

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	7912      	ldrb	r2, [r2, #4]
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e04f      	b.n	80065e0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006544:	2b00      	cmp	r3, #0
 8006546:	da0f      	bge.n	8006568 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	f003 020f 	and.w	r2, r3, #15
 800654e:	4613      	mov	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	3310      	adds	r3, #16
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	3304      	adds	r3, #4
 800655e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	705a      	strb	r2, [r3, #1]
 8006566:	e00d      	b.n	8006584 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	3304      	adds	r3, #4
 800657c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	b2da      	uxtb	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_PCD_EP_SetStall+0x82>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e01d      	b.n	80065e0 <HAL_PCD_EP_SetStall+0xbe>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68f9      	ldr	r1, [r7, #12]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f004 f890 	bl	800a6d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	7999      	ldrb	r1, [r3, #6]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065d0:	461a      	mov	r2, r3
 80065d2:	f004 fa81 	bl	800aad8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	7912      	ldrb	r2, [r2, #4]
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e042      	b.n	800668c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	da0f      	bge.n	800662e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	f003 020f 	and.w	r2, r3, #15
 8006614:	4613      	mov	r3, r2
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	3310      	adds	r3, #16
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	3304      	adds	r3, #4
 8006624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	705a      	strb	r2, [r3, #1]
 800662c:	e00f      	b.n	800664e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	f003 020f 	and.w	r2, r3, #15
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4413      	add	r3, r2
 8006644:	3304      	adds	r3, #4
 8006646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_PCD_EP_ClrStall+0x86>
 800666a:	2302      	movs	r3, #2
 800666c:	e00e      	b.n	800668c <HAL_PCD_EP_ClrStall+0xa4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	4618      	mov	r0, r3
 800667e:	f004 f899 	bl	800a7b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80066a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da0c      	bge.n	80066c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	f003 020f 	and.w	r2, r3, #15
 80066ae:	4613      	mov	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	3310      	adds	r3, #16
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4413      	add	r3, r2
 80066bc:	3304      	adds	r3, #4
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e00c      	b.n	80066dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	f003 020f 	and.w	r2, r3, #15
 80066c8:	4613      	mov	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	4413      	add	r3, r2
 80066d8:	3304      	adds	r3, #4
 80066da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68f9      	ldr	r1, [r7, #12]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f003 feb8 	bl	800a458 <USB_EPStopXfer>
 80066e8:	4603      	mov	r3, r0
 80066ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066ec:	7afb      	ldrb	r3, [r7, #11]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08a      	sub	sp, #40	@ 0x28
 80066fa:	af02      	add	r7, sp, #8
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	3310      	adds	r3, #16
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	4413      	add	r3, r2
 800671a:	3304      	adds	r3, #4
 800671c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	429a      	cmp	r2, r3
 8006728:	d901      	bls.n	800672e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e06b      	b.n	8006806 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	429a      	cmp	r2, r3
 8006742:	d902      	bls.n	800674a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3303      	adds	r3, #3
 800674e:	089b      	lsrs	r3, r3, #2
 8006750:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006752:	e02a      	b.n	80067aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	429a      	cmp	r2, r3
 8006768:	d902      	bls.n	8006770 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3303      	adds	r3, #3
 8006774:	089b      	lsrs	r3, r3, #2
 8006776:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68d9      	ldr	r1, [r3, #12]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4603      	mov	r3, r0
 800678c:	6978      	ldr	r0, [r7, #20]
 800678e:	f003 ff0d 	bl	800a5ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d809      	bhi.n	80067d4 <PCD_WriteEmptyTxFifo+0xde>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	695a      	ldr	r2, [r3, #20]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d203      	bcs.n	80067d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1bf      	bne.n	8006754 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d811      	bhi.n	8006804 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	2201      	movs	r2, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	43db      	mvns	r3, r3
 80067fa:	6939      	ldr	r1, [r7, #16]
 80067fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006800:	4013      	ands	r3, r2
 8006802:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	333c      	adds	r3, #60	@ 0x3c
 8006828:	3304      	adds	r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	799b      	ldrb	r3, [r3, #6]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d17b      	bne.n	800693e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d015      	beq.n	800687c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4a61      	ldr	r2, [pc, #388]	@ (80069d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	f240 80b9 	bls.w	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 80b3 	beq.w	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	461a      	mov	r2, r3
 8006874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006878:	6093      	str	r3, [r2, #8]
 800687a:	e0a7      	b.n	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006892:	461a      	mov	r2, r3
 8006894:	2320      	movs	r3, #32
 8006896:	6093      	str	r3, [r2, #8]
 8006898:	e098      	b.n	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 8093 	bne.w	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	4a4b      	ldr	r2, [pc, #300]	@ (80069d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d90f      	bls.n	80068ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c4:	461a      	mov	r2, r3
 80068c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ca:	6093      	str	r3, [r2, #8]
 80068cc:	e07e      	b.n	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1a      	ldr	r2, [r3, #32]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	0159      	lsls	r1, r3, #5
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	440b      	add	r3, r1
 80068f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d114      	bne.n	8006930 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006918:	461a      	mov	r2, r3
 800691a:	2101      	movs	r1, #1
 800691c:	f004 f8dc 	bl	800aad8 <USB_EP0_OutStart>
 8006920:	e006      	b.n	8006930 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	441a      	add	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f009 fdc0 	bl	80104bc <HAL_PCD_DataOutStageCallback>
 800693c:	e046      	b.n	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4a26      	ldr	r2, [pc, #152]	@ (80069dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d124      	bne.n	8006990 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006962:	6093      	str	r3, [r2, #8]
 8006964:	e032      	b.n	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697c:	461a      	mov	r2, r3
 800697e:	2320      	movs	r3, #32
 8006980:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f009 fd97 	bl	80104bc <HAL_PCD_DataOutStageCallback>
 800698e:	e01d      	b.n	80069cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d114      	bne.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	4613      	mov	r3, r2
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d108      	bne.n	80069c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069b8:	461a      	mov	r2, r3
 80069ba:	2100      	movs	r1, #0
 80069bc:	f004 f88c 	bl	800aad8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f009 fd78 	bl	80104bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3720      	adds	r7, #32
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	4f54300a 	.word	0x4f54300a
 80069dc:	4f54310a 	.word	0x4f54310a

080069e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	333c      	adds	r3, #60	@ 0x3c
 80069f8:	3304      	adds	r3, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a15      	ldr	r2, [pc, #84]	@ (8006a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d90e      	bls.n	8006a34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f009 fd2f 	bl	8010498 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d90c      	bls.n	8006a5c <PCD_EP_OutSetupPacket_int+0x7c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	799b      	ldrb	r3, [r3, #6]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d108      	bne.n	8006a5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a54:	461a      	mov	r2, r3
 8006a56:	2101      	movs	r1, #1
 8006a58:	f004 f83e 	bl	800aad8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	4f54300a 	.word	0x4f54300a

08006a6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d107      	bne.n	8006a9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a8a:	883b      	ldrh	r3, [r7, #0]
 8006a8c:	0419      	lsls	r1, r3, #16
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a98:	e028      	b.n	8006aec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa0:	0c1b      	lsrs	r3, r3, #16
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	73fb      	strb	r3, [r7, #15]
 8006aac:	e00d      	b.n	8006aca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	3340      	adds	r3, #64	@ 0x40
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	0c1b      	lsrs	r3, r3, #16
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	73fb      	strb	r3, [r7, #15]
 8006aca:	7bfa      	ldrb	r2, [r7, #15]
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d3ec      	bcc.n	8006aae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ad4:	883b      	ldrh	r3, [r7, #0]
 8006ad6:	0418      	lsls	r0, r3, #16
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6819      	ldr	r1, [r3, #0]
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	4302      	orrs	r2, r0
 8006ae4:	3340      	adds	r3, #64	@ 0x40
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e318      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b0f      	cmp	r3, #15
 8006b4c:	d903      	bls.n	8006b56 <HAL_RCC_OscConfig+0x22>
 8006b4e:	21e6      	movs	r1, #230	@ 0xe6
 8006b50:	4897      	ldr	r0, [pc, #604]	@ (8006db0 <HAL_RCC_OscConfig+0x27c>)
 8006b52:	f7fc febb 	bl	80038cc <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8088 	beq.w	8006c74 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00d      	beq.n	8006b88 <HAL_RCC_OscConfig+0x54>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b74:	d008      	beq.n	8006b88 <HAL_RCC_OscConfig+0x54>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b7e:	d003      	beq.n	8006b88 <HAL_RCC_OscConfig+0x54>
 8006b80:	21eb      	movs	r1, #235	@ 0xeb
 8006b82:	488b      	ldr	r0, [pc, #556]	@ (8006db0 <HAL_RCC_OscConfig+0x27c>)
 8006b84:	f7fc fea2 	bl	80038cc <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b88:	4b8a      	ldr	r3, [pc, #552]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d00c      	beq.n	8006bae <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b94:	4b87      	ldr	r3, [pc, #540]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d112      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ba0:	4b84      	ldr	r3, [pc, #528]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bae:	4b81      	ldr	r3, [pc, #516]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d05b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x13e>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d157      	bne.n	8006c72 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e2d8      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bce:	d106      	bne.n	8006bde <HAL_RCC_OscConfig+0xaa>
 8006bd0:	4b78      	ldr	r3, [pc, #480]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a77      	ldr	r2, [pc, #476]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e01d      	b.n	8006c1a <HAL_RCC_OscConfig+0xe6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006be6:	d10c      	bne.n	8006c02 <HAL_RCC_OscConfig+0xce>
 8006be8:	4b72      	ldr	r3, [pc, #456]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a71      	ldr	r2, [pc, #452]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006bee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e00b      	b.n	8006c1a <HAL_RCC_OscConfig+0xe6>
 8006c02:	4b6c      	ldr	r3, [pc, #432]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a6b      	ldr	r2, [pc, #428]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	4b69      	ldr	r3, [pc, #420]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a68      	ldr	r2, [pc, #416]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d013      	beq.n	8006c4a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c22:	f7fd fbb3 	bl	800438c <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c2a:	f7fd fbaf 	bl	800438c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b64      	cmp	r3, #100	@ 0x64
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e29d      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0xf6>
 8006c48:	e014      	b.n	8006c74 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4a:	f7fd fb9f 	bl	800438c <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c52:	f7fd fb9b 	bl	800438c <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b64      	cmp	r3, #100	@ 0x64
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e289      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c64:	4b53      	ldr	r3, [pc, #332]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f0      	bne.n	8006c52 <HAL_RCC_OscConfig+0x11e>
 8006c70:	e000      	b.n	8006c74 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d079      	beq.n	8006d74 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <HAL_RCC_OscConfig+0x166>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d004      	beq.n	8006c9a <HAL_RCC_OscConfig+0x166>
 8006c90:	f240 111d 	movw	r1, #285	@ 0x11d
 8006c94:	4846      	ldr	r0, [pc, #280]	@ (8006db0 <HAL_RCC_OscConfig+0x27c>)
 8006c96:	f7fc fe19 	bl	80038cc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b1f      	cmp	r3, #31
 8006ca0:	d904      	bls.n	8006cac <HAL_RCC_OscConfig+0x178>
 8006ca2:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8006ca6:	4842      	ldr	r0, [pc, #264]	@ (8006db0 <HAL_RCC_OscConfig+0x27c>)
 8006ca8:	f7fc fe10 	bl	80038cc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cac:	4b41      	ldr	r3, [pc, #260]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d11c      	bne.n	8006cfe <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d116      	bne.n	8006cfe <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cd0:	4b38      	ldr	r3, [pc, #224]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x1b4>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d001      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e247      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce8:	4b32      	ldr	r3, [pc, #200]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	492f      	ldr	r1, [pc, #188]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cfc:	e03a      	b.n	8006d74 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d020      	beq.n	8006d48 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d06:	4b2c      	ldr	r3, [pc, #176]	@ (8006db8 <HAL_RCC_OscConfig+0x284>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0c:	f7fd fb3e 	bl	800438c <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d14:	f7fd fb3a 	bl	800438c <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e228      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d26:	4b23      	ldr	r3, [pc, #140]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d32:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	491c      	ldr	r1, [pc, #112]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]
 8006d46:	e015      	b.n	8006d74 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d48:	4b1b      	ldr	r3, [pc, #108]	@ (8006db8 <HAL_RCC_OscConfig+0x284>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4e:	f7fd fb1d 	bl	800438c <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d56:	f7fd fb19 	bl	800438c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e207      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d68:	4b12      	ldr	r3, [pc, #72]	@ (8006db4 <HAL_RCC_OscConfig+0x280>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f0      	bne.n	8006d56 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d045      	beq.n	8006e0c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_RCC_OscConfig+0x266>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d004      	beq.n	8006d9a <HAL_RCC_OscConfig+0x266>
 8006d90:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8006d94:	4806      	ldr	r0, [pc, #24]	@ (8006db0 <HAL_RCC_OscConfig+0x27c>)
 8006d96:	f7fc fd99 	bl	80038cc <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01e      	beq.n	8006de0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <HAL_RCC_OscConfig+0x288>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da8:	f7fd faf0 	bl	800438c <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dae:	e010      	b.n	8006dd2 <HAL_RCC_OscConfig+0x29e>
 8006db0:	080151ac 	.word	0x080151ac
 8006db4:	40023800 	.word	0x40023800
 8006db8:	42470000 	.word	0x42470000
 8006dbc:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dc0:	f7fd fae4 	bl	800438c <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e1d2      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dd2:	4b5e      	ldr	r3, [pc, #376]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x28c>
 8006dde:	e015      	b.n	8006e0c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006de0:	4b5b      	ldr	r3, [pc, #364]	@ (8006f50 <HAL_RCC_OscConfig+0x41c>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de6:	f7fd fad1 	bl	800438c <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dee:	f7fd facd 	bl	800438c <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e1bb      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e00:	4b52      	ldr	r3, [pc, #328]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f0      	bne.n	8006dee <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80b0 	beq.w	8006f7a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00c      	beq.n	8006e40 <HAL_RCC_OscConfig+0x30c>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d008      	beq.n	8006e40 <HAL_RCC_OscConfig+0x30c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d004      	beq.n	8006e40 <HAL_RCC_OscConfig+0x30c>
 8006e36:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8006e3a:	4846      	ldr	r0, [pc, #280]	@ (8006f54 <HAL_RCC_OscConfig+0x420>)
 8006e3c:	f7fc fd46 	bl	80038cc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e40:	4b42      	ldr	r3, [pc, #264]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10f      	bne.n	8006e6c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	4b3e      	ldr	r3, [pc, #248]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e54:	4a3d      	ldr	r2, [pc, #244]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006f58 <HAL_RCC_OscConfig+0x424>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d118      	bne.n	8006eaa <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e78:	4b37      	ldr	r3, [pc, #220]	@ (8006f58 <HAL_RCC_OscConfig+0x424>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a36      	ldr	r2, [pc, #216]	@ (8006f58 <HAL_RCC_OscConfig+0x424>)
 8006e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e84:	f7fd fa82 	bl	800438c <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e8c:	f7fd fa7e 	bl	800438c <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e16c      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006f58 <HAL_RCC_OscConfig+0x424>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x38c>
 8006eb2:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb6:	4a25      	ldr	r2, [pc, #148]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ebe:	e01c      	b.n	8006efa <HAL_RCC_OscConfig+0x3c6>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d10c      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x3ae>
 8006ec8:	4b20      	ldr	r3, [pc, #128]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006ece:	f043 0304 	orr.w	r3, r3, #4
 8006ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ee0:	e00b      	b.n	8006efa <HAL_RCC_OscConfig+0x3c6>
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee6:	4a19      	ldr	r2, [pc, #100]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eee:	4b17      	ldr	r3, [pc, #92]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef2:	4a16      	ldr	r2, [pc, #88]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006ef4:	f023 0304 	bic.w	r3, r3, #4
 8006ef8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d015      	beq.n	8006f2e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f02:	f7fd fa43 	bl	800438c <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f08:	e00a      	b.n	8006f20 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f0a:	f7fd fa3f 	bl	800438c <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e12b      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f20:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <HAL_RCC_OscConfig+0x418>)
 8006f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0ee      	beq.n	8006f0a <HAL_RCC_OscConfig+0x3d6>
 8006f2c:	e01c      	b.n	8006f68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2e:	f7fd fa2d 	bl	800438c <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f34:	e012      	b.n	8006f5c <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f36:	f7fd fa29 	bl	800438c <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d909      	bls.n	8006f5c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e115      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	42470e80 	.word	0x42470e80
 8006f54:	080151ac 	.word	0x080151ac
 8006f58:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f5c:	4b88      	ldr	r3, [pc, #544]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e6      	bne.n	8006f36 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d105      	bne.n	8006f7a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f6e:	4b84      	ldr	r3, [pc, #528]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	4a83      	ldr	r2, [pc, #524]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 8006f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f78:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <HAL_RCC_OscConfig+0x468>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d008      	beq.n	8006f9c <HAL_RCC_OscConfig+0x468>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d004      	beq.n	8006f9c <HAL_RCC_OscConfig+0x468>
 8006f92:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8006f96:	487b      	ldr	r0, [pc, #492]	@ (8007184 <HAL_RCC_OscConfig+0x650>)
 8006f98:	f7fc fc98 	bl	80038cc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80e8 	beq.w	8007176 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fa6:	4b76      	ldr	r3, [pc, #472]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 030c 	and.w	r3, r3, #12
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	f000 80a9 	beq.w	8007106 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	f040 808d 	bne.w	80070d8 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_RCC_OscConfig+0x4a6>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fce:	d004      	beq.n	8006fda <HAL_RCC_OscConfig+0x4a6>
 8006fd0:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8006fd4:	486b      	ldr	r0, [pc, #428]	@ (8007184 <HAL_RCC_OscConfig+0x650>)
 8006fd6:	f7fc fc79 	bl	80038cc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d903      	bls.n	8006fea <HAL_RCC_OscConfig+0x4b6>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006fe8:	d904      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x4c0>
 8006fea:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8006fee:	4865      	ldr	r0, [pc, #404]	@ (8007184 <HAL_RCC_OscConfig+0x650>)
 8006ff0:	f7fc fc6c 	bl	80038cc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	2b31      	cmp	r3, #49	@ 0x31
 8006ffa:	d904      	bls.n	8007006 <HAL_RCC_OscConfig+0x4d2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8007004:	d904      	bls.n	8007010 <HAL_RCC_OscConfig+0x4dc>
 8007006:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800700a:	485e      	ldr	r0, [pc, #376]	@ (8007184 <HAL_RCC_OscConfig+0x650>)
 800700c:	f7fc fc5e 	bl	80038cc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	2b02      	cmp	r3, #2
 8007016:	d010      	beq.n	800703a <HAL_RCC_OscConfig+0x506>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	2b04      	cmp	r3, #4
 800701e:	d00c      	beq.n	800703a <HAL_RCC_OscConfig+0x506>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	2b06      	cmp	r3, #6
 8007026:	d008      	beq.n	800703a <HAL_RCC_OscConfig+0x506>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	2b08      	cmp	r3, #8
 800702e:	d004      	beq.n	800703a <HAL_RCC_OscConfig+0x506>
 8007030:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8007034:	4853      	ldr	r0, [pc, #332]	@ (8007184 <HAL_RCC_OscConfig+0x650>)
 8007036:	f7fc fc49 	bl	80038cc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d903      	bls.n	800704a <HAL_RCC_OscConfig+0x516>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d904      	bls.n	8007054 <HAL_RCC_OscConfig+0x520>
 800704a:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800704e:	484d      	ldr	r0, [pc, #308]	@ (8007184 <HAL_RCC_OscConfig+0x650>)
 8007050:	f7fc fc3c 	bl	80038cc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007054:	4b4c      	ldr	r3, [pc, #304]	@ (8007188 <HAL_RCC_OscConfig+0x654>)
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705a:	f7fd f997 	bl	800438c <HAL_GetTick>
 800705e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007060:	e008      	b.n	8007074 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007062:	f7fd f993 	bl	800438c <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d901      	bls.n	8007074 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e081      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007074:	4b42      	ldr	r3, [pc, #264]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f0      	bne.n	8007062 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	019b      	lsls	r3, r3, #6
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	3b01      	subs	r3, #1
 800709a:	041b      	lsls	r3, r3, #16
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a2:	061b      	lsls	r3, r3, #24
 80070a4:	4936      	ldr	r1, [pc, #216]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070aa:	4b37      	ldr	r3, [pc, #220]	@ (8007188 <HAL_RCC_OscConfig+0x654>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b0:	f7fd f96c 	bl	800438c <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b8:	f7fd f968 	bl	800438c <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e056      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f0      	beq.n	80070b8 <HAL_RCC_OscConfig+0x584>
 80070d6:	e04e      	b.n	8007176 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007188 <HAL_RCC_OscConfig+0x654>)
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070de:	f7fd f955 	bl	800438c <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e6:	f7fd f951 	bl	800438c <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e03f      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f8:	4b21      	ldr	r3, [pc, #132]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f0      	bne.n	80070e6 <HAL_RCC_OscConfig+0x5b2>
 8007104:	e037      	b.n	8007176 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e032      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007112:	4b1b      	ldr	r3, [pc, #108]	@ (8007180 <HAL_RCC_OscConfig+0x64c>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d028      	beq.n	8007172 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d121      	bne.n	8007172 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007138:	429a      	cmp	r2, r3
 800713a:	d11a      	bne.n	8007172 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007142:	4013      	ands	r3, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007148:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800714a:	4293      	cmp	r3, r2
 800714c:	d111      	bne.n	8007172 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	3b01      	subs	r3, #1
 800715c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800715e:	429a      	cmp	r2, r3
 8007160:	d107      	bne.n	8007172 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800716e:	429a      	cmp	r2, r3
 8007170:	d001      	beq.n	8007176 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40023800 	.word	0x40023800
 8007184:	080151ac 	.word	0x080151ac
 8007188:	42470060 	.word	0x42470060

0800718c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e174      	b.n	800748a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x24>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b0f      	cmp	r3, #15
 80071ae:	d904      	bls.n	80071ba <HAL_RCC_ClockConfig+0x2e>
 80071b0:	f240 215a 	movw	r1, #602	@ 0x25a
 80071b4:	487b      	ldr	r0, [pc, #492]	@ (80073a4 <HAL_RCC_ClockConfig+0x218>)
 80071b6:	f7fc fb89 	bl	80038cc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d019      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d016      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d013      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d010      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d00d      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b05      	cmp	r3, #5
 80071dc:	d00a      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b06      	cmp	r3, #6
 80071e2:	d007      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b07      	cmp	r3, #7
 80071e8:	d004      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x68>
 80071ea:	f240 215b 	movw	r1, #603	@ 0x25b
 80071ee:	486d      	ldr	r0, [pc, #436]	@ (80073a4 <HAL_RCC_ClockConfig+0x218>)
 80071f0:	f7fc fb6c 	bl	80038cc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071f4:	4b6c      	ldr	r3, [pc, #432]	@ (80073a8 <HAL_RCC_ClockConfig+0x21c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d90c      	bls.n	800721c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007202:	4b69      	ldr	r3, [pc, #420]	@ (80073a8 <HAL_RCC_ClockConfig+0x21c>)
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b67      	ldr	r3, [pc, #412]	@ (80073a8 <HAL_RCC_ClockConfig+0x21c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e136      	b.n	800748a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d049      	beq.n	80072bc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007234:	4b5d      	ldr	r3, [pc, #372]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	4a5c      	ldr	r2, [pc, #368]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 800723a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800723e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800724c:	4b57      	ldr	r3, [pc, #348]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4a56      	ldr	r2, [pc, #344]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 8007252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d024      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b80      	cmp	r3, #128	@ 0x80
 8007266:	d020      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b90      	cmp	r3, #144	@ 0x90
 800726e:	d01c      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2ba0      	cmp	r3, #160	@ 0xa0
 8007276:	d018      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2bb0      	cmp	r3, #176	@ 0xb0
 800727e:	d014      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2bc0      	cmp	r3, #192	@ 0xc0
 8007286:	d010      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2bd0      	cmp	r3, #208	@ 0xd0
 800728e:	d00c      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2be0      	cmp	r3, #224	@ 0xe0
 8007296:	d008      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2bf0      	cmp	r3, #240	@ 0xf0
 800729e:	d004      	beq.n	80072aa <HAL_RCC_ClockConfig+0x11e>
 80072a0:	f240 217e 	movw	r1, #638	@ 0x27e
 80072a4:	483f      	ldr	r0, [pc, #252]	@ (80073a4 <HAL_RCC_ClockConfig+0x218>)
 80072a6:	f7fc fb11 	bl	80038cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072aa:	4b40      	ldr	r3, [pc, #256]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	493d      	ldr	r1, [pc, #244]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d059      	beq.n	800737c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d010      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x166>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d00c      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x166>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d008      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x166>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d004      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x166>
 80072e8:	f240 2185 	movw	r1, #645	@ 0x285
 80072ec:	482d      	ldr	r0, [pc, #180]	@ (80073a4 <HAL_RCC_ClockConfig+0x218>)
 80072ee:	f7fc faed 	bl	80038cc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d107      	bne.n	800730a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fa:	4b2c      	ldr	r3, [pc, #176]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d119      	bne.n	800733a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e0bf      	b.n	800748a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d003      	beq.n	800731a <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007316:	2b03      	cmp	r3, #3
 8007318:	d107      	bne.n	800732a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731a:	4b24      	ldr	r3, [pc, #144]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e0af      	b.n	800748a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732a:	4b20      	ldr	r3, [pc, #128]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e0a7      	b.n	800748a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733a:	4b1c      	ldr	r3, [pc, #112]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 0203 	bic.w	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4919      	ldr	r1, [pc, #100]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 8007348:	4313      	orrs	r3, r2
 800734a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800734c:	f7fd f81e 	bl	800438c <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007352:	e00a      	b.n	800736a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007354:	f7fd f81a 	bl	800438c <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e08f      	b.n	800748a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736a:	4b10      	ldr	r3, [pc, #64]	@ (80073ac <HAL_RCC_ClockConfig+0x220>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 020c 	and.w	r2, r3, #12
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	429a      	cmp	r2, r3
 800737a:	d1eb      	bne.n	8007354 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <HAL_RCC_ClockConfig+0x21c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d212      	bcs.n	80073b0 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b07      	ldr	r3, [pc, #28]	@ (80073a8 <HAL_RCC_ClockConfig+0x21c>)
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007392:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <HAL_RCC_ClockConfig+0x21c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d007      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e072      	b.n	800748a <HAL_RCC_ClockConfig+0x2fe>
 80073a4:	080151ac 	.word	0x080151ac
 80073a8:	40023c00 	.word	0x40023c00
 80073ac:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d025      	beq.n	8007408 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d018      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x26a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073cc:	d013      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x26a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80073d6:	d00e      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x26a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80073e0:	d009      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x26a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80073ea:	d004      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x26a>
 80073ec:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80073f0:	4828      	ldr	r0, [pc, #160]	@ (8007494 <HAL_RCC_ClockConfig+0x308>)
 80073f2:	f7fc fa6b 	bl	80038cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073f6:	4b28      	ldr	r3, [pc, #160]	@ (8007498 <HAL_RCC_ClockConfig+0x30c>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	4925      	ldr	r1, [pc, #148]	@ (8007498 <HAL_RCC_ClockConfig+0x30c>)
 8007404:	4313      	orrs	r3, r2
 8007406:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d026      	beq.n	8007462 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d018      	beq.n	800744e <HAL_RCC_ClockConfig+0x2c2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007424:	d013      	beq.n	800744e <HAL_RCC_ClockConfig+0x2c2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800742e:	d00e      	beq.n	800744e <HAL_RCC_ClockConfig+0x2c2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8007438:	d009      	beq.n	800744e <HAL_RCC_ClockConfig+0x2c2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8007442:	d004      	beq.n	800744e <HAL_RCC_ClockConfig+0x2c2>
 8007444:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8007448:	4812      	ldr	r0, [pc, #72]	@ (8007494 <HAL_RCC_ClockConfig+0x308>)
 800744a:	f7fc fa3f 	bl	80038cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800744e:	4b12      	ldr	r3, [pc, #72]	@ (8007498 <HAL_RCC_ClockConfig+0x30c>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	490e      	ldr	r1, [pc, #56]	@ (8007498 <HAL_RCC_ClockConfig+0x30c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007462:	f000 f821 	bl	80074a8 <HAL_RCC_GetSysClockFreq>
 8007466:	4602      	mov	r2, r0
 8007468:	4b0b      	ldr	r3, [pc, #44]	@ (8007498 <HAL_RCC_ClockConfig+0x30c>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	091b      	lsrs	r3, r3, #4
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	490a      	ldr	r1, [pc, #40]	@ (800749c <HAL_RCC_ClockConfig+0x310>)
 8007474:	5ccb      	ldrb	r3, [r1, r3]
 8007476:	fa22 f303 	lsr.w	r3, r2, r3
 800747a:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <HAL_RCC_ClockConfig+0x314>)
 800747c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800747e:	4b09      	ldr	r3, [pc, #36]	@ (80074a4 <HAL_RCC_ClockConfig+0x318>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f7fc fb3c 	bl	8003b00 <HAL_InitTick>

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	080151ac 	.word	0x080151ac
 8007498:	40023800 	.word	0x40023800
 800749c:	08015400 	.word	0x08015400
 80074a0:	20000000 	.word	0x20000000
 80074a4:	20000004 	.word	0x20000004

080074a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074ac:	b090      	sub	sp, #64	@ 0x40
 80074ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074c0:	4b59      	ldr	r3, [pc, #356]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x180>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 030c 	and.w	r3, r3, #12
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d00d      	beq.n	80074e8 <HAL_RCC_GetSysClockFreq+0x40>
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	f200 80a1 	bhi.w	8007614 <HAL_RCC_GetSysClockFreq+0x16c>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_RCC_GetSysClockFreq+0x34>
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d003      	beq.n	80074e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80074da:	e09b      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074dc:	4b53      	ldr	r3, [pc, #332]	@ (800762c <HAL_RCC_GetSysClockFreq+0x184>)
 80074de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074e0:	e09b      	b.n	800761a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074e2:	4b53      	ldr	r3, [pc, #332]	@ (8007630 <HAL_RCC_GetSysClockFreq+0x188>)
 80074e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074e6:	e098      	b.n	800761a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074e8:	4b4f      	ldr	r3, [pc, #316]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x180>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074f2:	4b4d      	ldr	r3, [pc, #308]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x180>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d028      	beq.n	8007550 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x180>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	099b      	lsrs	r3, r3, #6
 8007504:	2200      	movs	r2, #0
 8007506:	623b      	str	r3, [r7, #32]
 8007508:	627a      	str	r2, [r7, #36]	@ 0x24
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007510:	2100      	movs	r1, #0
 8007512:	4b47      	ldr	r3, [pc, #284]	@ (8007630 <HAL_RCC_GetSysClockFreq+0x188>)
 8007514:	fb03 f201 	mul.w	r2, r3, r1
 8007518:	2300      	movs	r3, #0
 800751a:	fb00 f303 	mul.w	r3, r0, r3
 800751e:	4413      	add	r3, r2
 8007520:	4a43      	ldr	r2, [pc, #268]	@ (8007630 <HAL_RCC_GetSysClockFreq+0x188>)
 8007522:	fba0 1202 	umull	r1, r2, r0, r2
 8007526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007528:	460a      	mov	r2, r1
 800752a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800752c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800752e:	4413      	add	r3, r2
 8007530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007534:	2200      	movs	r2, #0
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	61fa      	str	r2, [r7, #28]
 800753a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800753e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007542:	f7f9 fb91 	bl	8000c68 <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4613      	mov	r3, r2
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800754e:	e053      	b.n	80075f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007550:	4b35      	ldr	r3, [pc, #212]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x180>)
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	099b      	lsrs	r3, r3, #6
 8007556:	2200      	movs	r2, #0
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	617a      	str	r2, [r7, #20]
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007562:	f04f 0b00 	mov.w	fp, #0
 8007566:	4652      	mov	r2, sl
 8007568:	465b      	mov	r3, fp
 800756a:	f04f 0000 	mov.w	r0, #0
 800756e:	f04f 0100 	mov.w	r1, #0
 8007572:	0159      	lsls	r1, r3, #5
 8007574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007578:	0150      	lsls	r0, r2, #5
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	ebb2 080a 	subs.w	r8, r2, sl
 8007582:	eb63 090b 	sbc.w	r9, r3, fp
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007592:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007596:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800759a:	ebb2 0408 	subs.w	r4, r2, r8
 800759e:	eb63 0509 	sbc.w	r5, r3, r9
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	00eb      	lsls	r3, r5, #3
 80075ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075b0:	00e2      	lsls	r2, r4, #3
 80075b2:	4614      	mov	r4, r2
 80075b4:	461d      	mov	r5, r3
 80075b6:	eb14 030a 	adds.w	r3, r4, sl
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	eb45 030b 	adc.w	r3, r5, fp
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075ce:	4629      	mov	r1, r5
 80075d0:	028b      	lsls	r3, r1, #10
 80075d2:	4621      	mov	r1, r4
 80075d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075d8:	4621      	mov	r1, r4
 80075da:	028a      	lsls	r2, r1, #10
 80075dc:	4610      	mov	r0, r2
 80075de:	4619      	mov	r1, r3
 80075e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e2:	2200      	movs	r2, #0
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	60fa      	str	r2, [r7, #12]
 80075e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075ec:	f7f9 fb3c 	bl	8000c68 <__aeabi_uldivmod>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4613      	mov	r3, r2
 80075f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80075f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x180>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	3301      	adds	r3, #1
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007608:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007610:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007612:	e002      	b.n	800761a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007614:	4b05      	ldr	r3, [pc, #20]	@ (800762c <HAL_RCC_GetSysClockFreq+0x184>)
 8007616:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800761c:	4618      	mov	r0, r3
 800761e:	3740      	adds	r7, #64	@ 0x40
 8007620:	46bd      	mov	sp, r7
 8007622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007626:	bf00      	nop
 8007628:	40023800 	.word	0x40023800
 800762c:	00f42400 	.word	0x00f42400
 8007630:	017d7840 	.word	0x017d7840

08007634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007638:	4b03      	ldr	r3, [pc, #12]	@ (8007648 <HAL_RCC_GetHCLKFreq+0x14>)
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	4618      	mov	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000000 	.word	0x20000000

0800764c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007650:	f7ff fff0 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8007654:	4602      	mov	r2, r0
 8007656:	4b05      	ldr	r3, [pc, #20]	@ (800766c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	0a9b      	lsrs	r3, r3, #10
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	4903      	ldr	r1, [pc, #12]	@ (8007670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007662:	5ccb      	ldrb	r3, [r1, r3]
 8007664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40023800 	.word	0x40023800
 8007670:	08015410 	.word	0x08015410

08007674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007678:	f7ff ffdc 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 800767c:	4602      	mov	r2, r0
 800767e:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	0b5b      	lsrs	r3, r3, #13
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	4903      	ldr	r1, [pc, #12]	@ (8007698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800768a:	5ccb      	ldrb	r3, [r1, r3]
 800768c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40023800 	.word	0x40023800
 8007698:	08015410 	.word	0x08015410

0800769c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	220f      	movs	r2, #15
 80076aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076ac:	4b12      	ldr	r3, [pc, #72]	@ (80076f8 <HAL_RCC_GetClockConfig+0x5c>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0203 	and.w	r2, r3, #3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076b8:	4b0f      	ldr	r3, [pc, #60]	@ (80076f8 <HAL_RCC_GetClockConfig+0x5c>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076c4:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <HAL_RCC_GetClockConfig+0x5c>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80076d0:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <HAL_RCC_GetClockConfig+0x5c>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	08db      	lsrs	r3, r3, #3
 80076d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076de:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <HAL_RCC_GetClockConfig+0x60>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0207 	and.w	r2, r3, #7
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	601a      	str	r2, [r3, #0]
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800
 80076fc:	40023c00 	.word	0x40023c00

08007700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e18c      	b.n	8007a2c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a75      	ldr	r2, [pc, #468]	@ (80078ec <HAL_SPI_Init+0x1ec>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_SPI_Init+0x4e>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a73      	ldr	r2, [pc, #460]	@ (80078f0 <HAL_SPI_Init+0x1f0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_SPI_Init+0x4e>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a72      	ldr	r2, [pc, #456]	@ (80078f4 <HAL_SPI_Init+0x1f4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_SPI_Init+0x4e>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a70      	ldr	r2, [pc, #448]	@ (80078f8 <HAL_SPI_Init+0x1f8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_SPI_Init+0x4e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6f      	ldr	r2, [pc, #444]	@ (80078fc <HAL_SPI_Init+0x1fc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_SPI_Init+0x4e>
 8007744:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8007748:	486d      	ldr	r0, [pc, #436]	@ (8007900 <HAL_SPI_Init+0x200>)
 800774a:	f7fc f8bf 	bl	80038cc <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <HAL_SPI_Init+0x6a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800775e:	d004      	beq.n	800776a <HAL_SPI_Init+0x6a>
 8007760:	f240 1141 	movw	r1, #321	@ 0x141
 8007764:	4866      	ldr	r0, [pc, #408]	@ (8007900 <HAL_SPI_Init+0x200>)
 8007766:	f7fc f8b1 	bl	80038cc <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <HAL_SPI_Init+0x90>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800777a:	d009      	beq.n	8007790 <HAL_SPI_Init+0x90>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007784:	d004      	beq.n	8007790 <HAL_SPI_Init+0x90>
 8007786:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800778a:	485d      	ldr	r0, [pc, #372]	@ (8007900 <HAL_SPI_Init+0x200>)
 800778c:	f7fc f89e 	bl	80038cc <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007798:	d008      	beq.n	80077ac <HAL_SPI_Init+0xac>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <HAL_SPI_Init+0xac>
 80077a2:	f240 1143 	movw	r1, #323	@ 0x143
 80077a6:	4856      	ldr	r0, [pc, #344]	@ (8007900 <HAL_SPI_Init+0x200>)
 80077a8:	f7fc f890 	bl	80038cc <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b4:	d00d      	beq.n	80077d2 <HAL_SPI_Init+0xd2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <HAL_SPI_Init+0xd2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077c6:	d004      	beq.n	80077d2 <HAL_SPI_Init+0xd2>
 80077c8:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80077cc:	484c      	ldr	r0, [pc, #304]	@ (8007900 <HAL_SPI_Init+0x200>)
 80077ce:	f7fc f87d 	bl	80038cc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d020      	beq.n	800781c <HAL_SPI_Init+0x11c>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d01c      	beq.n	800781c <HAL_SPI_Init+0x11c>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	2b10      	cmp	r3, #16
 80077e8:	d018      	beq.n	800781c <HAL_SPI_Init+0x11c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	2b18      	cmp	r3, #24
 80077f0:	d014      	beq.n	800781c <HAL_SPI_Init+0x11c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d010      	beq.n	800781c <HAL_SPI_Init+0x11c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	2b28      	cmp	r3, #40	@ 0x28
 8007800:	d00c      	beq.n	800781c <HAL_SPI_Init+0x11c>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	2b30      	cmp	r3, #48	@ 0x30
 8007808:	d008      	beq.n	800781c <HAL_SPI_Init+0x11c>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	2b38      	cmp	r3, #56	@ 0x38
 8007810:	d004      	beq.n	800781c <HAL_SPI_Init+0x11c>
 8007812:	f240 1145 	movw	r1, #325	@ 0x145
 8007816:	483a      	ldr	r0, [pc, #232]	@ (8007900 <HAL_SPI_Init+0x200>)
 8007818:	f7fc f858 	bl	80038cc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d008      	beq.n	8007836 <HAL_SPI_Init+0x136>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	2b80      	cmp	r3, #128	@ 0x80
 800782a:	d004      	beq.n	8007836 <HAL_SPI_Init+0x136>
 800782c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8007830:	4833      	ldr	r0, [pc, #204]	@ (8007900 <HAL_SPI_Init+0x200>)
 8007832:	f7fc f84b 	bl	80038cc <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <HAL_SPI_Init+0x150>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007842:	2b10      	cmp	r3, #16
 8007844:	d004      	beq.n	8007850 <HAL_SPI_Init+0x150>
 8007846:	f240 1147 	movw	r1, #327	@ 0x147
 800784a:	482d      	ldr	r0, [pc, #180]	@ (8007900 <HAL_SPI_Init+0x200>)
 800784c:	f7fc f83e 	bl	80038cc <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d155      	bne.n	8007904 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d008      	beq.n	8007872 <HAL_SPI_Init+0x172>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d004      	beq.n	8007872 <HAL_SPI_Init+0x172>
 8007868:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800786c:	4824      	ldr	r0, [pc, #144]	@ (8007900 <HAL_SPI_Init+0x200>)
 800786e:	f7fc f82d 	bl	80038cc <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d008      	beq.n	800788c <HAL_SPI_Init+0x18c>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d004      	beq.n	800788c <HAL_SPI_Init+0x18c>
 8007882:	f240 114b 	movw	r1, #331	@ 0x14b
 8007886:	481e      	ldr	r0, [pc, #120]	@ (8007900 <HAL_SPI_Init+0x200>)
 8007888:	f7fc f820 	bl	80038cc <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007894:	d125      	bne.n	80078e2 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d05d      	beq.n	800795a <HAL_SPI_Init+0x25a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d059      	beq.n	800795a <HAL_SPI_Init+0x25a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	2b10      	cmp	r3, #16
 80078ac:	d055      	beq.n	800795a <HAL_SPI_Init+0x25a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	2b18      	cmp	r3, #24
 80078b4:	d051      	beq.n	800795a <HAL_SPI_Init+0x25a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d04d      	beq.n	800795a <HAL_SPI_Init+0x25a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	2b28      	cmp	r3, #40	@ 0x28
 80078c4:	d049      	beq.n	800795a <HAL_SPI_Init+0x25a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	2b30      	cmp	r3, #48	@ 0x30
 80078cc:	d045      	beq.n	800795a <HAL_SPI_Init+0x25a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	2b38      	cmp	r3, #56	@ 0x38
 80078d4:	d041      	beq.n	800795a <HAL_SPI_Init+0x25a>
 80078d6:	f240 114f 	movw	r1, #335	@ 0x14f
 80078da:	4809      	ldr	r0, [pc, #36]	@ (8007900 <HAL_SPI_Init+0x200>)
 80078dc:	f7fb fff6 	bl	80038cc <assert_failed>
 80078e0:	e03b      	b.n	800795a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	61da      	str	r2, [r3, #28]
 80078e8:	e037      	b.n	800795a <HAL_SPI_Init+0x25a>
 80078ea:	bf00      	nop
 80078ec:	40013000 	.word	0x40013000
 80078f0:	40003800 	.word	0x40003800
 80078f4:	40003c00 	.word	0x40003c00
 80078f8:	40013400 	.word	0x40013400
 80078fc:	40015000 	.word	0x40015000
 8007900:	080151e4 	.word	0x080151e4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d020      	beq.n	800794e <HAL_SPI_Init+0x24e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d01c      	beq.n	800794e <HAL_SPI_Init+0x24e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	2b10      	cmp	r3, #16
 800791a:	d018      	beq.n	800794e <HAL_SPI_Init+0x24e>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	2b18      	cmp	r3, #24
 8007922:	d014      	beq.n	800794e <HAL_SPI_Init+0x24e>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	2b20      	cmp	r3, #32
 800792a:	d010      	beq.n	800794e <HAL_SPI_Init+0x24e>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	2b28      	cmp	r3, #40	@ 0x28
 8007932:	d00c      	beq.n	800794e <HAL_SPI_Init+0x24e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	2b30      	cmp	r3, #48	@ 0x30
 800793a:	d008      	beq.n	800794e <HAL_SPI_Init+0x24e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	2b38      	cmp	r3, #56	@ 0x38
 8007942:	d004      	beq.n	800794e <HAL_SPI_Init+0x24e>
 8007944:	f240 1159 	movw	r1, #345	@ 0x159
 8007948:	483a      	ldr	r0, [pc, #232]	@ (8007a34 <HAL_SPI_Init+0x334>)
 800794a:	f7fb ffbf 	bl	80038cc <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d106      	bne.n	800797a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7fb ffeb 	bl	8003950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2202      	movs	r2, #2
 800797e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007990:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079de:	ea42 0103 	orr.w	r1, r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	0c1b      	lsrs	r3, r3, #16
 80079f8:	f003 0104 	and.w	r1, r3, #4
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	f003 0210 	and.w	r2, r3, #16
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69da      	ldr	r2, [r3, #28]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	080151e4 	.word	0x080151e4

08007a38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	@ 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a46:	2301      	movs	r3, #1
 8007a48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x24>
 8007a52:	f240 417e 	movw	r1, #1150	@ 0x47e
 8007a56:	4884      	ldr	r0, [pc, #528]	@ (8007c68 <HAL_SPI_TransmitReceive+0x230>)
 8007a58:	f7fb ff38 	bl	80038cc <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a5c:	f7fc fc96 	bl	800438c <HAL_GetTick>
 8007a60:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a68:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007a70:	887b      	ldrh	r3, [r7, #2]
 8007a72:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a74:	7ffb      	ldrb	r3, [r7, #31]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d00c      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x5c>
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a80:	d106      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x58>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x58>
 8007a8a:	7ffb      	ldrb	r3, [r7, #31]
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d001      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x5c>
  {
    return HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
 8007a92:	e182      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x362>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x6e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x6e>
 8007aa0:	887b      	ldrh	r3, [r7, #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_SPI_TransmitReceive+0x72>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e177      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x362>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_SPI_TransmitReceive+0x80>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e170      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x362>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d003      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2205      	movs	r2, #5
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	887a      	ldrh	r2, [r7, #2]
 8007ae4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	887a      	ldrh	r2, [r7, #2]
 8007aea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	887a      	ldrh	r2, [r7, #2]
 8007af6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b14:	2b40      	cmp	r3, #64	@ 0x40
 8007b16:	d007      	beq.n	8007b28 <HAL_SPI_TransmitReceive+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b30:	d17e      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x1f8>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_SPI_TransmitReceive+0x108>
 8007b3a:	8afb      	ldrh	r3, [r7, #22]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d16c      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x1e2>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b44:	881a      	ldrh	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b50:	1c9a      	adds	r2, r3, #2
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b64:	e059      	b.n	8007c1a <HAL_SPI_TransmitReceive+0x1e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d11b      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x174>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d016      	beq.n	8007bac <HAL_SPI_TransmitReceive+0x174>
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d113      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x174>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b88:	881a      	ldrh	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b94:	1c9a      	adds	r2, r3, #2
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d119      	bne.n	8007bee <HAL_SPI_TransmitReceive+0x1b6>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d014      	beq.n	8007bee <HAL_SPI_TransmitReceive+0x1b6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bce:	b292      	uxth	r2, r2
 8007bd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	1c9a      	adds	r2, r3, #2
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bea:	2301      	movs	r3, #1
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bee:	f7fc fbcd 	bl	800438c <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d80d      	bhi.n	8007c1a <HAL_SPI_TransmitReceive+0x1e2>
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c04:	d009      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x1e2>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e0bf      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1a0      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x12e>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d19b      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x12e>
 8007c2e:	e085      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x304>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x206>
 8007c38:	8afb      	ldrh	r3, [r7, #22]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d174      	bne.n	8007d28 <HAL_SPI_TransmitReceive+0x2f0>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	330c      	adds	r3, #12
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c64:	e060      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x2f0>
 8007c66:	bf00      	nop
 8007c68:	080151e4 	.word	0x080151e4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d11c      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x27c>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d017      	beq.n	8007cb4 <HAL_SPI_TransmitReceive+0x27c>
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d114      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x27c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	7812      	ldrb	r2, [r2, #0]
 8007c96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d119      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x2be>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d014      	beq.n	8007cf6 <HAL_SPI_TransmitReceive+0x2be>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cf6:	f7fc fb49 	bl	800438c <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d803      	bhi.n	8007d0e <HAL_SPI_TransmitReceive+0x2d6>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d0c:	d102      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x2dc>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e038      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d19c      	bne.n	8007c6c <HAL_SPI_TransmitReceive+0x234>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d197      	bne.n	8007c6c <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f8b7 	bl	8007eb4 <SPI_EndRxTxTransaction>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <HAL_SPI_TransmitReceive+0x326>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e01d      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x362>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <HAL_SPI_TransmitReceive+0x344>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <HAL_SPI_TransmitReceive+0x360>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x362>
  }
  else
  {
    return HAL_OK;
 8007d98:	2300      	movs	r3, #0
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3728      	adds	r7, #40	@ 0x28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop

08007da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007db4:	f7fc faea 	bl	800438c <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007dc4:	f7fc fae2 	bl	800438c <HAL_GetTick>
 8007dc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dca:	4b39      	ldr	r3, [pc, #228]	@ (8007eb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	015b      	lsls	r3, r3, #5
 8007dd0:	0d1b      	lsrs	r3, r3, #20
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dda:	e054      	b.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007de2:	d050      	beq.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007de4:	f7fc fad2 	bl	800438c <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d902      	bls.n	8007dfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d13d      	bne.n	8007e76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e12:	d111      	bne.n	8007e38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e1c:	d004      	beq.n	8007e28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e26:	d107      	bne.n	8007e38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e40:	d10f      	bne.n	8007e62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e017      	b.n	8007ea6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	bf0c      	ite	eq
 8007e96:	2301      	moveq	r3, #1
 8007e98:	2300      	movne	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d19b      	bne.n	8007ddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000000 	.word	0x20000000

08007eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	2102      	movs	r1, #2
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff ff6a 	bl	8007da4 <SPI_WaitFlagStateUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eda:	f043 0220 	orr.w	r2, r3, #32
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e032      	b.n	8007f4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f54 <SPI_EndRxTxTransaction+0xa0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a1b      	ldr	r2, [pc, #108]	@ (8007f58 <SPI_EndRxTxTransaction+0xa4>)
 8007eec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef0:	0d5b      	lsrs	r3, r3, #21
 8007ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ef6:	fb02 f303 	mul.w	r3, r2, r3
 8007efa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f04:	d112      	bne.n	8007f2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2180      	movs	r1, #128	@ 0x80
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff ff47 	bl	8007da4 <SPI_WaitFlagStateUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d016      	beq.n	8007f4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f20:	f043 0220 	orr.w	r2, r3, #32
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e00f      	b.n	8007f4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f42:	2b80      	cmp	r3, #128	@ 0x80
 8007f44:	d0f2      	beq.n	8007f2c <SPI_EndRxTxTransaction+0x78>
 8007f46:	e000      	b.n	8007f4a <SPI_EndRxTxTransaction+0x96>
        break;
 8007f48:	bf00      	nop
  }

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000000 	.word	0x20000000
 8007f58:	165e9f81 	.word	0x165e9f81

08007f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e0cf      	b.n	800810e <HAL_TIM_Base_Init+0x1b2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a69      	ldr	r2, [pc, #420]	@ (8008118 <HAL_TIM_Base_Init+0x1bc>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d027      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f80:	d022      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a65      	ldr	r2, [pc, #404]	@ (800811c <HAL_TIM_Base_Init+0x1c0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a63      	ldr	r2, [pc, #396]	@ (8008120 <HAL_TIM_Base_Init+0x1c4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a62      	ldr	r2, [pc, #392]	@ (8008124 <HAL_TIM_Base_Init+0x1c8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a60      	ldr	r2, [pc, #384]	@ (8008128 <HAL_TIM_Base_Init+0x1cc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a5f      	ldr	r2, [pc, #380]	@ (800812c <HAL_TIM_Base_Init+0x1d0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8008130 <HAL_TIM_Base_Init+0x1d4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIM_Base_Init+0x6c>
 8007fbe:	f240 1113 	movw	r1, #275	@ 0x113
 8007fc2:	485c      	ldr	r0, [pc, #368]	@ (8008134 <HAL_TIM_Base_Init+0x1d8>)
 8007fc4:	f7fb fc82 	bl	80038cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d014      	beq.n	8007ffa <HAL_TIM_Base_Init+0x9e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	2b10      	cmp	r3, #16
 8007fd6:	d010      	beq.n	8007ffa <HAL_TIM_Base_Init+0x9e>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d00c      	beq.n	8007ffa <HAL_TIM_Base_Init+0x9e>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2b40      	cmp	r3, #64	@ 0x40
 8007fe6:	d008      	beq.n	8007ffa <HAL_TIM_Base_Init+0x9e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b60      	cmp	r3, #96	@ 0x60
 8007fee:	d004      	beq.n	8007ffa <HAL_TIM_Base_Init+0x9e>
 8007ff0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8007ff4:	484f      	ldr	r0, [pc, #316]	@ (8008134 <HAL_TIM_Base_Init+0x1d8>)
 8007ff6:	f7fb fc69 	bl	80038cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <HAL_TIM_Base_Init+0xc4>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800800a:	d009      	beq.n	8008020 <HAL_TIM_Base_Init+0xc4>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008014:	d004      	beq.n	8008020 <HAL_TIM_Base_Init+0xc4>
 8008016:	f240 1115 	movw	r1, #277	@ 0x115
 800801a:	4846      	ldr	r0, [pc, #280]	@ (8008134 <HAL_TIM_Base_Init+0x1d8>)
 800801c:	f7fb fc56 	bl	80038cc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008028:	d004      	beq.n	8008034 <HAL_TIM_Base_Init+0xd8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a3d      	ldr	r2, [pc, #244]	@ (8008124 <HAL_TIM_Base_Init+0x1c8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d107      	bne.n	8008044 <HAL_TIM_Base_Init+0xe8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bf14      	ite	ne
 800803c:	2301      	movne	r3, #1
 800803e:	2300      	moveq	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	e00e      	b.n	8008062 <HAL_TIM_Base_Init+0x106>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d006      	beq.n	800805a <HAL_TIM_Base_Init+0xfe>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008054:	d201      	bcs.n	800805a <HAL_TIM_Base_Init+0xfe>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <HAL_TIM_Base_Init+0x100>
 800805a:	2300      	movs	r3, #0
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <HAL_TIM_Base_Init+0x114>
 8008066:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800806a:	4832      	ldr	r0, [pc, #200]	@ (8008134 <HAL_TIM_Base_Init+0x1d8>)
 800806c:	f7fb fc2e 	bl	80038cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d008      	beq.n	800808a <HAL_TIM_Base_Init+0x12e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b80      	cmp	r3, #128	@ 0x80
 800807e:	d004      	beq.n	800808a <HAL_TIM_Base_Init+0x12e>
 8008080:	f240 1117 	movw	r1, #279	@ 0x117
 8008084:	482b      	ldr	r0, [pc, #172]	@ (8008134 <HAL_TIM_Base_Init+0x1d8>)
 8008086:	f7fb fc21 	bl	80038cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_TIM_Base_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fb ff26 	bl	8003ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f000 f9e8 	bl	800848c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40010000 	.word	0x40010000
 800811c:	40000400 	.word	0x40000400
 8008120:	40000800 	.word	0x40000800
 8008124:	40000c00 	.word	0x40000c00
 8008128:	40014000 	.word	0x40014000
 800812c:	40014400 	.word	0x40014400
 8008130:	40014800 	.word	0x40014800
 8008134:	0801521c 	.word	0x0801521c

08008138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a3d      	ldr	r2, [pc, #244]	@ (800823c <HAL_TIM_Base_Start_IT+0x104>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d027      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008152:	d022      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a39      	ldr	r2, [pc, #228]	@ (8008240 <HAL_TIM_Base_Start_IT+0x108>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d01d      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a38      	ldr	r2, [pc, #224]	@ (8008244 <HAL_TIM_Base_Start_IT+0x10c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d018      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a36      	ldr	r2, [pc, #216]	@ (8008248 <HAL_TIM_Base_Start_IT+0x110>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d013      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a35      	ldr	r2, [pc, #212]	@ (800824c <HAL_TIM_Base_Start_IT+0x114>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00e      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a33      	ldr	r2, [pc, #204]	@ (8008250 <HAL_TIM_Base_Start_IT+0x118>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d009      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a32      	ldr	r2, [pc, #200]	@ (8008254 <HAL_TIM_Base_Start_IT+0x11c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <HAL_TIM_Base_Start_IT+0x62>
 8008190:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8008194:	4830      	ldr	r0, [pc, #192]	@ (8008258 <HAL_TIM_Base_Start_IT+0x120>)
 8008196:	f7fb fb99 	bl	80038cc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d001      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e044      	b.n	8008234 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1d      	ldr	r2, [pc, #116]	@ (800823c <HAL_TIM_Base_Start_IT+0x104>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d018      	beq.n	80081fe <HAL_TIM_Base_Start_IT+0xc6>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d4:	d013      	beq.n	80081fe <HAL_TIM_Base_Start_IT+0xc6>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a19      	ldr	r2, [pc, #100]	@ (8008240 <HAL_TIM_Base_Start_IT+0x108>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00e      	beq.n	80081fe <HAL_TIM_Base_Start_IT+0xc6>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a17      	ldr	r2, [pc, #92]	@ (8008244 <HAL_TIM_Base_Start_IT+0x10c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d009      	beq.n	80081fe <HAL_TIM_Base_Start_IT+0xc6>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a16      	ldr	r2, [pc, #88]	@ (8008248 <HAL_TIM_Base_Start_IT+0x110>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d004      	beq.n	80081fe <HAL_TIM_Base_Start_IT+0xc6>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a14      	ldr	r2, [pc, #80]	@ (800824c <HAL_TIM_Base_Start_IT+0x114>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d111      	bne.n	8008222 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b06      	cmp	r3, #6
 800820e:	d010      	beq.n	8008232 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008220:	e007      	b.n	8008232 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0201 	orr.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40010000 	.word	0x40010000
 8008240:	40000400 	.word	0x40000400
 8008244:	40000800 	.word	0x40000800
 8008248:	40000c00 	.word	0x40000c00
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800
 8008258:	0801521c 	.word	0x0801521c

0800825c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d020      	beq.n	80082c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01b      	beq.n	80082c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f06f 0202 	mvn.w	r2, #2
 8008290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8d2 	bl	8008450 <HAL_TIM_IC_CaptureCallback>
 80082ac:	e005      	b.n	80082ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f8c4 	bl	800843c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8d5 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d020      	beq.n	800830c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01b      	beq.n	800830c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f06f 0204 	mvn.w	r2, #4
 80082dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2202      	movs	r2, #2
 80082e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f8ac 	bl	8008450 <HAL_TIM_IC_CaptureCallback>
 80082f8:	e005      	b.n	8008306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f89e 	bl	800843c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f8af 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f003 0308 	and.w	r3, r3, #8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d020      	beq.n	8008358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01b      	beq.n	8008358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f06f 0208 	mvn.w	r2, #8
 8008328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2204      	movs	r2, #4
 800832e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f886 	bl	8008450 <HAL_TIM_IC_CaptureCallback>
 8008344:	e005      	b.n	8008352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f878 	bl	800843c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f889 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	2b00      	cmp	r3, #0
 8008360:	d020      	beq.n	80083a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01b      	beq.n	80083a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0210 	mvn.w	r2, #16
 8008374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2208      	movs	r2, #8
 800837a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f860 	bl	8008450 <HAL_TIM_IC_CaptureCallback>
 8008390:	e005      	b.n	800839e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f852 	bl	800843c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f863 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00c      	beq.n	80083c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0201 	mvn.w	r2, #1
 80083c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7fb fa6a 	bl	800389c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80083e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f8e6 	bl	80085b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00c      	beq.n	8008410 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d007      	beq.n	8008410 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f834 	bl	8008478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00c      	beq.n	8008434 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d007      	beq.n	8008434 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f06f 0220 	mvn.w	r2, #32
 800842c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f8b8 	bl	80085a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008434:	bf00      	nop
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3a      	ldr	r2, [pc, #232]	@ (8008588 <TIM_Base_SetConfig+0xfc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00f      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084aa:	d00b      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a37      	ldr	r2, [pc, #220]	@ (800858c <TIM_Base_SetConfig+0x100>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d007      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a36      	ldr	r2, [pc, #216]	@ (8008590 <TIM_Base_SetConfig+0x104>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d003      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a35      	ldr	r2, [pc, #212]	@ (8008594 <TIM_Base_SetConfig+0x108>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d108      	bne.n	80084d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2b      	ldr	r2, [pc, #172]	@ (8008588 <TIM_Base_SetConfig+0xfc>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01b      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084e4:	d017      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a28      	ldr	r2, [pc, #160]	@ (800858c <TIM_Base_SetConfig+0x100>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d013      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a27      	ldr	r2, [pc, #156]	@ (8008590 <TIM_Base_SetConfig+0x104>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00f      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a26      	ldr	r2, [pc, #152]	@ (8008594 <TIM_Base_SetConfig+0x108>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00b      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a25      	ldr	r2, [pc, #148]	@ (8008598 <TIM_Base_SetConfig+0x10c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d007      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a24      	ldr	r2, [pc, #144]	@ (800859c <TIM_Base_SetConfig+0x110>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d003      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a23      	ldr	r2, [pc, #140]	@ (80085a0 <TIM_Base_SetConfig+0x114>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d108      	bne.n	8008528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800851c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a0e      	ldr	r2, [pc, #56]	@ (8008588 <TIM_Base_SetConfig+0xfc>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d103      	bne.n	800855c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	691a      	ldr	r2, [r3, #16]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b01      	cmp	r3, #1
 800856c:	d105      	bne.n	800857a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f023 0201 	bic.w	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	611a      	str	r2, [r3, #16]
  }
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40010000 	.word	0x40010000
 800858c:	40000400 	.word	0x40000400
 8008590:	40000800 	.word	0x40000800
 8008594:	40000c00 	.word	0x40000c00
 8008598:	40014000 	.word	0x40014000
 800859c:	40014400 	.word	0x40014400
 80085a0:	40014800 	.word	0x40014800

080085a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e0a3      	b.n	8008726 <HAL_UART_Init+0x15a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d02c      	beq.n	8008640 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a51      	ldr	r2, [pc, #324]	@ (8008730 <HAL_UART_Init+0x164>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00e      	beq.n	800860e <HAL_UART_Init+0x42>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a4f      	ldr	r2, [pc, #316]	@ (8008734 <HAL_UART_Init+0x168>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d009      	beq.n	800860e <HAL_UART_Init+0x42>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008738 <HAL_UART_Init+0x16c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d004      	beq.n	800860e <HAL_UART_Init+0x42>
 8008604:	f240 1173 	movw	r1, #371	@ 0x173
 8008608:	484c      	ldr	r0, [pc, #304]	@ (800873c <HAL_UART_Init+0x170>)
 800860a:	f7fb f95f 	bl	80038cc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d028      	beq.n	8008668 <HAL_UART_Init+0x9c>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800861e:	d023      	beq.n	8008668 <HAL_UART_Init+0x9c>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008628:	d01e      	beq.n	8008668 <HAL_UART_Init+0x9c>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008632:	d019      	beq.n	8008668 <HAL_UART_Init+0x9c>
 8008634:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8008638:	4840      	ldr	r0, [pc, #256]	@ (800873c <HAL_UART_Init+0x170>)
 800863a:	f7fb f947 	bl	80038cc <assert_failed>
 800863e:	e013      	b.n	8008668 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a3a      	ldr	r2, [pc, #232]	@ (8008730 <HAL_UART_Init+0x164>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00e      	beq.n	8008668 <HAL_UART_Init+0x9c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a39      	ldr	r2, [pc, #228]	@ (8008734 <HAL_UART_Init+0x168>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d009      	beq.n	8008668 <HAL_UART_Init+0x9c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a37      	ldr	r2, [pc, #220]	@ (8008738 <HAL_UART_Init+0x16c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d004      	beq.n	8008668 <HAL_UART_Init+0x9c>
 800865e:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8008662:	4836      	ldr	r0, [pc, #216]	@ (800873c <HAL_UART_Init+0x170>)
 8008664:	f7fb f932 	bl	80038cc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <HAL_UART_Init+0xb8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008678:	d004      	beq.n	8008684 <HAL_UART_Init+0xb8>
 800867a:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 800867e:	482f      	ldr	r0, [pc, #188]	@ (800873c <HAL_UART_Init+0x170>)
 8008680:	f7fb f924 	bl	80038cc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d009      	beq.n	80086a0 <HAL_UART_Init+0xd4>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008694:	d004      	beq.n	80086a0 <HAL_UART_Init+0xd4>
 8008696:	f240 117b 	movw	r1, #379	@ 0x17b
 800869a:	4828      	ldr	r0, [pc, #160]	@ (800873c <HAL_UART_Init+0x170>)
 800869c:	f7fb f916 	bl	80038cc <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7fb fc83 	bl	8003fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2224      	movs	r2, #36	@ 0x24
 80086be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80086d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc8e 	bl	8008ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691a      	ldr	r2, [r3, #16]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008706:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2220      	movs	r2, #32
 800871a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40011000 	.word	0x40011000
 8008734:	40004400 	.word	0x40004400
 8008738:	40011400 	.word	0x40011400
 800873c:	08015254 	.word	0x08015254

08008740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b0ba      	sub	sp, #232	@ 0xe8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008766:	2300      	movs	r3, #0
 8008768:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800876c:	2300      	movs	r3, #0
 800876e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800877e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <HAL_UART_IRQHandler+0x66>
 8008792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fb69 	bl	8008e76 <UART_Receive_IT>
      return;
 80087a4:	e25b      	b.n	8008c5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 80de 	beq.w	800896c <HAL_UART_IRQHandler+0x22c>
 80087b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80d1 	beq.w	800896c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <HAL_UART_IRQHandler+0xae>
 80087d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e6:	f043 0201 	orr.w	r2, r3, #1
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <HAL_UART_IRQHandler+0xd2>
 80087fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880a:	f043 0202 	orr.w	r2, r3, #2
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <HAL_UART_IRQHandler+0xf6>
 800881e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882e:	f043 0204 	orr.w	r2, r3, #4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d011      	beq.n	8008866 <HAL_UART_IRQHandler+0x126>
 8008842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800884e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885e:	f043 0208 	orr.w	r2, r3, #8
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 81f2 	beq.w	8008c54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b00      	cmp	r3, #0
 800887a:	d008      	beq.n	800888e <HAL_UART_IRQHandler+0x14e>
 800887c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 faf4 	bl	8008e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008898:	2b40      	cmp	r3, #64	@ 0x40
 800889a:	bf0c      	ite	eq
 800889c:	2301      	moveq	r3, #1
 800889e:	2300      	movne	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088aa:	f003 0308 	and.w	r3, r3, #8
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <HAL_UART_IRQHandler+0x17a>
 80088b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d04f      	beq.n	800895a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f9fc 	bl	8008cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ca:	2b40      	cmp	r3, #64	@ 0x40
 80088cc:	d141      	bne.n	8008952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3314      	adds	r3, #20
 80088d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3314      	adds	r3, #20
 80088f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80088fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80088fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1d9      	bne.n	80088ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d013      	beq.n	800894a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008926:	4a7e      	ldr	r2, [pc, #504]	@ (8008b20 <HAL_UART_IRQHandler+0x3e0>)
 8008928:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892e:	4618      	mov	r0, r3
 8008930:	f7fc f8f8 	bl	8004b24 <HAL_DMA_Abort_IT>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d016      	beq.n	8008968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008948:	e00e      	b.n	8008968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f99e 	bl	8008c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008950:	e00a      	b.n	8008968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f99a 	bl	8008c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008958:	e006      	b.n	8008968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f996 	bl	8008c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008966:	e175      	b.n	8008c54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008968:	bf00      	nop
    return;
 800896a:	e173      	b.n	8008c54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008970:	2b01      	cmp	r3, #1
 8008972:	f040 814f 	bne.w	8008c14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800897a:	f003 0310 	and.w	r3, r3, #16
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 8148 	beq.w	8008c14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 8141 	beq.w	8008c14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60bb      	str	r3, [r7, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b2:	2b40      	cmp	r3, #64	@ 0x40
 80089b4:	f040 80b6 	bne.w	8008b24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8145 	beq.w	8008c58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089d6:	429a      	cmp	r2, r3
 80089d8:	f080 813e 	bcs.w	8008c58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ee:	f000 8088 	beq.w	8008b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	330c      	adds	r3, #12
 80089f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1d9      	bne.n	80089f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3314      	adds	r3, #20
 8008a44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a50:	f023 0301 	bic.w	r3, r3, #1
 8008a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	3314      	adds	r3, #20
 8008a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e1      	bne.n	8008a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3314      	adds	r3, #20
 8008a80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3314      	adds	r3, #20
 8008a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008aa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e3      	bne.n	8008a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ad2:	f023 0310 	bic.w	r3, r3, #16
 8008ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330c      	adds	r3, #12
 8008ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008ae4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008ae6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e3      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fb ffa1 	bl	8004a44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8c1 	bl	8008ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b1e:	e09b      	b.n	8008c58 <HAL_UART_IRQHandler+0x518>
 8008b20:	08008d7f 	.word	0x08008d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 808e 	beq.w	8008c5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8089 	beq.w	8008c5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330c      	adds	r3, #12
 8008b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008b6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e3      	bne.n	8008b4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3314      	adds	r3, #20
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	623b      	str	r3, [r7, #32]
   return(result);
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3314      	adds	r3, #20
 8008ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e3      	bne.n	8008b82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0310 	bic.w	r3, r3, #16
 8008bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	330c      	adds	r3, #12
 8008be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008bec:	61fa      	str	r2, [r7, #28]
 8008bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	69b9      	ldr	r1, [r7, #24]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e3      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f847 	bl	8008ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c12:	e023      	b.n	8008c5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d009      	beq.n	8008c34 <HAL_UART_IRQHandler+0x4f4>
 8008c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8ba 	bl	8008da6 <UART_Transmit_IT>
    return;
 8008c32:	e014      	b.n	8008c5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00e      	beq.n	8008c5e <HAL_UART_IRQHandler+0x51e>
 8008c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8fa 	bl	8008e46 <UART_EndTransmit_IT>
    return;
 8008c52:	e004      	b.n	8008c5e <HAL_UART_IRQHandler+0x51e>
    return;
 8008c54:	bf00      	nop
 8008c56:	e002      	b.n	8008c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8008c58:	bf00      	nop
 8008c5a:	e000      	b.n	8008c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8008c5c:	bf00      	nop
  }
}
 8008c5e:	37e8      	adds	r7, #232	@ 0xe8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b095      	sub	sp, #84	@ 0x54
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	330c      	adds	r3, #12
 8008cde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ce0:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e5      	bne.n	8008cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3314      	adds	r3, #20
 8008cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f023 0301 	bic.w	r3, r3, #1
 8008d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3314      	adds	r3, #20
 8008d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e5      	bne.n	8008cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d119      	bne.n	8008d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	330c      	adds	r3, #12
 8008d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f023 0310 	bic.w	r3, r3, #16
 8008d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d50:	61ba      	str	r2, [r7, #24]
 8008d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6979      	ldr	r1, [r7, #20]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d72:	bf00      	nop
 8008d74:	3754      	adds	r7, #84	@ 0x54
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff ff77 	bl	8008c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b21      	cmp	r3, #33	@ 0x21
 8008db8:	d13e      	bne.n	8008e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dc2:	d114      	bne.n	8008dee <UART_Transmit_IT+0x48>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d110      	bne.n	8008dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	1c9a      	adds	r2, r3, #2
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	621a      	str	r2, [r3, #32]
 8008dec:	e008      	b.n	8008e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	1c59      	adds	r1, r3, #1
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6211      	str	r1, [r2, #32]
 8008df8:	781a      	ldrb	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10f      	bne.n	8008e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	e000      	b.n	8008e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e38:	2302      	movs	r3, #2
  }
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2220      	movs	r2, #32
 8008e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff fefc 	bl	8008c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b08c      	sub	sp, #48	@ 0x30
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b22      	cmp	r3, #34	@ 0x22
 8008e88:	f040 80ae 	bne.w	8008fe8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e94:	d117      	bne.n	8008ec6 <UART_Receive_IT+0x50>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d113      	bne.n	8008ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	1c9a      	adds	r2, r3, #2
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ec4:	e026      	b.n	8008f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed8:	d007      	beq.n	8008eea <UART_Receive_IT+0x74>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10a      	bne.n	8008ef8 <UART_Receive_IT+0x82>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e008      	b.n	8008f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	4619      	mov	r1, r3
 8008f22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d15d      	bne.n	8008fe4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0220 	bic.w	r2, r2, #32
 8008f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695a      	ldr	r2, [r3, #20]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d135      	bne.n	8008fda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	330c      	adds	r3, #12
 8008f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	613b      	str	r3, [r7, #16]
   return(result);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f023 0310 	bic.w	r3, r3, #16
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	330c      	adds	r3, #12
 8008f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f94:	623a      	str	r2, [r7, #32]
 8008f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	69f9      	ldr	r1, [r7, #28]
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e5      	bne.n	8008f74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0310 	and.w	r3, r3, #16
 8008fb2:	2b10      	cmp	r3, #16
 8008fb4:	d10a      	bne.n	8008fcc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fe64 	bl	8008ca0 <HAL_UARTEx_RxEventCallback>
 8008fd8:	e002      	b.n	8008fe0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fe4c 	bl	8008c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e002      	b.n	8008fea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e000      	b.n	8008fea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008fe8:	2302      	movs	r3, #2
  }
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3730      	adds	r7, #48	@ 0x30
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ff8:	b0c0      	sub	sp, #256	@ 0x100
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4bcf      	ldr	r3, [pc, #828]	@ (8009344 <UART_SetConfig+0x350>)
 8009008:	429a      	cmp	r2, r3
 800900a:	d904      	bls.n	8009016 <UART_SetConfig+0x22>
 800900c:	f640 6175 	movw	r1, #3701	@ 0xe75
 8009010:	48cd      	ldr	r0, [pc, #820]	@ (8009348 <UART_SetConfig+0x354>)
 8009012:	f7fa fc5b 	bl	80038cc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <UART_SetConfig+0x42>
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800902a:	d004      	beq.n	8009036 <UART_SetConfig+0x42>
 800902c:	f640 6176 	movw	r1, #3702	@ 0xe76
 8009030:	48c5      	ldr	r0, [pc, #788]	@ (8009348 <UART_SetConfig+0x354>)
 8009032:	f7fa fc4b 	bl	80038cc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d010      	beq.n	8009062 <UART_SetConfig+0x6e>
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800904a:	d00a      	beq.n	8009062 <UART_SetConfig+0x6e>
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009056:	d004      	beq.n	8009062 <UART_SetConfig+0x6e>
 8009058:	f640 6177 	movw	r1, #3703	@ 0xe77
 800905c:	48ba      	ldr	r0, [pc, #744]	@ (8009348 <UART_SetConfig+0x354>)
 800905e:	f7fa fc35 	bl	80038cc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009066:	695a      	ldr	r2, [r3, #20]
 8009068:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 800906c:	4013      	ands	r3, r2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <UART_SetConfig+0x88>
 8009072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d104      	bne.n	8009086 <UART_SetConfig+0x92>
 800907c:	f640 6178 	movw	r1, #3704	@ 0xe78
 8009080:	48b1      	ldr	r0, [pc, #708]	@ (8009348 <UART_SetConfig+0x354>)
 8009082:	f7fa fc23 	bl	80038cc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009096:	68d9      	ldr	r1, [r3, #12]
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	ea40 0301 	orr.w	r3, r0, r1
 80090a2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	431a      	orrs	r2, r3
 80090b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	431a      	orrs	r2, r3
 80090ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090d2:	f021 010c 	bic.w	r1, r1, #12
 80090d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090e0:	430b      	orrs	r3, r1
 80090e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f4:	6999      	ldr	r1, [r3, #24]
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	ea40 0301 	orr.w	r3, r0, r1
 8009100:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	4b90      	ldr	r3, [pc, #576]	@ (800934c <UART_SetConfig+0x358>)
 800910a:	429a      	cmp	r2, r3
 800910c:	d005      	beq.n	800911a <UART_SetConfig+0x126>
 800910e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	4b8e      	ldr	r3, [pc, #568]	@ (8009350 <UART_SetConfig+0x35c>)
 8009116:	429a      	cmp	r2, r3
 8009118:	d104      	bne.n	8009124 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800911a:	f7fe faab 	bl	8007674 <HAL_RCC_GetPCLK2Freq>
 800911e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009122:	e003      	b.n	800912c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009124:	f7fe fa92 	bl	800764c <HAL_RCC_GetPCLK1Freq>
 8009128:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009136:	f040 810f 	bne.w	8009358 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800913a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800913e:	2200      	movs	r2, #0
 8009140:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009144:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009148:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800914c:	4622      	mov	r2, r4
 800914e:	462b      	mov	r3, r5
 8009150:	1891      	adds	r1, r2, r2
 8009152:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009154:	415b      	adcs	r3, r3
 8009156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009158:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800915c:	4621      	mov	r1, r4
 800915e:	eb12 0801 	adds.w	r8, r2, r1
 8009162:	4629      	mov	r1, r5
 8009164:	eb43 0901 	adc.w	r9, r3, r1
 8009168:	f04f 0200 	mov.w	r2, #0
 800916c:	f04f 0300 	mov.w	r3, #0
 8009170:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009174:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009178:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800917c:	4690      	mov	r8, r2
 800917e:	4699      	mov	r9, r3
 8009180:	4623      	mov	r3, r4
 8009182:	eb18 0303 	adds.w	r3, r8, r3
 8009186:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800918a:	462b      	mov	r3, r5
 800918c:	eb49 0303 	adc.w	r3, r9, r3
 8009190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091a0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80091a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091a8:	460b      	mov	r3, r1
 80091aa:	18db      	adds	r3, r3, r3
 80091ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80091ae:	4613      	mov	r3, r2
 80091b0:	eb42 0303 	adc.w	r3, r2, r3
 80091b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80091b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091ba:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091be:	f7f7 fd53 	bl	8000c68 <__aeabi_uldivmod>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4b63      	ldr	r3, [pc, #396]	@ (8009354 <UART_SetConfig+0x360>)
 80091c8:	fba3 2302 	umull	r2, r3, r3, r2
 80091cc:	095b      	lsrs	r3, r3, #5
 80091ce:	011c      	lsls	r4, r3, #4
 80091d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091da:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091de:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091e2:	4642      	mov	r2, r8
 80091e4:	464b      	mov	r3, r9
 80091e6:	1891      	adds	r1, r2, r2
 80091e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091ea:	415b      	adcs	r3, r3
 80091ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091f2:	4641      	mov	r1, r8
 80091f4:	eb12 0a01 	adds.w	sl, r2, r1
 80091f8:	4649      	mov	r1, r9
 80091fa:	eb43 0b01 	adc.w	fp, r3, r1
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800920a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800920e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009212:	4692      	mov	sl, r2
 8009214:	469b      	mov	fp, r3
 8009216:	4643      	mov	r3, r8
 8009218:	eb1a 0303 	adds.w	r3, sl, r3
 800921c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009220:	464b      	mov	r3, r9
 8009222:	eb4b 0303 	adc.w	r3, fp, r3
 8009226:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800922a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009236:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800923a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800923e:	460b      	mov	r3, r1
 8009240:	18db      	adds	r3, r3, r3
 8009242:	643b      	str	r3, [r7, #64]	@ 0x40
 8009244:	4613      	mov	r3, r2
 8009246:	eb42 0303 	adc.w	r3, r2, r3
 800924a:	647b      	str	r3, [r7, #68]	@ 0x44
 800924c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009250:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009254:	f7f7 fd08 	bl	8000c68 <__aeabi_uldivmod>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4611      	mov	r1, r2
 800925e:	4b3d      	ldr	r3, [pc, #244]	@ (8009354 <UART_SetConfig+0x360>)
 8009260:	fba3 2301 	umull	r2, r3, r3, r1
 8009264:	095b      	lsrs	r3, r3, #5
 8009266:	2264      	movs	r2, #100	@ 0x64
 8009268:	fb02 f303 	mul.w	r3, r2, r3
 800926c:	1acb      	subs	r3, r1, r3
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009274:	4b37      	ldr	r3, [pc, #220]	@ (8009354 <UART_SetConfig+0x360>)
 8009276:	fba3 2302 	umull	r2, r3, r3, r2
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009282:	441c      	add	r4, r3
 8009284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009288:	2200      	movs	r2, #0
 800928a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800928e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009292:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009296:	4642      	mov	r2, r8
 8009298:	464b      	mov	r3, r9
 800929a:	1891      	adds	r1, r2, r2
 800929c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800929e:	415b      	adcs	r3, r3
 80092a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80092a6:	4641      	mov	r1, r8
 80092a8:	1851      	adds	r1, r2, r1
 80092aa:	6339      	str	r1, [r7, #48]	@ 0x30
 80092ac:	4649      	mov	r1, r9
 80092ae:	414b      	adcs	r3, r1
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b2:	f04f 0200 	mov.w	r2, #0
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092be:	4659      	mov	r1, fp
 80092c0:	00cb      	lsls	r3, r1, #3
 80092c2:	4651      	mov	r1, sl
 80092c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092c8:	4651      	mov	r1, sl
 80092ca:	00ca      	lsls	r2, r1, #3
 80092cc:	4610      	mov	r0, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	4642      	mov	r2, r8
 80092d4:	189b      	adds	r3, r3, r2
 80092d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092da:	464b      	mov	r3, r9
 80092dc:	460a      	mov	r2, r1
 80092de:	eb42 0303 	adc.w	r3, r2, r3
 80092e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092f2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092fa:	460b      	mov	r3, r1
 80092fc:	18db      	adds	r3, r3, r3
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009300:	4613      	mov	r3, r2
 8009302:	eb42 0303 	adc.w	r3, r2, r3
 8009306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800930c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009310:	f7f7 fcaa 	bl	8000c68 <__aeabi_uldivmod>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4b0e      	ldr	r3, [pc, #56]	@ (8009354 <UART_SetConfig+0x360>)
 800931a:	fba3 1302 	umull	r1, r3, r3, r2
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	2164      	movs	r1, #100	@ 0x64
 8009322:	fb01 f303 	mul.w	r3, r1, r3
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	3332      	adds	r3, #50	@ 0x32
 800932c:	4a09      	ldr	r2, [pc, #36]	@ (8009354 <UART_SetConfig+0x360>)
 800932e:	fba2 2303 	umull	r2, r3, r2, r3
 8009332:	095b      	lsrs	r3, r3, #5
 8009334:	f003 0207 	and.w	r2, r3, #7
 8009338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4422      	add	r2, r4
 8009340:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009342:	e109      	b.n	8009558 <UART_SetConfig+0x564>
 8009344:	00a037a0 	.word	0x00a037a0
 8009348:	08015254 	.word	0x08015254
 800934c:	40011000 	.word	0x40011000
 8009350:	40011400 	.word	0x40011400
 8009354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800935c:	2200      	movs	r2, #0
 800935e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009362:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800936a:	4642      	mov	r2, r8
 800936c:	464b      	mov	r3, r9
 800936e:	1891      	adds	r1, r2, r2
 8009370:	6239      	str	r1, [r7, #32]
 8009372:	415b      	adcs	r3, r3
 8009374:	627b      	str	r3, [r7, #36]	@ 0x24
 8009376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800937a:	4641      	mov	r1, r8
 800937c:	1854      	adds	r4, r2, r1
 800937e:	4649      	mov	r1, r9
 8009380:	eb43 0501 	adc.w	r5, r3, r1
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	f04f 0300 	mov.w	r3, #0
 800938c:	00eb      	lsls	r3, r5, #3
 800938e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009392:	00e2      	lsls	r2, r4, #3
 8009394:	4614      	mov	r4, r2
 8009396:	461d      	mov	r5, r3
 8009398:	4643      	mov	r3, r8
 800939a:	18e3      	adds	r3, r4, r3
 800939c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093a0:	464b      	mov	r3, r9
 80093a2:	eb45 0303 	adc.w	r3, r5, r3
 80093a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093ba:	f04f 0200 	mov.w	r2, #0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093c6:	4629      	mov	r1, r5
 80093c8:	008b      	lsls	r3, r1, #2
 80093ca:	4621      	mov	r1, r4
 80093cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093d0:	4621      	mov	r1, r4
 80093d2:	008a      	lsls	r2, r1, #2
 80093d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093d8:	f7f7 fc46 	bl	8000c68 <__aeabi_uldivmod>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4b60      	ldr	r3, [pc, #384]	@ (8009564 <UART_SetConfig+0x570>)
 80093e2:	fba3 2302 	umull	r2, r3, r3, r2
 80093e6:	095b      	lsrs	r3, r3, #5
 80093e8:	011c      	lsls	r4, r3, #4
 80093ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093fc:	4642      	mov	r2, r8
 80093fe:	464b      	mov	r3, r9
 8009400:	1891      	adds	r1, r2, r2
 8009402:	61b9      	str	r1, [r7, #24]
 8009404:	415b      	adcs	r3, r3
 8009406:	61fb      	str	r3, [r7, #28]
 8009408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800940c:	4641      	mov	r1, r8
 800940e:	1851      	adds	r1, r2, r1
 8009410:	6139      	str	r1, [r7, #16]
 8009412:	4649      	mov	r1, r9
 8009414:	414b      	adcs	r3, r1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	f04f 0300 	mov.w	r3, #0
 8009420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009424:	4659      	mov	r1, fp
 8009426:	00cb      	lsls	r3, r1, #3
 8009428:	4651      	mov	r1, sl
 800942a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800942e:	4651      	mov	r1, sl
 8009430:	00ca      	lsls	r2, r1, #3
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	4603      	mov	r3, r0
 8009438:	4642      	mov	r2, r8
 800943a:	189b      	adds	r3, r3, r2
 800943c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009440:	464b      	mov	r3, r9
 8009442:	460a      	mov	r2, r1
 8009444:	eb42 0303 	adc.w	r3, r2, r3
 8009448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800944c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009456:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009464:	4649      	mov	r1, r9
 8009466:	008b      	lsls	r3, r1, #2
 8009468:	4641      	mov	r1, r8
 800946a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800946e:	4641      	mov	r1, r8
 8009470:	008a      	lsls	r2, r1, #2
 8009472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009476:	f7f7 fbf7 	bl	8000c68 <__aeabi_uldivmod>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4611      	mov	r1, r2
 8009480:	4b38      	ldr	r3, [pc, #224]	@ (8009564 <UART_SetConfig+0x570>)
 8009482:	fba3 2301 	umull	r2, r3, r3, r1
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	2264      	movs	r2, #100	@ 0x64
 800948a:	fb02 f303 	mul.w	r3, r2, r3
 800948e:	1acb      	subs	r3, r1, r3
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	3332      	adds	r3, #50	@ 0x32
 8009494:	4a33      	ldr	r2, [pc, #204]	@ (8009564 <UART_SetConfig+0x570>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094a0:	441c      	add	r4, r3
 80094a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094a6:	2200      	movs	r2, #0
 80094a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80094aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80094ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80094b0:	4642      	mov	r2, r8
 80094b2:	464b      	mov	r3, r9
 80094b4:	1891      	adds	r1, r2, r2
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	415b      	adcs	r3, r3
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094c0:	4641      	mov	r1, r8
 80094c2:	1851      	adds	r1, r2, r1
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	4649      	mov	r1, r9
 80094c8:	414b      	adcs	r3, r1
 80094ca:	607b      	str	r3, [r7, #4]
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	f04f 0300 	mov.w	r3, #0
 80094d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094d8:	4659      	mov	r1, fp
 80094da:	00cb      	lsls	r3, r1, #3
 80094dc:	4651      	mov	r1, sl
 80094de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094e2:	4651      	mov	r1, sl
 80094e4:	00ca      	lsls	r2, r1, #3
 80094e6:	4610      	mov	r0, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	4603      	mov	r3, r0
 80094ec:	4642      	mov	r2, r8
 80094ee:	189b      	adds	r3, r3, r2
 80094f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094f2:	464b      	mov	r3, r9
 80094f4:	460a      	mov	r2, r1
 80094f6:	eb42 0303 	adc.w	r3, r2, r3
 80094fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	663b      	str	r3, [r7, #96]	@ 0x60
 8009506:	667a      	str	r2, [r7, #100]	@ 0x64
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009514:	4649      	mov	r1, r9
 8009516:	008b      	lsls	r3, r1, #2
 8009518:	4641      	mov	r1, r8
 800951a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800951e:	4641      	mov	r1, r8
 8009520:	008a      	lsls	r2, r1, #2
 8009522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009526:	f7f7 fb9f 	bl	8000c68 <__aeabi_uldivmod>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4b0d      	ldr	r3, [pc, #52]	@ (8009564 <UART_SetConfig+0x570>)
 8009530:	fba3 1302 	umull	r1, r3, r3, r2
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	2164      	movs	r1, #100	@ 0x64
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	3332      	adds	r3, #50	@ 0x32
 8009542:	4a08      	ldr	r2, [pc, #32]	@ (8009564 <UART_SetConfig+0x570>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	f003 020f 	and.w	r2, r3, #15
 800954e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4422      	add	r2, r4
 8009556:	609a      	str	r2, [r3, #8]
}
 8009558:	bf00      	nop
 800955a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800955e:	46bd      	mov	sp, r7
 8009560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009564:	51eb851f 	.word	0x51eb851f

08009568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009568:	b084      	sub	sp, #16
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	f107 001c 	add.w	r0, r7, #28
 8009576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800957a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800957e:	2b01      	cmp	r3, #1
 8009580:	d123      	bne.n	80095ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009586:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d105      	bne.n	80095be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f001 fae8 	bl	800ab94 <USB_CoreReset>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]
 80095c8:	e01b      	b.n	8009602 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 fadc 	bl	800ab94 <USB_CoreReset>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80095f4:	e005      	b.n	8009602 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009602:	7fbb      	ldrb	r3, [r7, #30]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10b      	bne.n	8009620 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f043 0206 	orr.w	r2, r3, #6
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f043 0220 	orr.w	r2, r3, #32
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800962c:	b004      	add	sp, #16
 800962e:	4770      	bx	lr

08009630 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	4613      	mov	r3, r2
 800963c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800963e:	79fb      	ldrb	r3, [r7, #7]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d165      	bne.n	8009710 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4a41      	ldr	r2, [pc, #260]	@ (800974c <USB_SetTurnaroundTime+0x11c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d906      	bls.n	800965a <USB_SetTurnaroundTime+0x2a>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a40      	ldr	r2, [pc, #256]	@ (8009750 <USB_SetTurnaroundTime+0x120>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d202      	bcs.n	800965a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009654:	230f      	movs	r3, #15
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e062      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4a3c      	ldr	r2, [pc, #240]	@ (8009750 <USB_SetTurnaroundTime+0x120>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d306      	bcc.n	8009670 <USB_SetTurnaroundTime+0x40>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4a3b      	ldr	r2, [pc, #236]	@ (8009754 <USB_SetTurnaroundTime+0x124>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d202      	bcs.n	8009670 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800966a:	230e      	movs	r3, #14
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	e057      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	4a38      	ldr	r2, [pc, #224]	@ (8009754 <USB_SetTurnaroundTime+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d306      	bcc.n	8009686 <USB_SetTurnaroundTime+0x56>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4a37      	ldr	r2, [pc, #220]	@ (8009758 <USB_SetTurnaroundTime+0x128>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d202      	bcs.n	8009686 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009680:	230d      	movs	r3, #13
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e04c      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	4a33      	ldr	r2, [pc, #204]	@ (8009758 <USB_SetTurnaroundTime+0x128>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d306      	bcc.n	800969c <USB_SetTurnaroundTime+0x6c>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4a32      	ldr	r2, [pc, #200]	@ (800975c <USB_SetTurnaroundTime+0x12c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d802      	bhi.n	800969c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009696:	230c      	movs	r3, #12
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e041      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4a2f      	ldr	r2, [pc, #188]	@ (800975c <USB_SetTurnaroundTime+0x12c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d906      	bls.n	80096b2 <USB_SetTurnaroundTime+0x82>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4a2e      	ldr	r2, [pc, #184]	@ (8009760 <USB_SetTurnaroundTime+0x130>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d802      	bhi.n	80096b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80096ac:	230b      	movs	r3, #11
 80096ae:	617b      	str	r3, [r7, #20]
 80096b0:	e036      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009760 <USB_SetTurnaroundTime+0x130>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d906      	bls.n	80096c8 <USB_SetTurnaroundTime+0x98>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	4a29      	ldr	r2, [pc, #164]	@ (8009764 <USB_SetTurnaroundTime+0x134>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d802      	bhi.n	80096c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096c2:	230a      	movs	r3, #10
 80096c4:	617b      	str	r3, [r7, #20]
 80096c6:	e02b      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4a26      	ldr	r2, [pc, #152]	@ (8009764 <USB_SetTurnaroundTime+0x134>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d906      	bls.n	80096de <USB_SetTurnaroundTime+0xae>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4a25      	ldr	r2, [pc, #148]	@ (8009768 <USB_SetTurnaroundTime+0x138>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d202      	bcs.n	80096de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096d8:	2309      	movs	r3, #9
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e020      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	4a21      	ldr	r2, [pc, #132]	@ (8009768 <USB_SetTurnaroundTime+0x138>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d306      	bcc.n	80096f4 <USB_SetTurnaroundTime+0xc4>
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4a20      	ldr	r2, [pc, #128]	@ (800976c <USB_SetTurnaroundTime+0x13c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d802      	bhi.n	80096f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096ee:	2308      	movs	r3, #8
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	e015      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4a1d      	ldr	r2, [pc, #116]	@ (800976c <USB_SetTurnaroundTime+0x13c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d906      	bls.n	800970a <USB_SetTurnaroundTime+0xda>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009770 <USB_SetTurnaroundTime+0x140>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d202      	bcs.n	800970a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009704:	2307      	movs	r3, #7
 8009706:	617b      	str	r3, [r7, #20]
 8009708:	e00a      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800970a:	2306      	movs	r3, #6
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	e007      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009716:	2309      	movs	r3, #9
 8009718:	617b      	str	r3, [r7, #20]
 800971a:	e001      	b.n	8009720 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800971c:	2309      	movs	r3, #9
 800971e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	029b      	lsls	r3, r3, #10
 8009734:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009738:	431a      	orrs	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	371c      	adds	r7, #28
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	00d8acbf 	.word	0x00d8acbf
 8009750:	00e4e1c0 	.word	0x00e4e1c0
 8009754:	00f42400 	.word	0x00f42400
 8009758:	01067380 	.word	0x01067380
 800975c:	011a499f 	.word	0x011a499f
 8009760:	01312cff 	.word	0x01312cff
 8009764:	014ca43f 	.word	0x014ca43f
 8009768:	016e3600 	.word	0x016e3600
 800976c:	01a6ab1f 	.word	0x01a6ab1f
 8009770:	01e84800 	.word	0x01e84800

08009774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f043 0201 	orr.w	r2, r3, #1
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f023 0201 	bic.w	r2, r3, #1
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d115      	bne.n	8009806 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097e6:	200a      	movs	r0, #10
 80097e8:	f7fa fddc 	bl	80043a4 <HAL_Delay>
      ms += 10U;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	330a      	adds	r3, #10
 80097f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f93f 	bl	800aa76 <USB_GetMode>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d01e      	beq.n	800983c <USB_SetCurrentMode+0x84>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2bc7      	cmp	r3, #199	@ 0xc7
 8009802:	d9f0      	bls.n	80097e6 <USB_SetCurrentMode+0x2e>
 8009804:	e01a      	b.n	800983c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d115      	bne.n	8009838 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009818:	200a      	movs	r0, #10
 800981a:	f7fa fdc3 	bl	80043a4 <HAL_Delay>
      ms += 10U;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	330a      	adds	r3, #10
 8009822:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 f926 	bl	800aa76 <USB_GetMode>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d005      	beq.n	800983c <USB_SetCurrentMode+0x84>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2bc7      	cmp	r3, #199	@ 0xc7
 8009834:	d9f0      	bls.n	8009818 <USB_SetCurrentMode+0x60>
 8009836:	e001      	b.n	800983c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e005      	b.n	8009848 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009840:	d101      	bne.n	8009846 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e000      	b.n	8009848 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009850:	b084      	sub	sp, #16
 8009852:	b580      	push	{r7, lr}
 8009854:	b086      	sub	sp, #24
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800985e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800986a:	2300      	movs	r3, #0
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	e009      	b.n	8009884 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	3340      	adds	r3, #64	@ 0x40
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	2200      	movs	r2, #0
 800987c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	3301      	adds	r3, #1
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2b0e      	cmp	r3, #14
 8009888:	d9f2      	bls.n	8009870 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800988a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800988e:	2b00      	cmp	r3, #0
 8009890:	d11c      	bne.n	80098cc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098a0:	f043 0302 	orr.w	r3, r3, #2
 80098a4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80098ca:	e00b      	b.n	80098e4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098ea:	461a      	mov	r2, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d10d      	bne.n	8009914 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009900:	2100      	movs	r1, #0
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f968 	bl	8009bd8 <USB_SetDevSpeed>
 8009908:	e008      	b.n	800991c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800990a:	2101      	movs	r1, #1
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f963 	bl	8009bd8 <USB_SetDevSpeed>
 8009912:	e003      	b.n	800991c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009914:	2103      	movs	r1, #3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f95e 	bl	8009bd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800991c:	2110      	movs	r1, #16
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f8fa 	bl	8009b18 <USB_FlushTxFifo>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f924 	bl	8009b7c <USB_FlushRxFifo>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009944:	461a      	mov	r2, r3
 8009946:	2300      	movs	r3, #0
 8009948:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009950:	461a      	mov	r2, r3
 8009952:	2300      	movs	r3, #0
 8009954:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800995c:	461a      	mov	r2, r3
 800995e:	2300      	movs	r3, #0
 8009960:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	e043      	b.n	80099f0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800997a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800997e:	d118      	bne.n	80099b2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009992:	461a      	mov	r2, r3
 8009994:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	e013      	b.n	80099c4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a8:	461a      	mov	r2, r3
 80099aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	e008      	b.n	80099c4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099be:	461a      	mov	r2, r3
 80099c0:	2300      	movs	r3, #0
 80099c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d0:	461a      	mov	r2, r3
 80099d2:	2300      	movs	r3, #0
 80099d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099e2:	461a      	mov	r2, r3
 80099e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	3301      	adds	r3, #1
 80099ee:	613b      	str	r3, [r7, #16]
 80099f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099f4:	461a      	mov	r2, r3
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d3b5      	bcc.n	8009968 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099fc:	2300      	movs	r3, #0
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	e043      	b.n	8009a8a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a18:	d118      	bne.n	8009a4c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	e013      	b.n	8009a5e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a42:	461a      	mov	r2, r3
 8009a44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	e008      	b.n	8009a5e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	3301      	adds	r3, #1
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a8e:	461a      	mov	r2, r3
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d3b5      	bcc.n	8009a02 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aa8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ab6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	f043 0210 	orr.w	r2, r3, #16
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	4b10      	ldr	r3, [pc, #64]	@ (8009b14 <USB_DevInit+0x2c4>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ad8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d005      	beq.n	8009aec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	f043 0208 	orr.w	r2, r3, #8
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009aec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d107      	bne.n	8009b04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009afc:	f043 0304 	orr.w	r3, r3, #4
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b10:	b004      	add	sp, #16
 8009b12:	4770      	bx	lr
 8009b14:	803c3800 	.word	0x803c3800

08009b18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b32:	d901      	bls.n	8009b38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e01b      	b.n	8009b70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	daf2      	bge.n	8009b26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	019b      	lsls	r3, r3, #6
 8009b48:	f043 0220 	orr.w	r2, r3, #32
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b5c:	d901      	bls.n	8009b62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e006      	b.n	8009b70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	f003 0320 	and.w	r3, r3, #32
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d0f0      	beq.n	8009b50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b94:	d901      	bls.n	8009b9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e018      	b.n	8009bcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	daf2      	bge.n	8009b88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2210      	movs	r2, #16
 8009baa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bb8:	d901      	bls.n	8009bbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e006      	b.n	8009bcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f003 0310 	and.w	r3, r3, #16
 8009bc6:	2b10      	cmp	r3, #16
 8009bc8:	d0f0      	beq.n	8009bac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b087      	sub	sp, #28
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0306 	and.w	r3, r3, #6
 8009c22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	75fb      	strb	r3, [r7, #23]
 8009c2e:	e00a      	b.n	8009c46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d002      	beq.n	8009c3c <USB_GetDevSpeed+0x32>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b06      	cmp	r3, #6
 8009c3a:	d102      	bne.n	8009c42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	75fb      	strb	r3, [r7, #23]
 8009c40:	e001      	b.n	8009c46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c42:	230f      	movs	r3, #15
 8009c44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	371c      	adds	r7, #28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d13a      	bne.n	8009ce6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c76:	69da      	ldr	r2, [r3, #28]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f003 030f 	and.w	r3, r3, #15
 8009c80:	2101      	movs	r1, #1
 8009c82:	fa01 f303 	lsl.w	r3, r1, r3
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	68f9      	ldr	r1, [r7, #12]
 8009c8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d155      	bne.n	8009d54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	015a      	lsls	r2, r3, #5
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	791b      	ldrb	r3, [r3, #4]
 8009cc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	059b      	lsls	r3, r3, #22
 8009cca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	0151      	lsls	r1, r2, #5
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	440a      	add	r2, r1
 8009cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	e036      	b.n	8009d54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cec:	69da      	ldr	r2, [r3, #28]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f003 030f 	and.w	r3, r3, #15
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfc:	041b      	lsls	r3, r3, #16
 8009cfe:	68f9      	ldr	r1, [r7, #12]
 8009d00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d04:	4313      	orrs	r3, r2
 8009d06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d11a      	bne.n	8009d54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	791b      	ldrb	r3, [r3, #4]
 8009d38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d3a:	430b      	orrs	r3, r1
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
	...

08009d64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	785b      	ldrb	r3, [r3, #1]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d161      	bne.n	8009e44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d96:	d11f      	bne.n	8009dd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	0151      	lsls	r1, r2, #5
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	440a      	add	r2, r1
 8009dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009db2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009db6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 030f 	and.w	r3, r3, #15
 8009de8:	2101      	movs	r1, #1
 8009dea:	fa01 f303 	lsl.w	r3, r1, r3
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	43db      	mvns	r3, r3
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009df8:	4013      	ands	r3, r2
 8009dfa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e02:	69da      	ldr	r2, [r3, #28]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 030f 	and.w	r3, r3, #15
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	43db      	mvns	r3, r3
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	0159      	lsls	r1, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	440b      	add	r3, r1
 8009e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4b35      	ldr	r3, [pc, #212]	@ (8009f14 <USB_DeactivateEndpoint+0x1b0>)
 8009e3e:	4013      	ands	r3, r2
 8009e40:	600b      	str	r3, [r1, #0]
 8009e42:	e060      	b.n	8009f06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e5a:	d11f      	bne.n	8009e9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	0151      	lsls	r1, r2, #5
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	440a      	add	r2, r1
 8009e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	2101      	movs	r1, #1
 8009eae:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb2:	041b      	lsls	r3, r3, #16
 8009eb4:	43db      	mvns	r3, r3
 8009eb6:	68f9      	ldr	r1, [r7, #12]
 8009eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ec6:	69da      	ldr	r2, [r3, #28]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	f003 030f 	and.w	r3, r3, #15
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed6:	041b      	lsls	r3, r3, #16
 8009ed8:	43db      	mvns	r3, r3
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	0159      	lsls	r1, r3, #5
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	440b      	add	r3, r1
 8009efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009efe:	4619      	mov	r1, r3
 8009f00:	4b05      	ldr	r3, [pc, #20]	@ (8009f18 <USB_DeactivateEndpoint+0x1b4>)
 8009f02:	4013      	ands	r3, r2
 8009f04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	ec337800 	.word	0xec337800
 8009f18:	eff37800 	.word	0xeff37800

08009f1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	@ 0x28
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	4613      	mov	r3, r2
 8009f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	f040 817f 	bne.w	800a23c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d132      	bne.n	8009fac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	0151      	lsls	r1, r2, #5
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	440a      	add	r2, r1
 8009f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fa4:	0cdb      	lsrs	r3, r3, #19
 8009fa6:	04db      	lsls	r3, r3, #19
 8009fa8:	6113      	str	r3, [r2, #16]
 8009faa:	e097      	b.n	800a0dc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fc6:	0cdb      	lsrs	r3, r3, #19
 8009fc8:	04db      	lsls	r3, r3, #19
 8009fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fe6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009fea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009fee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d11a      	bne.n	800a02c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d903      	bls.n	800a00a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	0151      	lsls	r1, r2, #5
 800a01c:	69fa      	ldr	r2, [r7, #28]
 800a01e:	440a      	add	r2, r1
 800a020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a024:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a028:	6113      	str	r3, [r2, #16]
 800a02a:	e044      	b.n	800a0b6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	691a      	ldr	r2, [r3, #16]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	4413      	add	r3, r2
 800a036:	1e5a      	subs	r2, r3, #1
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a040:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a04e:	691a      	ldr	r2, [r3, #16]
 800a050:	8afb      	ldrh	r3, [r7, #22]
 800a052:	04d9      	lsls	r1, r3, #19
 800a054:	4ba4      	ldr	r3, [pc, #656]	@ (800a2e8 <USB_EPStartXfer+0x3cc>)
 800a056:	400b      	ands	r3, r1
 800a058:	69b9      	ldr	r1, [r7, #24]
 800a05a:	0148      	lsls	r0, r1, #5
 800a05c:	69f9      	ldr	r1, [r7, #28]
 800a05e:	4401      	add	r1, r0
 800a060:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a064:	4313      	orrs	r3, r2
 800a066:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	791b      	ldrb	r3, [r3, #4]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d122      	bne.n	800a0b6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	0151      	lsls	r1, r2, #5
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	440a      	add	r2, r1
 800a086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a08a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a08e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	8afb      	ldrh	r3, [r7, #22]
 800a0a0:	075b      	lsls	r3, r3, #29
 800a0a2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a0a6:	69b9      	ldr	r1, [r7, #24]
 800a0a8:	0148      	lsls	r0, r1, #5
 800a0aa:	69f9      	ldr	r1, [r7, #28]
 800a0ac:	4401      	add	r1, r0
 800a0ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0cc:	69b9      	ldr	r1, [r7, #24]
 800a0ce:	0148      	lsls	r0, r1, #5
 800a0d0:	69f9      	ldr	r1, [r7, #28]
 800a0d2:	4401      	add	r1, r0
 800a0d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d14b      	bne.n	800a17a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d009      	beq.n	800a0fe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	015a      	lsls	r2, r3, #5
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	69db      	ldr	r3, [r3, #28]
 800a0fc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	791b      	ldrb	r3, [r3, #4]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d128      	bne.n	800a158 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a112:	2b00      	cmp	r3, #0
 800a114:	d110      	bne.n	800a138 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	69ba      	ldr	r2, [r7, #24]
 800a126:	0151      	lsls	r1, r2, #5
 800a128:	69fa      	ldr	r2, [r7, #28]
 800a12a:	440a      	add	r2, r1
 800a12c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a130:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	e00f      	b.n	800a158 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	0151      	lsls	r1, r2, #5
 800a14a:	69fa      	ldr	r2, [r7, #28]
 800a14c:	440a      	add	r2, r1
 800a14e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a156:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a172:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	e166      	b.n	800a448 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	4413      	add	r3, r2
 800a182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	0151      	lsls	r1, r2, #5
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	440a      	add	r2, r1
 800a190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a194:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a198:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d015      	beq.n	800a1ce <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 814e 	beq.w	800a448 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	f003 030f 	and.w	r3, r3, #15
 800a1bc:	2101      	movs	r1, #1
 800a1be:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c2:	69f9      	ldr	r1, [r7, #28]
 800a1c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	634b      	str	r3, [r1, #52]	@ 0x34
 800a1cc:	e13c      	b.n	800a448 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d110      	bne.n	800a200 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	0151      	lsls	r1, r2, #5
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1fc:	6013      	str	r3, [r2, #0]
 800a1fe:	e00f      	b.n	800a220 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	0151      	lsls	r1, r2, #5
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	440a      	add	r2, r1
 800a216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a21a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a21e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	68d9      	ldr	r1, [r3, #12]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	b298      	uxth	r0, r3
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4603      	mov	r3, r0
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f9b9 	bl	800a5ac <USB_WritePacket>
 800a23a:	e105      	b.n	800a448 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	0151      	lsls	r1, r2, #5
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	440a      	add	r2, r1
 800a252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a256:	0cdb      	lsrs	r3, r3, #19
 800a258:	04db      	lsls	r3, r3, #19
 800a25a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	0151      	lsls	r1, r2, #5
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	440a      	add	r2, r1
 800a272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a276:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a27a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a27e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d132      	bne.n	800a2ec <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
 800a2b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2b4:	69b9      	ldr	r1, [r7, #24]
 800a2b6:	0148      	lsls	r0, r1, #5
 800a2b8:	69f9      	ldr	r1, [r7, #28]
 800a2ba:	4401      	add	r1, r0
 800a2bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	0151      	lsls	r1, r2, #5
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	440a      	add	r2, r1
 800a2da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2e2:	6113      	str	r3, [r2, #16]
 800a2e4:	e062      	b.n	800a3ac <USB_EPStartXfer+0x490>
 800a2e6:	bf00      	nop
 800a2e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d123      	bne.n	800a33c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a300:	691a      	ldr	r2, [r3, #16]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a30a:	69b9      	ldr	r1, [r7, #24]
 800a30c:	0148      	lsls	r0, r1, #5
 800a30e:	69f9      	ldr	r1, [r7, #28]
 800a310:	4401      	add	r1, r0
 800a312:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a316:	4313      	orrs	r3, r2
 800a318:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	0151      	lsls	r1, r2, #5
 800a32c:	69fa      	ldr	r2, [r7, #28]
 800a32e:	440a      	add	r2, r1
 800a330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a334:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a338:	6113      	str	r3, [r2, #16]
 800a33a:	e037      	b.n	800a3ac <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	691a      	ldr	r2, [r3, #16]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4413      	add	r3, r2
 800a346:	1e5a      	subs	r2, r3, #1
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a350:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	8afa      	ldrh	r2, [r7, #22]
 800a358:	fb03 f202 	mul.w	r2, r3, r2
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36c:	691a      	ldr	r2, [r3, #16]
 800a36e:	8afb      	ldrh	r3, [r7, #22]
 800a370:	04d9      	lsls	r1, r3, #19
 800a372:	4b38      	ldr	r3, [pc, #224]	@ (800a454 <USB_EPStartXfer+0x538>)
 800a374:	400b      	ands	r3, r1
 800a376:	69b9      	ldr	r1, [r7, #24]
 800a378:	0148      	lsls	r0, r1, #5
 800a37a:	69f9      	ldr	r1, [r7, #28]
 800a37c:	4401      	add	r1, r0
 800a37e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a382:	4313      	orrs	r3, r2
 800a384:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a39c:	69b9      	ldr	r1, [r7, #24]
 800a39e:	0148      	lsls	r0, r1, #5
 800a3a0:	69f9      	ldr	r1, [r7, #28]
 800a3a2:	4401      	add	r1, r0
 800a3a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d10d      	bne.n	800a3ce <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d009      	beq.n	800a3ce <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	68d9      	ldr	r1, [r3, #12]
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ca:	460a      	mov	r2, r1
 800a3cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	791b      	ldrb	r3, [r3, #4]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d128      	bne.n	800a428 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d110      	bne.n	800a408 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	0151      	lsls	r1, r2, #5
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a400:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	e00f      	b.n	800a428 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	0151      	lsls	r1, r2, #5
 800a41a:	69fa      	ldr	r2, [r7, #28]
 800a41c:	440a      	add	r2, r1
 800a41e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a426:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	0151      	lsls	r1, r2, #5
 800a43a:	69fa      	ldr	r2, [r7, #28]
 800a43c:	440a      	add	r2, r1
 800a43e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a442:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3720      	adds	r7, #32
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	1ff80000 	.word	0x1ff80000

0800a458 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	785b      	ldrb	r3, [r3, #1]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d14a      	bne.n	800a50c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a48a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a48e:	f040 8086 	bne.w	800a59e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	7812      	ldrb	r2, [r2, #0]
 800a4a6:	0151      	lsls	r1, r2, #5
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	440a      	add	r2, r1
 800a4ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	7812      	ldrb	r2, [r2, #0]
 800a4ca:	0151      	lsls	r1, r2, #5
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	440a      	add	r2, r1
 800a4d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d902      	bls.n	800a4f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ee:	e056      	b.n	800a59e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a508:	d0e7      	beq.n	800a4da <USB_EPStopXfer+0x82>
 800a50a:	e048      	b.n	800a59e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a524:	d13b      	bne.n	800a59e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	7812      	ldrb	r2, [r2, #0]
 800a53a:	0151      	lsls	r1, r2, #5
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	440a      	add	r2, r1
 800a540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a544:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a548:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	015a      	lsls	r2, r3, #5
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	4413      	add	r3, r2
 800a554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	7812      	ldrb	r2, [r2, #0]
 800a55e:	0151      	lsls	r1, r2, #5
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	440a      	add	r2, r1
 800a564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a56c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d902      	bls.n	800a584 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	75fb      	strb	r3, [r7, #23]
          break;
 800a582:	e00c      	b.n	800a59e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a59c:	d0e7      	beq.n	800a56e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	371c      	adds	r7, #28
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b089      	sub	sp, #36	@ 0x24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	71fb      	strb	r3, [r7, #7]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d123      	bne.n	800a61a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5d2:	88bb      	ldrh	r3, [r7, #4]
 800a5d4:	3303      	adds	r3, #3
 800a5d6:	089b      	lsrs	r3, r3, #2
 800a5d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61bb      	str	r3, [r7, #24]
 800a5de:	e018      	b.n	800a612 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	031a      	lsls	r2, r3, #12
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	3301      	adds	r3, #1
 800a604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	3301      	adds	r3, #1
 800a60a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	3301      	adds	r3, #1
 800a610:	61bb      	str	r3, [r7, #24]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	429a      	cmp	r2, r3
 800a618:	d3e2      	bcc.n	800a5e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3724      	adds	r7, #36	@ 0x24
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a628:	b480      	push	{r7}
 800a62a:	b08b      	sub	sp, #44	@ 0x2c
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a63e:	88fb      	ldrh	r3, [r7, #6]
 800a640:	089b      	lsrs	r3, r3, #2
 800a642:	b29b      	uxth	r3, r3
 800a644:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	f003 0303 	and.w	r3, r3, #3
 800a64c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a64e:	2300      	movs	r3, #0
 800a650:	623b      	str	r3, [r7, #32]
 800a652:	e014      	b.n	800a67e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	3301      	adds	r3, #1
 800a664:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a668:	3301      	adds	r3, #1
 800a66a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66e:	3301      	adds	r3, #1
 800a670:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	3301      	adds	r3, #1
 800a676:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	3301      	adds	r3, #1
 800a67c:	623b      	str	r3, [r7, #32]
 800a67e:	6a3a      	ldr	r2, [r7, #32]
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	429a      	cmp	r2, r3
 800a684:	d3e6      	bcc.n	800a654 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a686:	8bfb      	ldrh	r3, [r7, #30]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01e      	beq.n	800a6ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a696:	461a      	mov	r2, r3
 800a698:	f107 0310 	add.w	r3, r7, #16
 800a69c:	6812      	ldr	r2, [r2, #0]
 800a69e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b0:	701a      	strb	r2, [r3, #0]
      i++;
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a6be:	8bfb      	ldrh	r3, [r7, #30]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6c4:	8bfb      	ldrh	r3, [r7, #30]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1ea      	bne.n	800a6a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	372c      	adds	r7, #44	@ 0x2c
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	785b      	ldrb	r3, [r3, #1]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d12c      	bne.n	800a74e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	db12      	blt.n	800a72c <USB_EPSetStall+0x54>
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	0151      	lsls	r1, r2, #5
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	440a      	add	r2, r1
 800a722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a726:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a72a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	0151      	lsls	r1, r2, #5
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	440a      	add	r2, r1
 800a742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a746:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	e02b      	b.n	800a7a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4413      	add	r3, r2
 800a756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	db12      	blt.n	800a786 <USB_EPSetStall+0xae>
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00f      	beq.n	800a786 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	0151      	lsls	r1, r2, #5
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	440a      	add	r2, r1
 800a77c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a780:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a784:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	0151      	lsls	r1, r2, #5
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	440a      	add	r2, r1
 800a79c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a7a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	785b      	ldrb	r3, [r3, #1]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d128      	bne.n	800a822 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	791b      	ldrb	r3, [r3, #4]
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d003      	beq.n	800a800 <USB_EPClearStall+0x4c>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	791b      	ldrb	r3, [r3, #4]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d138      	bne.n	800a872 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	0151      	lsls	r1, r2, #5
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	440a      	add	r2, r1
 800a816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a81a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	e027      	b.n	800a872 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a83c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a840:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	791b      	ldrb	r3, [r3, #4]
 800a846:	2b03      	cmp	r3, #3
 800a848:	d003      	beq.n	800a852 <USB_EPClearStall+0x9e>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	791b      	ldrb	r3, [r3, #4]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d10f      	bne.n	800a872 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	0151      	lsls	r1, r2, #5
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	440a      	add	r2, r1
 800a868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a86c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a870:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a89e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a8a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	011b      	lsls	r3, r3, #4
 800a8b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a8b4:	68f9      	ldr	r1, [r7, #12]
 800a8b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8e6:	f023 0303 	bic.w	r3, r3, #3
 800a8ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8fa:	f023 0302 	bic.w	r3, r3, #2
 800a8fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a928:	f023 0303 	bic.w	r3, r3, #3
 800a92c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a93c:	f043 0302 	orr.w	r3, r3, #2
 800a940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	4013      	ands	r3, r2
 800a966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a968:	68fb      	ldr	r3, [r7, #12]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a976:	b480      	push	{r7}
 800a978:	b085      	sub	sp, #20
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	4013      	ands	r3, r2
 800a998:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	0c1b      	lsrs	r3, r3, #16
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	b29b      	uxth	r3, r3
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	015a      	lsls	r2, r3, #5
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	4013      	ands	r3, r2
 800aa0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b087      	sub	sp, #28
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	fa22 f303 	lsr.w	r3, r2, r3
 800aa4a:	01db      	lsls	r3, r3, #7
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	4013      	ands	r3, r2
 800aa66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa68:	68bb      	ldr	r3, [r7, #8]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	371c      	adds	r7, #28
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b083      	sub	sp, #12
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	f003 0301 	and.w	r3, r3, #1
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aab0:	f023 0307 	bic.w	r3, r3, #7
 800aab4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aac8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	460b      	mov	r3, r1
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	333c      	adds	r3, #60	@ 0x3c
 800aaee:	3304      	adds	r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	4a26      	ldr	r2, [pc, #152]	@ (800ab90 <USB_EP0_OutStart+0xb8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d90a      	bls.n	800ab12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab0c:	d101      	bne.n	800ab12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	e037      	b.n	800ab82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab18:	461a      	mov	r2, r3
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab40:	f043 0318 	orr.w	r3, r3, #24
 800ab44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab54:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab5a:	7afb      	ldrb	r3, [r7, #11]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d10f      	bne.n	800ab80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab66:	461a      	mov	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab7a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ab7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	4f54300a 	.word	0x4f54300a

0800ab94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abac:	d901      	bls.n	800abb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e01b      	b.n	800abea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	daf2      	bge.n	800aba0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	f043 0201 	orr.w	r2, r3, #1
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abd6:	d901      	bls.n	800abdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e006      	b.n	800abea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d0f0      	beq.n	800abca <USB_CoreReset+0x36>

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
	...

0800abf8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac04:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac08:	f005 feb8 	bl	801097c <USBD_static_malloc>
 800ac0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d109      	bne.n	800ac28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	32b0      	adds	r2, #176	@ 0xb0
 800ac1e:	2100      	movs	r1, #0
 800ac20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac24:	2302      	movs	r3, #2
 800ac26:	e0d4      	b.n	800add2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac28:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f007 fe80 	bl	8012934 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	32b0      	adds	r2, #176	@ 0xb0
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	32b0      	adds	r2, #176	@ 0xb0
 800ac4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	7c1b      	ldrb	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d138      	bne.n	800acd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac60:	4b5e      	ldr	r3, [pc, #376]	@ (800addc <USBD_CDC_Init+0x1e4>)
 800ac62:	7819      	ldrb	r1, [r3, #0]
 800ac64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac68:	2202      	movs	r2, #2
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f005 fd63 	bl	8010736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac70:	4b5a      	ldr	r3, [pc, #360]	@ (800addc <USBD_CDC_Init+0x1e4>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 020f 	and.w	r2, r3, #15
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	3324      	adds	r3, #36	@ 0x24
 800ac86:	2201      	movs	r2, #1
 800ac88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac8a:	4b55      	ldr	r3, [pc, #340]	@ (800ade0 <USBD_CDC_Init+0x1e8>)
 800ac8c:	7819      	ldrb	r1, [r3, #0]
 800ac8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac92:	2202      	movs	r2, #2
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f005 fd4e 	bl	8010736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac9a:	4b51      	ldr	r3, [pc, #324]	@ (800ade0 <USBD_CDC_Init+0x1e8>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	f003 020f 	and.w	r2, r3, #15
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acb2:	2201      	movs	r2, #1
 800acb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800acb6:	4b4b      	ldr	r3, [pc, #300]	@ (800ade4 <USBD_CDC_Init+0x1ec>)
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	f003 020f 	and.w	r2, r3, #15
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	440b      	add	r3, r1
 800acca:	3326      	adds	r3, #38	@ 0x26
 800accc:	2210      	movs	r2, #16
 800acce:	801a      	strh	r2, [r3, #0]
 800acd0:	e035      	b.n	800ad3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acd2:	4b42      	ldr	r3, [pc, #264]	@ (800addc <USBD_CDC_Init+0x1e4>)
 800acd4:	7819      	ldrb	r1, [r3, #0]
 800acd6:	2340      	movs	r3, #64	@ 0x40
 800acd8:	2202      	movs	r2, #2
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f005 fd2b 	bl	8010736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ace0:	4b3e      	ldr	r3, [pc, #248]	@ (800addc <USBD_CDC_Init+0x1e4>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f003 020f 	and.w	r2, r3, #15
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	3324      	adds	r3, #36	@ 0x24
 800acf6:	2201      	movs	r2, #1
 800acf8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acfa:	4b39      	ldr	r3, [pc, #228]	@ (800ade0 <USBD_CDC_Init+0x1e8>)
 800acfc:	7819      	ldrb	r1, [r3, #0]
 800acfe:	2340      	movs	r3, #64	@ 0x40
 800ad00:	2202      	movs	r2, #2
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f005 fd17 	bl	8010736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad08:	4b35      	ldr	r3, [pc, #212]	@ (800ade0 <USBD_CDC_Init+0x1e8>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 020f 	and.w	r2, r3, #15
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	440b      	add	r3, r1
 800ad1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad20:	2201      	movs	r2, #1
 800ad22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad24:	4b2f      	ldr	r3, [pc, #188]	@ (800ade4 <USBD_CDC_Init+0x1ec>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 020f 	and.w	r2, r3, #15
 800ad2c:	6879      	ldr	r1, [r7, #4]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	440b      	add	r3, r1
 800ad38:	3326      	adds	r3, #38	@ 0x26
 800ad3a:	2210      	movs	r2, #16
 800ad3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad3e:	4b29      	ldr	r3, [pc, #164]	@ (800ade4 <USBD_CDC_Init+0x1ec>)
 800ad40:	7819      	ldrb	r1, [r3, #0]
 800ad42:	2308      	movs	r3, #8
 800ad44:	2203      	movs	r2, #3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f005 fcf5 	bl	8010736 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad4c:	4b25      	ldr	r3, [pc, #148]	@ (800ade4 <USBD_CDC_Init+0x1ec>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	f003 020f 	and.w	r2, r3, #15
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	3324      	adds	r3, #36	@ 0x24
 800ad62:	2201      	movs	r2, #1
 800ad64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	33b0      	adds	r3, #176	@ 0xb0
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	e018      	b.n	800add2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7c1b      	ldrb	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10a      	bne.n	800adbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ada8:	4b0d      	ldr	r3, [pc, #52]	@ (800ade0 <USBD_CDC_Init+0x1e8>)
 800adaa:	7819      	ldrb	r1, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800adb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f005 fdac 	bl	8010914 <USBD_LL_PrepareReceive>
 800adbc:	e008      	b.n	800add0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800adbe:	4b08      	ldr	r3, [pc, #32]	@ (800ade0 <USBD_CDC_Init+0x1e8>)
 800adc0:	7819      	ldrb	r1, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800adc8:	2340      	movs	r3, #64	@ 0x40
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f005 fda2 	bl	8010914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000093 	.word	0x20000093
 800ade0:	20000094 	.word	0x20000094
 800ade4:	20000095 	.word	0x20000095

0800ade8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adf4:	4b3a      	ldr	r3, [pc, #232]	@ (800aee0 <USBD_CDC_DeInit+0xf8>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f005 fcc1 	bl	8010782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae00:	4b37      	ldr	r3, [pc, #220]	@ (800aee0 <USBD_CDC_DeInit+0xf8>)
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	f003 020f 	and.w	r2, r3, #15
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	3324      	adds	r3, #36	@ 0x24
 800ae16:	2200      	movs	r2, #0
 800ae18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae1a:	4b32      	ldr	r3, [pc, #200]	@ (800aee4 <USBD_CDC_DeInit+0xfc>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f005 fcae 	bl	8010782 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae26:	4b2f      	ldr	r3, [pc, #188]	@ (800aee4 <USBD_CDC_DeInit+0xfc>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	f003 020f 	and.w	r2, r3, #15
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	440b      	add	r3, r1
 800ae3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae3e:	2200      	movs	r2, #0
 800ae40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae42:	4b29      	ldr	r3, [pc, #164]	@ (800aee8 <USBD_CDC_DeInit+0x100>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f005 fc9a 	bl	8010782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae4e:	4b26      	ldr	r3, [pc, #152]	@ (800aee8 <USBD_CDC_DeInit+0x100>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	f003 020f 	and.w	r2, r3, #15
 800ae56:	6879      	ldr	r1, [r7, #4]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	440b      	add	r3, r1
 800ae62:	3324      	adds	r3, #36	@ 0x24
 800ae64:	2200      	movs	r2, #0
 800ae66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae68:	4b1f      	ldr	r3, [pc, #124]	@ (800aee8 <USBD_CDC_DeInit+0x100>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	f003 020f 	and.w	r2, r3, #15
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	440b      	add	r3, r1
 800ae7c:	3326      	adds	r3, #38	@ 0x26
 800ae7e:	2200      	movs	r2, #0
 800ae80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	32b0      	adds	r2, #176	@ 0xb0
 800ae8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01f      	beq.n	800aed4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	33b0      	adds	r3, #176	@ 0xb0
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	32b0      	adds	r2, #176	@ 0xb0
 800aeb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f005 fd6e 	bl	8010998 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	32b0      	adds	r2, #176	@ 0xb0
 800aec6:	2100      	movs	r1, #0
 800aec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20000093 	.word	0x20000093
 800aee4:	20000094 	.word	0x20000094
 800aee8:	20000095 	.word	0x20000095

0800aeec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	32b0      	adds	r2, #176	@ 0xb0
 800af00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af18:	2303      	movs	r3, #3
 800af1a:	e0bf      	b.n	800b09c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af24:	2b00      	cmp	r3, #0
 800af26:	d050      	beq.n	800afca <USBD_CDC_Setup+0xde>
 800af28:	2b20      	cmp	r3, #32
 800af2a:	f040 80af 	bne.w	800b08c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	88db      	ldrh	r3, [r3, #6]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d03a      	beq.n	800afac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	b25b      	sxtb	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	da1b      	bge.n	800af78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	33b0      	adds	r3, #176	@ 0xb0
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	88d2      	ldrh	r2, [r2, #6]
 800af5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	88db      	ldrh	r3, [r3, #6]
 800af62:	2b07      	cmp	r3, #7
 800af64:	bf28      	it	cs
 800af66:	2307      	movcs	r3, #7
 800af68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	89fa      	ldrh	r2, [r7, #14]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 fd93 	bl	800ca9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af76:	e090      	b.n	800b09a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	785a      	ldrb	r2, [r3, #1]
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	88db      	ldrh	r3, [r3, #6]
 800af86:	2b3f      	cmp	r3, #63	@ 0x3f
 800af88:	d803      	bhi.n	800af92 <USBD_CDC_Setup+0xa6>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	88db      	ldrh	r3, [r3, #6]
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	e000      	b.n	800af94 <USBD_CDC_Setup+0xa8>
 800af92:	2240      	movs	r2, #64	@ 0x40
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af9a:	6939      	ldr	r1, [r7, #16]
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800afa2:	461a      	mov	r2, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 fda5 	bl	800caf4 <USBD_CtlPrepareRx>
      break;
 800afaa:	e076      	b.n	800b09a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	33b0      	adds	r3, #176	@ 0xb0
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	7850      	ldrb	r0, [r2, #1]
 800afc2:	2200      	movs	r2, #0
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	4798      	blx	r3
      break;
 800afc8:	e067      	b.n	800b09a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	785b      	ldrb	r3, [r3, #1]
 800afce:	2b0b      	cmp	r3, #11
 800afd0:	d851      	bhi.n	800b076 <USBD_CDC_Setup+0x18a>
 800afd2:	a201      	add	r2, pc, #4	@ (adr r2, 800afd8 <USBD_CDC_Setup+0xec>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800b009 	.word	0x0800b009
 800afdc:	0800b085 	.word	0x0800b085
 800afe0:	0800b077 	.word	0x0800b077
 800afe4:	0800b077 	.word	0x0800b077
 800afe8:	0800b077 	.word	0x0800b077
 800afec:	0800b077 	.word	0x0800b077
 800aff0:	0800b077 	.word	0x0800b077
 800aff4:	0800b077 	.word	0x0800b077
 800aff8:	0800b077 	.word	0x0800b077
 800affc:	0800b077 	.word	0x0800b077
 800b000:	0800b033 	.word	0x0800b033
 800b004:	0800b05d 	.word	0x0800b05d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b03      	cmp	r3, #3
 800b012:	d107      	bne.n	800b024 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b014:	f107 030a 	add.w	r3, r7, #10
 800b018:	2202      	movs	r2, #2
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 fd3d 	bl	800ca9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b022:	e032      	b.n	800b08a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 fcbb 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b02c:	2303      	movs	r3, #3
 800b02e:	75fb      	strb	r3, [r7, #23]
          break;
 800b030:	e02b      	b.n	800b08a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d107      	bne.n	800b04e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b03e:	f107 030d 	add.w	r3, r7, #13
 800b042:	2201      	movs	r2, #1
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 fd28 	bl	800ca9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b04c:	e01d      	b.n	800b08a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f001 fca6 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b056:	2303      	movs	r3, #3
 800b058:	75fb      	strb	r3, [r7, #23]
          break;
 800b05a:	e016      	b.n	800b08a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b03      	cmp	r3, #3
 800b066:	d00f      	beq.n	800b088 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f001 fc99 	bl	800c9a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b074:	e008      	b.n	800b088 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 fc92 	bl	800c9a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b07e:	2303      	movs	r3, #3
 800b080:	75fb      	strb	r3, [r7, #23]
          break;
 800b082:	e002      	b.n	800b08a <USBD_CDC_Setup+0x19e>
          break;
 800b084:	bf00      	nop
 800b086:	e008      	b.n	800b09a <USBD_CDC_Setup+0x1ae>
          break;
 800b088:	bf00      	nop
      }
      break;
 800b08a:	e006      	b.n	800b09a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f001 fc87 	bl	800c9a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b094:	2303      	movs	r3, #3
 800b096:	75fb      	strb	r3, [r7, #23]
      break;
 800b098:	bf00      	nop
  }

  return (uint8_t)ret;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	32b0      	adds	r2, #176	@ 0xb0
 800b0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e065      	b.n	800b19a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	32b0      	adds	r2, #176	@ 0xb0
 800b0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0de:	78fb      	ldrb	r3, [r7, #3]
 800b0e0:	f003 020f 	and.w	r2, r3, #15
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	3318      	adds	r3, #24
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d02f      	beq.n	800b158 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	f003 020f 	and.w	r2, r3, #15
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	4613      	mov	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	440b      	add	r3, r1
 800b10a:	3318      	adds	r3, #24
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	78fb      	ldrb	r3, [r7, #3]
 800b110:	f003 010f 	and.w	r1, r3, #15
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	460b      	mov	r3, r1
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	440b      	add	r3, r1
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4403      	add	r3, r0
 800b120:	331c      	adds	r3, #28
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	fbb2 f1f3 	udiv	r1, r2, r3
 800b128:	fb01 f303 	mul.w	r3, r1, r3
 800b12c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d112      	bne.n	800b158 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b132:	78fb      	ldrb	r3, [r7, #3]
 800b134:	f003 020f 	and.w	r2, r3, #15
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	4613      	mov	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	440b      	add	r3, r1
 800b144:	3318      	adds	r3, #24
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b14a:	78f9      	ldrb	r1, [r7, #3]
 800b14c:	2300      	movs	r3, #0
 800b14e:	2200      	movs	r2, #0
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f005 fbbe 	bl	80108d2 <USBD_LL_Transmit>
 800b156:	e01f      	b.n	800b198 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	33b0      	adds	r3, #176	@ 0xb0
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d010      	beq.n	800b198 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	33b0      	adds	r3, #176	@ 0xb0
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b194:	78fa      	ldrb	r2, [r7, #3]
 800b196:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b084      	sub	sp, #16
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	32b0      	adds	r2, #176	@ 0xb0
 800b1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	32b0      	adds	r2, #176	@ 0xb0
 800b1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e01a      	b.n	800b20a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f005 fbbc 	bl	8010956 <USBD_LL_GetRxDataSize>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	33b0      	adds	r3, #176	@ 0xb0
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b204:	4611      	mov	r1, r2
 800b206:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	32b0      	adds	r2, #176	@ 0xb0
 800b224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b228:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b230:	2303      	movs	r3, #3
 800b232:	e024      	b.n	800b27e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	33b0      	adds	r3, #176	@ 0xb0
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d019      	beq.n	800b27c <USBD_CDC_EP0_RxReady+0x6a>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b24e:	2bff      	cmp	r3, #255	@ 0xff
 800b250:	d014      	beq.n	800b27c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	33b0      	adds	r3, #176	@ 0xb0
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b26a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b272:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	22ff      	movs	r2, #255	@ 0xff
 800b278:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
	...

0800b288 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b290:	2182      	movs	r1, #130	@ 0x82
 800b292:	4818      	ldr	r0, [pc, #96]	@ (800b2f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b294:	f000 fd4f 	bl	800bd36 <USBD_GetEpDesc>
 800b298:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b29a:	2101      	movs	r1, #1
 800b29c:	4815      	ldr	r0, [pc, #84]	@ (800b2f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b29e:	f000 fd4a 	bl	800bd36 <USBD_GetEpDesc>
 800b2a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2a4:	2181      	movs	r1, #129	@ 0x81
 800b2a6:	4813      	ldr	r0, [pc, #76]	@ (800b2f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2a8:	f000 fd45 	bl	800bd36 <USBD_GetEpDesc>
 800b2ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2210      	movs	r2, #16
 800b2b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2c8:	711a      	strb	r2, [r3, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d006      	beq.n	800b2e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2dc:	711a      	strb	r2, [r3, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2243      	movs	r2, #67	@ 0x43
 800b2e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2e8:	4b02      	ldr	r3, [pc, #8]	@ (800b2f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20000050 	.word	0x20000050

0800b2f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b300:	2182      	movs	r1, #130	@ 0x82
 800b302:	4818      	ldr	r0, [pc, #96]	@ (800b364 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b304:	f000 fd17 	bl	800bd36 <USBD_GetEpDesc>
 800b308:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b30a:	2101      	movs	r1, #1
 800b30c:	4815      	ldr	r0, [pc, #84]	@ (800b364 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b30e:	f000 fd12 	bl	800bd36 <USBD_GetEpDesc>
 800b312:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b314:	2181      	movs	r1, #129	@ 0x81
 800b316:	4813      	ldr	r0, [pc, #76]	@ (800b364 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b318:	f000 fd0d 	bl	800bd36 <USBD_GetEpDesc>
 800b31c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2210      	movs	r2, #16
 800b328:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d006      	beq.n	800b33e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	2200      	movs	r2, #0
 800b334:	711a      	strb	r2, [r3, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f042 0202 	orr.w	r2, r2, #2
 800b33c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d006      	beq.n	800b352 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	711a      	strb	r2, [r3, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f042 0202 	orr.w	r2, r2, #2
 800b350:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2243      	movs	r2, #67	@ 0x43
 800b356:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b358:	4b02      	ldr	r3, [pc, #8]	@ (800b364 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3718      	adds	r7, #24
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	20000050 	.word	0x20000050

0800b368 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b370:	2182      	movs	r1, #130	@ 0x82
 800b372:	4818      	ldr	r0, [pc, #96]	@ (800b3d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b374:	f000 fcdf 	bl	800bd36 <USBD_GetEpDesc>
 800b378:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b37a:	2101      	movs	r1, #1
 800b37c:	4815      	ldr	r0, [pc, #84]	@ (800b3d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b37e:	f000 fcda 	bl	800bd36 <USBD_GetEpDesc>
 800b382:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b384:	2181      	movs	r1, #129	@ 0x81
 800b386:	4813      	ldr	r0, [pc, #76]	@ (800b3d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b388:	f000 fcd5 	bl	800bd36 <USBD_GetEpDesc>
 800b38c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2210      	movs	r2, #16
 800b398:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d006      	beq.n	800b3ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3a8:	711a      	strb	r2, [r3, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d006      	beq.n	800b3c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3bc:	711a      	strb	r2, [r3, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2243      	movs	r2, #67	@ 0x43
 800b3c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3c8:	4b02      	ldr	r3, [pc, #8]	@ (800b3d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000050 	.word	0x20000050

0800b3d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	220a      	movs	r2, #10
 800b3e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3e6:	4b03      	ldr	r3, [pc, #12]	@ (800b3f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	2000000c 	.word	0x2000000c

0800b3f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e009      	b.n	800b420 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	33b0      	adds	r3, #176	@ 0xb0
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b087      	sub	sp, #28
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	32b0      	adds	r2, #176	@ 0xb0
 800b442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b446:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b44e:	2303      	movs	r3, #3
 800b450:	e008      	b.n	800b464 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	32b0      	adds	r2, #176	@ 0xb0
 800b484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b488:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b490:	2303      	movs	r3, #3
 800b492:	e004      	b.n	800b49e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
	...

0800b4ac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32b0      	adds	r2, #176	@ 0xb0
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	e025      	b.n	800b51e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d11f      	bne.n	800b51c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4e4:	4b10      	ldr	r3, [pc, #64]	@ (800b528 <USBD_CDC_TransmitPacket+0x7c>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f003 020f 	and.w	r2, r3, #15
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4403      	add	r3, r0
 800b4fe:	3318      	adds	r3, #24
 800b500:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b502:	4b09      	ldr	r3, [pc, #36]	@ (800b528 <USBD_CDC_TransmitPacket+0x7c>)
 800b504:	7819      	ldrb	r1, [r3, #0]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f005 f9dd 	bl	80108d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	20000093 	.word	0x20000093

0800b52c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	32b0      	adds	r2, #176	@ 0xb0
 800b53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b542:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	32b0      	adds	r2, #176	@ 0xb0
 800b54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b556:	2303      	movs	r3, #3
 800b558:	e018      	b.n	800b58c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	7c1b      	ldrb	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b562:	4b0c      	ldr	r3, [pc, #48]	@ (800b594 <USBD_CDC_ReceivePacket+0x68>)
 800b564:	7819      	ldrb	r1, [r3, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b56c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f005 f9cf 	bl	8010914 <USBD_LL_PrepareReceive>
 800b576:	e008      	b.n	800b58a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b578:	4b06      	ldr	r3, [pc, #24]	@ (800b594 <USBD_CDC_ReceivePacket+0x68>)
 800b57a:	7819      	ldrb	r1, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b582:	2340      	movs	r3, #64	@ 0x40
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f005 f9c5 	bl	8010914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	20000094 	.word	0x20000094

0800b598 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e01f      	b.n	800b5f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	79fa      	ldrb	r2, [r7, #7]
 800b5e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f005 f83f 	bl	8010668 <USBD_LL_Init>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b602:	2300      	movs	r3, #0
 800b604:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e025      	b.n	800b65c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	32ae      	adds	r2, #174	@ 0xae
 800b622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00f      	beq.n	800b64c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	32ae      	adds	r2, #174	@ 0xae
 800b636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63c:	f107 020e 	add.w	r2, r7, #14
 800b640:	4610      	mov	r0, r2
 800b642:	4798      	blx	r3
 800b644:	4602      	mov	r2, r0
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f005 f847 	bl	8010700 <USBD_LL_Start>
 800b672:	4603      	mov	r3, r0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b684:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	78fa      	ldrb	r2, [r7, #3]
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3
 800b6bc:	4603      	mov	r3, r0
 800b6be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	78fa      	ldrb	r2, [r7, #3]
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	4798      	blx	r3
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b70e:	6839      	ldr	r1, [r7, #0]
 800b710:	4618      	mov	r0, r3
 800b712:	f001 f90c 	bl	800c92e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b724:	461a      	mov	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b732:	f003 031f 	and.w	r3, r3, #31
 800b736:	2b02      	cmp	r3, #2
 800b738:	d01a      	beq.n	800b770 <USBD_LL_SetupStage+0x72>
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d822      	bhi.n	800b784 <USBD_LL_SetupStage+0x86>
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <USBD_LL_SetupStage+0x4a>
 800b742:	2b01      	cmp	r3, #1
 800b744:	d00a      	beq.n	800b75c <USBD_LL_SetupStage+0x5e>
 800b746:	e01d      	b.n	800b784 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fb63 	bl	800be1c <USBD_StdDevReq>
 800b756:	4603      	mov	r3, r0
 800b758:	73fb      	strb	r3, [r7, #15]
      break;
 800b75a:	e020      	b.n	800b79e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b762:	4619      	mov	r1, r3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fbcb 	bl	800bf00 <USBD_StdItfReq>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73fb      	strb	r3, [r7, #15]
      break;
 800b76e:	e016      	b.n	800b79e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fc2d 	bl	800bfd8 <USBD_StdEPReq>
 800b77e:	4603      	mov	r3, r0
 800b780:	73fb      	strb	r3, [r7, #15]
      break;
 800b782:	e00c      	b.n	800b79e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b78a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f005 f814 	bl	80107c0 <USBD_LL_StallEP>
 800b798:	4603      	mov	r3, r0
 800b79a:	73fb      	strb	r3, [r7, #15]
      break;
 800b79c:	bf00      	nop
  }

  return ret;
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b7ba:	7afb      	ldrb	r3, [r7, #11]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d16e      	bne.n	800b89e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b7c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	f040 8098 	bne.w	800b904 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d913      	bls.n	800b808 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	1ad2      	subs	r2, r2, r3
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	68da      	ldr	r2, [r3, #12]
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	bf28      	it	cs
 800b7fa:	4613      	movcs	r3, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f001 f994 	bl	800cb2e <USBD_CtlContinueRx>
 800b806:	e07d      	b.n	800b904 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b80e:	f003 031f 	and.w	r3, r3, #31
 800b812:	2b02      	cmp	r3, #2
 800b814:	d014      	beq.n	800b840 <USBD_LL_DataOutStage+0x98>
 800b816:	2b02      	cmp	r3, #2
 800b818:	d81d      	bhi.n	800b856 <USBD_LL_DataOutStage+0xae>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <USBD_LL_DataOutStage+0x7c>
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d003      	beq.n	800b82a <USBD_LL_DataOutStage+0x82>
 800b822:	e018      	b.n	800b856 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b824:	2300      	movs	r3, #0
 800b826:	75bb      	strb	r3, [r7, #22]
            break;
 800b828:	e018      	b.n	800b85c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b830:	b2db      	uxtb	r3, r3
 800b832:	4619      	mov	r1, r3
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 fa64 	bl	800bd02 <USBD_CoreFindIF>
 800b83a:	4603      	mov	r3, r0
 800b83c:	75bb      	strb	r3, [r7, #22]
            break;
 800b83e:	e00d      	b.n	800b85c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b846:	b2db      	uxtb	r3, r3
 800b848:	4619      	mov	r1, r3
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 fa66 	bl	800bd1c <USBD_CoreFindEP>
 800b850:	4603      	mov	r3, r0
 800b852:	75bb      	strb	r3, [r7, #22]
            break;
 800b854:	e002      	b.n	800b85c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	75bb      	strb	r3, [r7, #22]
            break;
 800b85a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b85c:	7dbb      	ldrb	r3, [r7, #22]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d119      	bne.n	800b896 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d113      	bne.n	800b896 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b86e:	7dba      	ldrb	r2, [r7, #22]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	32ae      	adds	r2, #174	@ 0xae
 800b874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00b      	beq.n	800b896 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b87e:	7dba      	ldrb	r2, [r7, #22]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b886:	7dba      	ldrb	r2, [r7, #22]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	32ae      	adds	r2, #174	@ 0xae
 800b88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b890:	691b      	ldr	r3, [r3, #16]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f001 f95a 	bl	800cb50 <USBD_CtlSendStatus>
 800b89c:	e032      	b.n	800b904 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b89e:	7afb      	ldrb	r3, [r7, #11]
 800b8a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 fa37 	bl	800bd1c <USBD_CoreFindEP>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8b2:	7dbb      	ldrb	r3, [r7, #22]
 800b8b4:	2bff      	cmp	r3, #255	@ 0xff
 800b8b6:	d025      	beq.n	800b904 <USBD_LL_DataOutStage+0x15c>
 800b8b8:	7dbb      	ldrb	r3, [r7, #22]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d122      	bne.n	800b904 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d117      	bne.n	800b8fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8ca:	7dba      	ldrb	r2, [r7, #22]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	32ae      	adds	r2, #174	@ 0xae
 800b8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00f      	beq.n	800b8fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8da:	7dba      	ldrb	r2, [r7, #22]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8e2:	7dba      	ldrb	r2, [r7, #22]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	32ae      	adds	r2, #174	@ 0xae
 800b8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	7afa      	ldrb	r2, [r7, #11]
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	4798      	blx	r3
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	e000      	b.n	800b906 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b086      	sub	sp, #24
 800b912:	af00      	add	r7, sp, #0
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	460b      	mov	r3, r1
 800b918:	607a      	str	r2, [r7, #4]
 800b91a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b91c:	7afb      	ldrb	r3, [r7, #11]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d16f      	bne.n	800ba02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3314      	adds	r3, #20
 800b926:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d15a      	bne.n	800b9e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d914      	bls.n	800b968 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	689a      	ldr	r2, [r3, #8]
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	1ad2      	subs	r2, r2, r3
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	461a      	mov	r2, r3
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f001 f8bc 	bl	800cad2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b95a:	2300      	movs	r3, #0
 800b95c:	2200      	movs	r2, #0
 800b95e:	2100      	movs	r1, #0
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f004 ffd7 	bl	8010914 <USBD_LL_PrepareReceive>
 800b966:	e03f      	b.n	800b9e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	68da      	ldr	r2, [r3, #12]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	429a      	cmp	r2, r3
 800b972:	d11c      	bne.n	800b9ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	685a      	ldr	r2, [r3, #4]
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d316      	bcc.n	800b9ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d20f      	bcs.n	800b9ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b98e:	2200      	movs	r2, #0
 800b990:	2100      	movs	r1, #0
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f001 f89d 	bl	800cad2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f004 ffb4 	bl	8010914 <USBD_LL_PrepareReceive>
 800b9ac:	e01c      	b.n	800b9e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d10f      	bne.n	800b9da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d009      	beq.n	800b9da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9da:	2180      	movs	r1, #128	@ 0x80
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f004 feef 	bl	80107c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f001 f8c7 	bl	800cb76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d03a      	beq.n	800ba68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff fe42 	bl	800b67c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ba00:	e032      	b.n	800ba68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f985 	bl	800bd1c <USBD_CoreFindEP>
 800ba12:	4603      	mov	r3, r0
 800ba14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
 800ba18:	2bff      	cmp	r3, #255	@ 0xff
 800ba1a:	d025      	beq.n	800ba68 <USBD_LL_DataInStage+0x15a>
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d122      	bne.n	800ba68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d11c      	bne.n	800ba68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba2e:	7dfa      	ldrb	r2, [r7, #23]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	32ae      	adds	r2, #174	@ 0xae
 800ba34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba38:	695b      	ldr	r3, [r3, #20]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d014      	beq.n	800ba68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba3e:	7dfa      	ldrb	r2, [r7, #23]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba46:	7dfa      	ldrb	r2, [r7, #23]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	32ae      	adds	r2, #174	@ 0xae
 800ba4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	7afa      	ldrb	r2, [r7, #11]
 800ba54:	4611      	mov	r1, r2
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	4798      	blx	r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba5e:	7dbb      	ldrb	r3, [r7, #22]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba64:	7dbb      	ldrb	r3, [r7, #22]
 800ba66:	e000      	b.n	800ba6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d014      	beq.n	800bad8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00e      	beq.n	800bad8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	6852      	ldr	r2, [r2, #4]
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	4611      	mov	r1, r2
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bad4:	2303      	movs	r3, #3
 800bad6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bad8:	2340      	movs	r3, #64	@ 0x40
 800bada:	2200      	movs	r2, #0
 800badc:	2100      	movs	r1, #0
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f004 fe29 	bl	8010736 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2240      	movs	r2, #64	@ 0x40
 800baf0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baf4:	2340      	movs	r3, #64	@ 0x40
 800baf6:	2200      	movs	r2, #0
 800baf8:	2180      	movs	r1, #128	@ 0x80
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f004 fe1b 	bl	8010736 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2240      	movs	r2, #64	@ 0x40
 800bb0a:	621a      	str	r2, [r3, #32]

  return ret;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	78fa      	ldrb	r2, [r7, #3]
 800bb26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b083      	sub	sp, #12
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d006      	beq.n	800bb58 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2204      	movs	r2, #4
 800bb5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	370c      	adds	r7, #12
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b083      	sub	sp, #12
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d106      	bne.n	800bb90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d110      	bne.n	800bbd4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00b      	beq.n	800bbd4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d005      	beq.n	800bbd4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbce:	69db      	ldr	r3, [r3, #28]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	32ae      	adds	r2, #174	@ 0xae
 800bbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e01c      	b.n	800bc3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d115      	bne.n	800bc38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	32ae      	adds	r2, #174	@ 0xae
 800bc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1a:	6a1b      	ldr	r3, [r3, #32]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	32ae      	adds	r2, #174	@ 0xae
 800bc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2e:	6a1b      	ldr	r3, [r3, #32]
 800bc30:	78fa      	ldrb	r2, [r7, #3]
 800bc32:	4611      	mov	r1, r2
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b082      	sub	sp, #8
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	32ae      	adds	r2, #174	@ 0xae
 800bc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e01c      	b.n	800bc9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d115      	bne.n	800bc9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	32ae      	adds	r2, #174	@ 0xae
 800bc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00b      	beq.n	800bc9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	32ae      	adds	r2, #174	@ 0xae
 800bc8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc94:	78fa      	ldrb	r2, [r7, #3]
 800bc96:	4611      	mov	r1, r2
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00e      	beq.n	800bcf8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	6852      	ldr	r2, [r2, #4]
 800bce6:	b2d2      	uxtb	r2, r2
 800bce8:	4611      	mov	r1, r2
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	4798      	blx	r3
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	370c      	adds	r7, #12
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b086      	sub	sp, #24
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	885b      	ldrh	r3, [r3, #2]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	7812      	ldrb	r2, [r2, #0]
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d91f      	bls.n	800bd9c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd62:	e013      	b.n	800bd8c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd64:	f107 030a 	add.w	r3, r7, #10
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6978      	ldr	r0, [r7, #20]
 800bd6c:	f000 f81b 	bl	800bda6 <USBD_GetNextDesc>
 800bd70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	785b      	ldrb	r3, [r3, #1]
 800bd76:	2b05      	cmp	r3, #5
 800bd78:	d108      	bne.n	800bd8c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	789b      	ldrb	r3, [r3, #2]
 800bd82:	78fa      	ldrb	r2, [r7, #3]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d008      	beq.n	800bd9a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	885b      	ldrh	r3, [r3, #2]
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	897b      	ldrh	r3, [r7, #10]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d8e5      	bhi.n	800bd64 <USBD_GetEpDesc+0x2e>
 800bd98:	e000      	b.n	800bd9c <USBD_GetEpDesc+0x66>
          break;
 800bd9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd9c:	693b      	ldr	r3, [r7, #16]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bda6:	b480      	push	{r7}
 800bda8:	b085      	sub	sp, #20
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	7812      	ldrb	r2, [r2, #0]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3714      	adds	r7, #20
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b087      	sub	sp, #28
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdfc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800be00:	021b      	lsls	r3, r3, #8
 800be02:	b21a      	sxth	r2, r3
 800be04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be08:	4313      	orrs	r3, r2
 800be0a:	b21b      	sxth	r3, r3
 800be0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be0e:	89fb      	ldrh	r3, [r7, #14]
}
 800be10:	4618      	mov	r0, r3
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be32:	2b40      	cmp	r3, #64	@ 0x40
 800be34:	d005      	beq.n	800be42 <USBD_StdDevReq+0x26>
 800be36:	2b40      	cmp	r3, #64	@ 0x40
 800be38:	d857      	bhi.n	800beea <USBD_StdDevReq+0xce>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00f      	beq.n	800be5e <USBD_StdDevReq+0x42>
 800be3e:	2b20      	cmp	r3, #32
 800be40:	d153      	bne.n	800beea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	32ae      	adds	r2, #174	@ 0xae
 800be4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
      break;
 800be5c:	e04a      	b.n	800bef4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	785b      	ldrb	r3, [r3, #1]
 800be62:	2b09      	cmp	r3, #9
 800be64:	d83b      	bhi.n	800bede <USBD_StdDevReq+0xc2>
 800be66:	a201      	add	r2, pc, #4	@ (adr r2, 800be6c <USBD_StdDevReq+0x50>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800bec1 	.word	0x0800bec1
 800be70:	0800bed5 	.word	0x0800bed5
 800be74:	0800bedf 	.word	0x0800bedf
 800be78:	0800becb 	.word	0x0800becb
 800be7c:	0800bedf 	.word	0x0800bedf
 800be80:	0800be9f 	.word	0x0800be9f
 800be84:	0800be95 	.word	0x0800be95
 800be88:	0800bedf 	.word	0x0800bedf
 800be8c:	0800beb7 	.word	0x0800beb7
 800be90:	0800bea9 	.word	0x0800bea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa3c 	bl	800c314 <USBD_GetDescriptor>
          break;
 800be9c:	e024      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fba1 	bl	800c5e8 <USBD_SetAddress>
          break;
 800bea6:	e01f      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fbe0 	bl	800c670 <USBD_SetConfig>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
          break;
 800beb4:	e018      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fc83 	bl	800c7c4 <USBD_GetConfig>
          break;
 800bebe:	e013      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcb4 	bl	800c830 <USBD_GetStatus>
          break;
 800bec8:	e00e      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fce3 	bl	800c898 <USBD_SetFeature>
          break;
 800bed2:	e009      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fd07 	bl	800c8ea <USBD_ClrFeature>
          break;
 800bedc:	e004      	b.n	800bee8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fd5e 	bl	800c9a2 <USBD_CtlError>
          break;
 800bee6:	bf00      	nop
      }
      break;
 800bee8:	e004      	b.n	800bef4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fd58 	bl	800c9a2 <USBD_CtlError>
      break;
 800bef2:	bf00      	nop
  }

  return ret;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop

0800bf00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf16:	2b40      	cmp	r3, #64	@ 0x40
 800bf18:	d005      	beq.n	800bf26 <USBD_StdItfReq+0x26>
 800bf1a:	2b40      	cmp	r3, #64	@ 0x40
 800bf1c:	d852      	bhi.n	800bfc4 <USBD_StdItfReq+0xc4>
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <USBD_StdItfReq+0x26>
 800bf22:	2b20      	cmp	r3, #32
 800bf24:	d14e      	bne.n	800bfc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d840      	bhi.n	800bfb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	889b      	ldrh	r3, [r3, #4]
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d836      	bhi.n	800bfac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	889b      	ldrh	r3, [r3, #4]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fedb 	bl	800bd02 <USBD_CoreFindIF>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	2bff      	cmp	r3, #255	@ 0xff
 800bf54:	d01d      	beq.n	800bf92 <USBD_StdItfReq+0x92>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11a      	bne.n	800bf92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf5c:	7bba      	ldrb	r2, [r7, #14]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	32ae      	adds	r2, #174	@ 0xae
 800bf62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00f      	beq.n	800bf8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf6c:	7bba      	ldrb	r2, [r7, #14]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf74:	7bba      	ldrb	r2, [r7, #14]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	32ae      	adds	r2, #174	@ 0xae
 800bf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	4798      	blx	r3
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf8a:	e004      	b.n	800bf96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf90:	e001      	b.n	800bf96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	88db      	ldrh	r3, [r3, #6]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d110      	bne.n	800bfc0 <USBD_StdItfReq+0xc0>
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10d      	bne.n	800bfc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fdd3 	bl	800cb50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfaa:	e009      	b.n	800bfc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fcf7 	bl	800c9a2 <USBD_CtlError>
          break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fcf2 	bl	800c9a2 <USBD_CtlError>
          break;
 800bfbe:	e000      	b.n	800bfc2 <USBD_StdItfReq+0xc2>
          break;
 800bfc0:	bf00      	nop
      }
      break;
 800bfc2:	e004      	b.n	800bfce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fceb 	bl	800c9a2 <USBD_CtlError>
      break;
 800bfcc:	bf00      	nop
  }

  return ret;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	889b      	ldrh	r3, [r3, #4]
 800bfea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bff4:	2b40      	cmp	r3, #64	@ 0x40
 800bff6:	d007      	beq.n	800c008 <USBD_StdEPReq+0x30>
 800bff8:	2b40      	cmp	r3, #64	@ 0x40
 800bffa:	f200 817f 	bhi.w	800c2fc <USBD_StdEPReq+0x324>
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d02a      	beq.n	800c058 <USBD_StdEPReq+0x80>
 800c002:	2b20      	cmp	r3, #32
 800c004:	f040 817a 	bne.w	800c2fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff fe85 	bl	800bd1c <USBD_CoreFindEP>
 800c012:	4603      	mov	r3, r0
 800c014:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c016:	7b7b      	ldrb	r3, [r7, #13]
 800c018:	2bff      	cmp	r3, #255	@ 0xff
 800c01a:	f000 8174 	beq.w	800c306 <USBD_StdEPReq+0x32e>
 800c01e:	7b7b      	ldrb	r3, [r7, #13]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f040 8170 	bne.w	800c306 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c026:	7b7a      	ldrb	r2, [r7, #13]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c02e:	7b7a      	ldrb	r2, [r7, #13]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	32ae      	adds	r2, #174	@ 0xae
 800c034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 8163 	beq.w	800c306 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c040:	7b7a      	ldrb	r2, [r7, #13]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	32ae      	adds	r2, #174	@ 0xae
 800c046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	4798      	blx	r3
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c056:	e156      	b.n	800c306 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	785b      	ldrb	r3, [r3, #1]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d008      	beq.n	800c072 <USBD_StdEPReq+0x9a>
 800c060:	2b03      	cmp	r3, #3
 800c062:	f300 8145 	bgt.w	800c2f0 <USBD_StdEPReq+0x318>
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 809b 	beq.w	800c1a2 <USBD_StdEPReq+0x1ca>
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d03c      	beq.n	800c0ea <USBD_StdEPReq+0x112>
 800c070:	e13e      	b.n	800c2f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d002      	beq.n	800c084 <USBD_StdEPReq+0xac>
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d016      	beq.n	800c0b0 <USBD_StdEPReq+0xd8>
 800c082:	e02c      	b.n	800c0de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00d      	beq.n	800c0a6 <USBD_StdEPReq+0xce>
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	2b80      	cmp	r3, #128	@ 0x80
 800c08e:	d00a      	beq.n	800c0a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f004 fb93 	bl	80107c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c09a:	2180      	movs	r1, #128	@ 0x80
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f004 fb8f 	bl	80107c0 <USBD_LL_StallEP>
 800c0a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0a4:	e020      	b.n	800c0e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fc7a 	bl	800c9a2 <USBD_CtlError>
              break;
 800c0ae:	e01b      	b.n	800c0e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	885b      	ldrh	r3, [r3, #2]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10e      	bne.n	800c0d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00b      	beq.n	800c0d6 <USBD_StdEPReq+0xfe>
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b80      	cmp	r3, #128	@ 0x80
 800c0c2:	d008      	beq.n	800c0d6 <USBD_StdEPReq+0xfe>
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	88db      	ldrh	r3, [r3, #6]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f004 fb75 	bl	80107c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fd3a 	bl	800cb50 <USBD_CtlSendStatus>

              break;
 800c0dc:	e004      	b.n	800c0e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc5e 	bl	800c9a2 <USBD_CtlError>
              break;
 800c0e6:	bf00      	nop
          }
          break;
 800c0e8:	e107      	b.n	800c2fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d002      	beq.n	800c0fc <USBD_StdEPReq+0x124>
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	d016      	beq.n	800c128 <USBD_StdEPReq+0x150>
 800c0fa:	e04b      	b.n	800c194 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00d      	beq.n	800c11e <USBD_StdEPReq+0x146>
 800c102:	7bbb      	ldrb	r3, [r7, #14]
 800c104:	2b80      	cmp	r3, #128	@ 0x80
 800c106:	d00a      	beq.n	800c11e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f004 fb57 	bl	80107c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c112:	2180      	movs	r1, #128	@ 0x80
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f004 fb53 	bl	80107c0 <USBD_LL_StallEP>
 800c11a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c11c:	e040      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fc3e 	bl	800c9a2 <USBD_CtlError>
              break;
 800c126:	e03b      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	885b      	ldrh	r3, [r3, #2]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d136      	bne.n	800c19e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c136:	2b00      	cmp	r3, #0
 800c138:	d004      	beq.n	800c144 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f004 fb5d 	bl	80107fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fd03 	bl	800cb50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fde4 	bl	800bd1c <USBD_CoreFindEP>
 800c154:	4603      	mov	r3, r0
 800c156:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c158:	7b7b      	ldrb	r3, [r7, #13]
 800c15a:	2bff      	cmp	r3, #255	@ 0xff
 800c15c:	d01f      	beq.n	800c19e <USBD_StdEPReq+0x1c6>
 800c15e:	7b7b      	ldrb	r3, [r7, #13]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11c      	bne.n	800c19e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c164:	7b7a      	ldrb	r2, [r7, #13]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c16c:	7b7a      	ldrb	r2, [r7, #13]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	32ae      	adds	r2, #174	@ 0xae
 800c172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d010      	beq.n	800c19e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c17c:	7b7a      	ldrb	r2, [r7, #13]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32ae      	adds	r2, #174	@ 0xae
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	4798      	blx	r3
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c192:	e004      	b.n	800c19e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c194:	6839      	ldr	r1, [r7, #0]
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fc03 	bl	800c9a2 <USBD_CtlError>
              break;
 800c19c:	e000      	b.n	800c1a0 <USBD_StdEPReq+0x1c8>
              break;
 800c19e:	bf00      	nop
          }
          break;
 800c1a0:	e0ab      	b.n	800c2fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d002      	beq.n	800c1b4 <USBD_StdEPReq+0x1dc>
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d032      	beq.n	800c218 <USBD_StdEPReq+0x240>
 800c1b2:	e097      	b.n	800c2e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d007      	beq.n	800c1ca <USBD_StdEPReq+0x1f2>
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	2b80      	cmp	r3, #128	@ 0x80
 800c1be:	d004      	beq.n	800c1ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fbed 	bl	800c9a2 <USBD_CtlError>
                break;
 800c1c8:	e091      	b.n	800c2ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da0b      	bge.n	800c1ea <USBD_StdEPReq+0x212>
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	3310      	adds	r3, #16
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	e00b      	b.n	800c202 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	4413      	add	r3, r2
 800c200:	3304      	adds	r3, #4
 800c202:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2202      	movs	r2, #2
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fc43 	bl	800ca9c <USBD_CtlSendData>
              break;
 800c216:	e06a      	b.n	800c2ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	da11      	bge.n	800c244 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	f003 020f 	and.w	r2, r3, #15
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	4613      	mov	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	3324      	adds	r3, #36	@ 0x24
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d117      	bne.n	800c26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fbb0 	bl	800c9a2 <USBD_CtlError>
                  break;
 800c242:	e054      	b.n	800c2ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	f003 020f 	and.w	r2, r3, #15
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	4613      	mov	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	440b      	add	r3, r1
 800c256:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fb9d 	bl	800c9a2 <USBD_CtlError>
                  break;
 800c268:	e041      	b.n	800c2ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c26a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da0b      	bge.n	800c28a <USBD_StdEPReq+0x2b2>
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	3310      	adds	r3, #16
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	4413      	add	r3, r2
 800c286:	3304      	adds	r3, #4
 800c288:	e00b      	b.n	800c2a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	4413      	add	r3, r2
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <USBD_StdEPReq+0x2d8>
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b80      	cmp	r3, #128	@ 0x80
 800c2ae:	d103      	bne.n	800c2b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	e00e      	b.n	800c2d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f004 fabd 	bl	801083c <USBD_LL_IsStallEP>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d003      	beq.n	800c2d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2202      	movs	r2, #2
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fbdd 	bl	800ca9c <USBD_CtlSendData>
              break;
 800c2e2:	e004      	b.n	800c2ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fb5b 	bl	800c9a2 <USBD_CtlError>
              break;
 800c2ec:	bf00      	nop
          }
          break;
 800c2ee:	e004      	b.n	800c2fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fb55 	bl	800c9a2 <USBD_CtlError>
          break;
 800c2f8:	bf00      	nop
      }
      break;
 800c2fa:	e005      	b.n	800c308 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fb4f 	bl	800c9a2 <USBD_CtlError>
      break;
 800c304:	e000      	b.n	800c308 <USBD_StdEPReq+0x330>
      break;
 800c306:	bf00      	nop
  }

  return ret;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c326:	2300      	movs	r3, #0
 800c328:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	0a1b      	lsrs	r3, r3, #8
 800c330:	b29b      	uxth	r3, r3
 800c332:	3b01      	subs	r3, #1
 800c334:	2b06      	cmp	r3, #6
 800c336:	f200 8128 	bhi.w	800c58a <USBD_GetDescriptor+0x276>
 800c33a:	a201      	add	r2, pc, #4	@ (adr r2, 800c340 <USBD_GetDescriptor+0x2c>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c35d 	.word	0x0800c35d
 800c344:	0800c375 	.word	0x0800c375
 800c348:	0800c3b5 	.word	0x0800c3b5
 800c34c:	0800c58b 	.word	0x0800c58b
 800c350:	0800c58b 	.word	0x0800c58b
 800c354:	0800c52b 	.word	0x0800c52b
 800c358:	0800c557 	.word	0x0800c557
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
      break;
 800c372:	e112      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	7c1b      	ldrb	r3, [r3, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10d      	bne.n	800c398 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c384:	f107 0208 	add.w	r2, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3301      	adds	r3, #1
 800c392:	2202      	movs	r2, #2
 800c394:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c396:	e100      	b.n	800c59a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a0:	f107 0208 	add.w	r2, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	701a      	strb	r2, [r3, #0]
      break;
 800c3b2:	e0f2      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	885b      	ldrh	r3, [r3, #2]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b05      	cmp	r3, #5
 800c3bc:	f200 80ac 	bhi.w	800c518 <USBD_GetDescriptor+0x204>
 800c3c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c8 <USBD_GetDescriptor+0xb4>)
 800c3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c6:	bf00      	nop
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c415 	.word	0x0800c415
 800c3d0:	0800c449 	.word	0x0800c449
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c4b1 	.word	0x0800c4b1
 800c3dc:	0800c4e5 	.word	0x0800c4e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c402:	e091      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 facb 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c40c:	7afb      	ldrb	r3, [r7, #11]
 800c40e:	3301      	adds	r3, #1
 800c410:	72fb      	strb	r3, [r7, #11]
          break;
 800c412:	e089      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00b      	beq.n	800c438 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	7c12      	ldrb	r2, [r2, #16]
 800c42c:	f107 0108 	add.w	r1, r7, #8
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
 800c434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c436:	e077      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fab1 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3301      	adds	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]
          break;
 800c446:	e06f      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00b      	beq.n	800c46c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46a:	e05d      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa97 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c474:	7afb      	ldrb	r3, [r7, #11]
 800c476:	3301      	adds	r3, #1
 800c478:	72fb      	strb	r3, [r7, #11]
          break;
 800c47a:	e055      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49e:	e043      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa7d 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ae:	e03b      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d2:	e029      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa63 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e2:	e021      	b.n	800c528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	7c12      	ldrb	r2, [r2, #16]
 800c4fc:	f107 0108 	add.w	r1, r7, #8
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
 800c504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c506:	e00f      	b.n	800c528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa49 	bl	800c9a2 <USBD_CtlError>
            err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
          break;
 800c516:	e007      	b.n	800c528 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fa41 	bl	800c9a2 <USBD_CtlError>
          err++;
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	3301      	adds	r3, #1
 800c524:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c526:	bf00      	nop
      }
      break;
 800c528:	e037      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	7c1b      	ldrb	r3, [r3, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d109      	bne.n	800c546 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c53a:	f107 0208 	add.w	r2, r7, #8
 800c53e:	4610      	mov	r0, r2
 800c540:	4798      	blx	r3
 800c542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c544:	e029      	b.n	800c59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa2a 	bl	800c9a2 <USBD_CtlError>
        err++;
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	3301      	adds	r3, #1
 800c552:	72fb      	strb	r3, [r7, #11]
      break;
 800c554:	e021      	b.n	800c59a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7c1b      	ldrb	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10d      	bne.n	800c57a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c566:	f107 0208 	add.w	r2, r7, #8
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	2207      	movs	r2, #7
 800c576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c578:	e00f      	b.n	800c59a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fa10 	bl	800c9a2 <USBD_CtlError>
        err++;
 800c582:	7afb      	ldrb	r3, [r7, #11]
 800c584:	3301      	adds	r3, #1
 800c586:	72fb      	strb	r3, [r7, #11]
      break;
 800c588:	e007      	b.n	800c59a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fa08 	bl	800c9a2 <USBD_CtlError>
      err++;
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	3301      	adds	r3, #1
 800c596:	72fb      	strb	r3, [r7, #11]
      break;
 800c598:	bf00      	nop
  }

  if (err != 0U)
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11e      	bne.n	800c5de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	88db      	ldrh	r3, [r3, #6]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d016      	beq.n	800c5d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5a8:	893b      	ldrh	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00e      	beq.n	800c5cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	88da      	ldrh	r2, [r3, #6]
 800c5b2:	893b      	ldrh	r3, [r7, #8]
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	bf28      	it	cs
 800c5b8:	4613      	movcs	r3, r2
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5be:	893b      	ldrh	r3, [r7, #8]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa69 	bl	800ca9c <USBD_CtlSendData>
 800c5ca:	e009      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f9e7 	bl	800c9a2 <USBD_CtlError>
 800c5d4:	e004      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 faba 	bl	800cb50 <USBD_CtlSendStatus>
 800c5dc:	e000      	b.n	800c5e0 <USBD_GetDescriptor+0x2cc>
    return;
 800c5de:	bf00      	nop
  }
}
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop

0800c5e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	889b      	ldrh	r3, [r3, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d131      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	88db      	ldrh	r3, [r3, #6]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d12d      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	885b      	ldrh	r3, [r3, #2]
 800c606:	2b7f      	cmp	r3, #127	@ 0x7f
 800c608:	d829      	bhi.n	800c65e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d104      	bne.n	800c62c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f9bc 	bl	800c9a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	e01d      	b.n	800c668 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7bfa      	ldrb	r2, [r7, #15]
 800c630:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f004 f92b 	bl	8010894 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa86 	bl	800cb50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2202      	movs	r2, #2
 800c64e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c652:	e009      	b.n	800c668 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65c:	e004      	b.n	800c668 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f99e 	bl	800c9a2 <USBD_CtlError>
  }
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	885b      	ldrh	r3, [r3, #2]
 800c682:	b2da      	uxtb	r2, r3
 800c684:	4b4e      	ldr	r3, [pc, #312]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c686:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c688:	4b4d      	ldr	r3, [pc, #308]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d905      	bls.n	800c69c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f985 	bl	800c9a2 <USBD_CtlError>
    return USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e08c      	b.n	800c7b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d002      	beq.n	800c6ae <USBD_SetConfig+0x3e>
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d029      	beq.n	800c700 <USBD_SetConfig+0x90>
 800c6ac:	e075      	b.n	800c79a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6ae:	4b44      	ldr	r3, [pc, #272]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d020      	beq.n	800c6f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6b6:	4b42      	ldr	r3, [pc, #264]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6c0:	4b3f      	ldr	r3, [pc, #252]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7fe ffe3 	bl	800b692 <USBD_SetClassConfig>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d008      	beq.n	800c6e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f962 	bl	800c9a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6e6:	e065      	b.n	800c7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fa31 	bl	800cb50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2203      	movs	r2, #3
 800c6f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6f6:	e05d      	b.n	800c7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fa29 	bl	800cb50 <USBD_CtlSendStatus>
      break;
 800c6fe:	e059      	b.n	800c7b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c700:	4b2f      	ldr	r3, [pc, #188]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d112      	bne.n	800c72e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c710:	4b2b      	ldr	r3, [pc, #172]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	461a      	mov	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c71a:	4b29      	ldr	r3, [pc, #164]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7fe ffd2 	bl	800b6ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa12 	bl	800cb50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c72c:	e042      	b.n	800c7b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c72e:	4b24      	ldr	r3, [pc, #144]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	461a      	mov	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d02a      	beq.n	800c792 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7fe ffc0 	bl	800b6ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c74a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c754:	4b1a      	ldr	r3, [pc, #104]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7fe ff99 	bl	800b692 <USBD_SetClassConfig>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00f      	beq.n	800c78a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f918 	bl	800c9a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe ffa5 	bl	800b6ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c788:	e014      	b.n	800c7b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f9e0 	bl	800cb50 <USBD_CtlSendStatus>
      break;
 800c790:	e010      	b.n	800c7b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f9dc 	bl	800cb50 <USBD_CtlSendStatus>
      break;
 800c798:	e00c      	b.n	800c7b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f900 	bl	800c9a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7a2:	4b07      	ldr	r3, [pc, #28]	@ (800c7c0 <USBD_SetConfig+0x150>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7fe ff8e 	bl	800b6ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b2:	bf00      	nop
  }

  return ret;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	2000064c 	.word	0x2000064c

0800c7c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	88db      	ldrh	r3, [r3, #6]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d004      	beq.n	800c7e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f8e2 	bl	800c9a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7de:	e023      	b.n	800c828 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	dc02      	bgt.n	800c7f2 <USBD_GetConfig+0x2e>
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dc03      	bgt.n	800c7f8 <USBD_GetConfig+0x34>
 800c7f0:	e015      	b.n	800c81e <USBD_GetConfig+0x5a>
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	d00b      	beq.n	800c80e <USBD_GetConfig+0x4a>
 800c7f6:	e012      	b.n	800c81e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3308      	adds	r3, #8
 800c802:	2201      	movs	r2, #1
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f948 	bl	800ca9c <USBD_CtlSendData>
        break;
 800c80c:	e00c      	b.n	800c828 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3304      	adds	r3, #4
 800c812:	2201      	movs	r2, #1
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f940 	bl	800ca9c <USBD_CtlSendData>
        break;
 800c81c:	e004      	b.n	800c828 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f8be 	bl	800c9a2 <USBD_CtlError>
        break;
 800c826:	bf00      	nop
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c840:	b2db      	uxtb	r3, r3
 800c842:	3b01      	subs	r3, #1
 800c844:	2b02      	cmp	r3, #2
 800c846:	d81e      	bhi.n	800c886 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	88db      	ldrh	r3, [r3, #6]
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d004      	beq.n	800c85a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f8a5 	bl	800c9a2 <USBD_CtlError>
        break;
 800c858:	e01a      	b.n	800c890 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	f043 0202 	orr.w	r2, r3, #2
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	330c      	adds	r3, #12
 800c87a:	2202      	movs	r2, #2
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f90c 	bl	800ca9c <USBD_CtlSendData>
      break;
 800c884:	e004      	b.n	800c890 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f88a 	bl	800c9a2 <USBD_CtlError>
      break;
 800c88e:	bf00      	nop
  }
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	885b      	ldrh	r3, [r3, #2]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d107      	bne.n	800c8ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f94c 	bl	800cb50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8b8:	e013      	b.n	800c8e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	885b      	ldrh	r3, [r3, #2]
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d10b      	bne.n	800c8da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	889b      	ldrh	r3, [r3, #4]
 800c8c6:	0a1b      	lsrs	r3, r3, #8
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f93c 	bl	800cb50 <USBD_CtlSendStatus>
}
 800c8d8:	e003      	b.n	800c8e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f860 	bl	800c9a2 <USBD_CtlError>
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d80b      	bhi.n	800c91a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	885b      	ldrh	r3, [r3, #2]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d10c      	bne.n	800c924 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f91c 	bl	800cb50 <USBD_CtlSendStatus>
      }
      break;
 800c918:	e004      	b.n	800c924 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f840 	bl	800c9a2 <USBD_CtlError>
      break;
 800c922:	e000      	b.n	800c926 <USBD_ClrFeature+0x3c>
      break;
 800c924:	bf00      	nop
  }
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	781a      	ldrb	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3301      	adds	r3, #1
 800c948:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	781a      	ldrb	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff fa40 	bl	800bdde <SWAPBYTE>
 800c95e:	4603      	mov	r3, r0
 800c960:	461a      	mov	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3301      	adds	r3, #1
 800c970:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7ff fa33 	bl	800bdde <SWAPBYTE>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fa26 	bl	800bdde <SWAPBYTE>
 800c992:	4603      	mov	r3, r0
 800c994:	461a      	mov	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	80da      	strh	r2, [r3, #6]
}
 800c99a:	bf00      	nop
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ac:	2180      	movs	r1, #128	@ 0x80
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f003 ff06 	bl	80107c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f003 ff02 	bl	80107c0 <USBD_LL_StallEP>
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d042      	beq.n	800ca60 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c9de:	6938      	ldr	r0, [r7, #16]
 800c9e0:	f000 f842 	bl	800ca68 <USBD_GetLen>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9ee:	d808      	bhi.n	800ca02 <USBD_GetString+0x3e>
 800c9f0:	6938      	ldr	r0, [r7, #16]
 800c9f2:	f000 f839 	bl	800ca68 <USBD_GetLen>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	e001      	b.n	800ca06 <USBD_GetString+0x42>
 800ca02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	4413      	add	r3, r2
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	7812      	ldrb	r2, [r2, #0]
 800ca14:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca1c:	7dfb      	ldrb	r3, [r7, #23]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	4413      	add	r3, r2
 800ca22:	2203      	movs	r2, #3
 800ca24:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca26:	7dfb      	ldrb	r3, [r7, #23]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca2c:	e013      	b.n	800ca56 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	4413      	add	r3, r2
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	7812      	ldrb	r2, [r2, #0]
 800ca38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	613b      	str	r3, [r7, #16]
    idx++;
 800ca40:	7dfb      	ldrb	r3, [r7, #23]
 800ca42:	3301      	adds	r3, #1
 800ca44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
 800ca52:	3301      	adds	r3, #1
 800ca54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1e7      	bne.n	800ca2e <USBD_GetString+0x6a>
 800ca5e:	e000      	b.n	800ca62 <USBD_GetString+0x9e>
    return;
 800ca60:	bf00      	nop
  }
}
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca78:	e005      	b.n	800ca86 <USBD_GetLen+0x1e>
  {
    len++;
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	3301      	adds	r3, #1
 800ca84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1f5      	bne.n	800ca7a <USBD_GetLen+0x12>
  }

  return len;
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2202      	movs	r2, #2
 800caac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	2100      	movs	r1, #0
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f003 ff05 	bl	80108d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b084      	sub	sp, #16
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	2100      	movs	r1, #0
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f003 fef4 	bl	80108d2 <USBD_LL_Transmit>

  return USBD_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2203      	movs	r2, #3
 800cb04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f003 fef8 	bl	8010914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	60f8      	str	r0, [r7, #12]
 800cb36:	60b9      	str	r1, [r7, #8]
 800cb38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	2100      	movs	r1, #0
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f003 fee7 	bl	8010914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2204      	movs	r2, #4
 800cb5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb60:	2300      	movs	r3, #0
 800cb62:	2200      	movs	r2, #0
 800cb64:	2100      	movs	r1, #0
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f003 feb3 	bl	80108d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2205      	movs	r2, #5
 800cb82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb86:	2300      	movs	r3, #0
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f003 fec1 	bl	8010914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <__NVIC_SetPriority>:
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	db0a      	blt.n	800cbc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	490c      	ldr	r1, [pc, #48]	@ (800cbe8 <__NVIC_SetPriority+0x4c>)
 800cbb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbba:	0112      	lsls	r2, r2, #4
 800cbbc:	b2d2      	uxtb	r2, r2
 800cbbe:	440b      	add	r3, r1
 800cbc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cbc4:	e00a      	b.n	800cbdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	4908      	ldr	r1, [pc, #32]	@ (800cbec <__NVIC_SetPriority+0x50>)
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	f003 030f 	and.w	r3, r3, #15
 800cbd2:	3b04      	subs	r3, #4
 800cbd4:	0112      	lsls	r2, r2, #4
 800cbd6:	b2d2      	uxtb	r2, r2
 800cbd8:	440b      	add	r3, r1
 800cbda:	761a      	strb	r2, [r3, #24]
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	e000e100 	.word	0xe000e100
 800cbec:	e000ed00 	.word	0xe000ed00

0800cbf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cbf4:	4b05      	ldr	r3, [pc, #20]	@ (800cc0c <SysTick_Handler+0x1c>)
 800cbf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cbf8:	f002 f8c4 	bl	800ed84 <xTaskGetSchedulerState>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d001      	beq.n	800cc06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cc02:	f002 ff79 	bl	800faf8 <xPortSysTickHandler>
  }
}
 800cc06:	bf00      	nop
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	e000e010 	.word	0xe000e010

0800cc10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cc14:	2100      	movs	r1, #0
 800cc16:	f06f 0004 	mvn.w	r0, #4
 800cc1a:	f7ff ffbf 	bl	800cb9c <__NVIC_SetPriority>
#endif
}
 800cc1e:	bf00      	nop
 800cc20:	bd80      	pop	{r7, pc}
	...

0800cc24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc2a:	f3ef 8305 	mrs	r3, IPSR
 800cc2e:	603b      	str	r3, [r7, #0]
  return(result);
 800cc30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cc36:	f06f 0305 	mvn.w	r3, #5
 800cc3a:	607b      	str	r3, [r7, #4]
 800cc3c:	e00c      	b.n	800cc58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc3e:	4b0a      	ldr	r3, [pc, #40]	@ (800cc68 <osKernelInitialize+0x44>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d105      	bne.n	800cc52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc46:	4b08      	ldr	r3, [pc, #32]	@ (800cc68 <osKernelInitialize+0x44>)
 800cc48:	2201      	movs	r2, #1
 800cc4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	607b      	str	r3, [r7, #4]
 800cc50:	e002      	b.n	800cc58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cc52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc58:	687b      	ldr	r3, [r7, #4]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	20000650 	.word	0x20000650

0800cc6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc72:	f3ef 8305 	mrs	r3, IPSR
 800cc76:	603b      	str	r3, [r7, #0]
  return(result);
 800cc78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cc7e:	f06f 0305 	mvn.w	r3, #5
 800cc82:	607b      	str	r3, [r7, #4]
 800cc84:	e010      	b.n	800cca8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc86:	4b0b      	ldr	r3, [pc, #44]	@ (800ccb4 <osKernelStart+0x48>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d109      	bne.n	800cca2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc8e:	f7ff ffbf 	bl	800cc10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc92:	4b08      	ldr	r3, [pc, #32]	@ (800ccb4 <osKernelStart+0x48>)
 800cc94:	2202      	movs	r2, #2
 800cc96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc98:	f001 fbfe 	bl	800e498 <vTaskStartScheduler>
      stat = osOK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	607b      	str	r3, [r7, #4]
 800cca0:	e002      	b.n	800cca8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cca8:	687b      	ldr	r3, [r7, #4]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	20000650 	.word	0x20000650

0800ccb8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccbe:	f3ef 8305 	mrs	r3, IPSR
 800ccc2:	603b      	str	r3, [r7, #0]
  return(result);
 800ccc4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d003      	beq.n	800ccd2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ccca:	f001 fd11 	bl	800e6f0 <xTaskGetTickCountFromISR>
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	e002      	b.n	800ccd8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ccd2:	f001 fcfd 	bl	800e6d0 <xTaskGetTickCount>
 800ccd6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ccd8:	687b      	ldr	r3, [r7, #4]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b08e      	sub	sp, #56	@ 0x38
 800cce6:	af04      	add	r7, sp, #16
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	60b9      	str	r1, [r7, #8]
 800ccec:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccf2:	f3ef 8305 	mrs	r3, IPSR
 800ccf6:	617b      	str	r3, [r7, #20]
  return(result);
 800ccf8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d17e      	bne.n	800cdfc <osThreadNew+0x11a>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d07b      	beq.n	800cdfc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cd04:	2380      	movs	r3, #128	@ 0x80
 800cd06:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cd08:	2318      	movs	r3, #24
 800cd0a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cd10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d045      	beq.n	800cda8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <osThreadNew+0x48>
        name = attr->name;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d002      	beq.n	800cd38 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d008      	beq.n	800cd50 <osThreadNew+0x6e>
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	2b38      	cmp	r3, #56	@ 0x38
 800cd42:	d805      	bhi.n	800cd50 <osThreadNew+0x6e>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	f003 0301 	and.w	r3, r3, #1
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <osThreadNew+0x72>
        return (NULL);
 800cd50:	2300      	movs	r3, #0
 800cd52:	e054      	b.n	800cdfe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	089b      	lsrs	r3, r3, #2
 800cd62:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00e      	beq.n	800cd8a <osThreadNew+0xa8>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	2ba7      	cmp	r3, #167	@ 0xa7
 800cd72:	d90a      	bls.n	800cd8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d006      	beq.n	800cd8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <osThreadNew+0xa8>
        mem = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	61bb      	str	r3, [r7, #24]
 800cd88:	e010      	b.n	800cdac <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10c      	bne.n	800cdac <osThreadNew+0xca>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d108      	bne.n	800cdac <osThreadNew+0xca>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d104      	bne.n	800cdac <osThreadNew+0xca>
          mem = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	61bb      	str	r3, [r7, #24]
 800cda6:	e001      	b.n	800cdac <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d110      	bne.n	800cdd4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdba:	9202      	str	r2, [sp, #8]
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6a3a      	ldr	r2, [r7, #32]
 800cdc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f001 f971 	bl	800e0b0 <xTaskCreateStatic>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	613b      	str	r3, [r7, #16]
 800cdd2:	e013      	b.n	800cdfc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d110      	bne.n	800cdfc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	f107 0310 	add.w	r3, r7, #16
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f001 f9bf 	bl	800e170 <xTaskCreate>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d001      	beq.n	800cdfc <osThreadNew+0x11a>
            hTask = NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cdfc:	693b      	ldr	r3, [r7, #16]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3728      	adds	r7, #40	@ 0x28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b084      	sub	sp, #16
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce0e:	f3ef 8305 	mrs	r3, IPSR
 800ce12:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d003      	beq.n	800ce22 <osDelay+0x1c>
    stat = osErrorISR;
 800ce1a:	f06f 0305 	mvn.w	r3, #5
 800ce1e:	60fb      	str	r3, [r7, #12]
 800ce20:	e007      	b.n	800ce32 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f001 fafd 	bl	800e42c <vTaskDelay>
    }
  }

  return (stat);
 800ce32:	68fb      	ldr	r3, [r7, #12]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f002 fc77 	bl	800f738 <pvTimerGetTimerID>
 800ce4a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d005      	beq.n	800ce5e <TimerCallback+0x22>
    callb->func (callb->arg);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	6852      	ldr	r2, [r2, #4]
 800ce5a:	4610      	mov	r0, r2
 800ce5c:	4798      	blx	r3
  }
}
 800ce5e:	bf00      	nop
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
	...

0800ce68 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08c      	sub	sp, #48	@ 0x30
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	607a      	str	r2, [r7, #4]
 800ce72:	603b      	str	r3, [r7, #0]
 800ce74:	460b      	mov	r3, r1
 800ce76:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce7c:	f3ef 8305 	mrs	r3, IPSR
 800ce80:	613b      	str	r3, [r7, #16]
  return(result);
 800ce82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d163      	bne.n	800cf50 <osTimerNew+0xe8>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d060      	beq.n	800cf50 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ce8e:	2008      	movs	r0, #8
 800ce90:	f002 fec4 	bl	800fc1c <pvPortMalloc>
 800ce94:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d059      	beq.n	800cf50 <osTimerNew+0xe8>
      callb->func = func;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800cea8:	7afb      	ldrb	r3, [r7, #11]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	61fb      	str	r3, [r7, #28]
 800ceb2:	e001      	b.n	800ceb8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ceb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cebc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01c      	beq.n	800cf02 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <osTimerNew+0x6e>
          name = attr->name;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d006      	beq.n	800ceec <osTimerNew+0x84>
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	2b2b      	cmp	r3, #43	@ 0x2b
 800cee4:	d902      	bls.n	800ceec <osTimerNew+0x84>
          mem = 1;
 800cee6:	2301      	movs	r3, #1
 800cee8:	61bb      	str	r3, [r7, #24]
 800ceea:	e00c      	b.n	800cf06 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d108      	bne.n	800cf06 <osTimerNew+0x9e>
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d104      	bne.n	800cf06 <osTimerNew+0x9e>
            mem = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	61bb      	str	r3, [r7, #24]
 800cf00:	e001      	b.n	800cf06 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d10c      	bne.n	800cf26 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	4b12      	ldr	r3, [pc, #72]	@ (800cf5c <osTimerNew+0xf4>)
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	69fa      	ldr	r2, [r7, #28]
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf1e:	f002 f87e 	bl	800f01e <xTimerCreateStatic>
 800cf22:	6238      	str	r0, [r7, #32]
 800cf24:	e00b      	b.n	800cf3e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d108      	bne.n	800cf3e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800cf2c:	4b0b      	ldr	r3, [pc, #44]	@ (800cf5c <osTimerNew+0xf4>)
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	69fa      	ldr	r2, [r7, #28]
 800cf34:	2101      	movs	r1, #1
 800cf36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf38:	f002 f850 	bl	800efdc <xTimerCreate>
 800cf3c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d105      	bne.n	800cf50 <osTimerNew+0xe8>
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d002      	beq.n	800cf50 <osTimerNew+0xe8>
        vPortFree (callb);
 800cf4a:	6978      	ldr	r0, [r7, #20]
 800cf4c:	f002 ff34 	bl	800fdb8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800cf50:	6a3b      	ldr	r3, [r7, #32]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3728      	adds	r7, #40	@ 0x28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	0800ce3d 	.word	0x0800ce3d

0800cf60 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b088      	sub	sp, #32
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf6c:	f3ef 8305 	mrs	r3, IPSR
 800cf70:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf72:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d174      	bne.n	800d062 <osMutexNew+0x102>
    if (attr != NULL) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <osMutexNew+0x26>
      type = attr->attr_bits;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	61bb      	str	r3, [r7, #24]
 800cf84:	e001      	b.n	800cf8a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cf86:	2300      	movs	r3, #0
 800cf88:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <osMutexNew+0x3a>
      rmtx = 1U;
 800cf94:	2301      	movs	r3, #1
 800cf96:	617b      	str	r3, [r7, #20]
 800cf98:	e001      	b.n	800cf9e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	f003 0308 	and.w	r3, r3, #8
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d15c      	bne.n	800d062 <osMutexNew+0x102>
      mem = -1;
 800cfa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfac:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d015      	beq.n	800cfe0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d006      	beq.n	800cfca <osMutexNew+0x6a>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	2b4f      	cmp	r3, #79	@ 0x4f
 800cfc2:	d902      	bls.n	800cfca <osMutexNew+0x6a>
          mem = 1;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	613b      	str	r3, [r7, #16]
 800cfc8:	e00c      	b.n	800cfe4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d108      	bne.n	800cfe4 <osMutexNew+0x84>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d104      	bne.n	800cfe4 <osMutexNew+0x84>
            mem = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	e001      	b.n	800cfe4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d112      	bne.n	800d010 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d007      	beq.n	800d000 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	4619      	mov	r1, r3
 800cff6:	2004      	movs	r0, #4
 800cff8:	f000 fb93 	bl	800d722 <xQueueCreateMutexStatic>
 800cffc:	61f8      	str	r0, [r7, #28]
 800cffe:	e016      	b.n	800d02e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	4619      	mov	r1, r3
 800d006:	2001      	movs	r0, #1
 800d008:	f000 fb8b 	bl	800d722 <xQueueCreateMutexStatic>
 800d00c:	61f8      	str	r0, [r7, #28]
 800d00e:	e00e      	b.n	800d02e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d004      	beq.n	800d026 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d01c:	2004      	movs	r0, #4
 800d01e:	f000 fb68 	bl	800d6f2 <xQueueCreateMutex>
 800d022:	61f8      	str	r0, [r7, #28]
 800d024:	e003      	b.n	800d02e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d026:	2001      	movs	r0, #1
 800d028:	f000 fb63 	bl	800d6f2 <xQueueCreateMutex>
 800d02c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00c      	beq.n	800d04e <osMutexNew+0xee>
        if (attr != NULL) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <osMutexNew+0xe2>
          name = attr->name;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	e001      	b.n	800d046 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d042:	2300      	movs	r3, #0
 800d044:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d046:	68f9      	ldr	r1, [r7, #12]
 800d048:	69f8      	ldr	r0, [r7, #28]
 800d04a:	f000 ffa9 	bl	800dfa0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d006      	beq.n	800d062 <osMutexNew+0x102>
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d003      	beq.n	800d062 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	f043 0301 	orr.w	r3, r3, #1
 800d060:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d062:	69fb      	ldr	r3, [r7, #28]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3720      	adds	r7, #32
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08a      	sub	sp, #40	@ 0x28
 800d070:	af02      	add	r7, sp, #8
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d07c:	f3ef 8305 	mrs	r3, IPSR
 800d080:	613b      	str	r3, [r7, #16]
  return(result);
 800d082:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d084:	2b00      	cmp	r3, #0
 800d086:	d175      	bne.n	800d174 <osSemaphoreNew+0x108>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d072      	beq.n	800d174 <osSemaphoreNew+0x108>
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	429a      	cmp	r2, r3
 800d094:	d86e      	bhi.n	800d174 <osSemaphoreNew+0x108>
    mem = -1;
 800d096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d09a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d015      	beq.n	800d0ce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <osSemaphoreNew+0x4c>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	2b4f      	cmp	r3, #79	@ 0x4f
 800d0b0:	d902      	bls.n	800d0b8 <osSemaphoreNew+0x4c>
        mem = 1;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	61bb      	str	r3, [r7, #24]
 800d0b6:	e00c      	b.n	800d0d2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d108      	bne.n	800d0d2 <osSemaphoreNew+0x66>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d104      	bne.n	800d0d2 <osSemaphoreNew+0x66>
          mem = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	61bb      	str	r3, [r7, #24]
 800d0cc:	e001      	b.n	800d0d2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0d8:	d04c      	beq.n	800d174 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d128      	bne.n	800d132 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d10a      	bne.n	800d0fc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	2203      	movs	r2, #3
 800d0ec:	9200      	str	r2, [sp, #0]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	2001      	movs	r0, #1
 800d0f4:	f000 fa08 	bl	800d508 <xQueueGenericCreateStatic>
 800d0f8:	61f8      	str	r0, [r7, #28]
 800d0fa:	e005      	b.n	800d108 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d0fc:	2203      	movs	r2, #3
 800d0fe:	2100      	movs	r1, #0
 800d100:	2001      	movs	r0, #1
 800d102:	f000 fa7e 	bl	800d602 <xQueueGenericCreate>
 800d106:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d022      	beq.n	800d154 <osSemaphoreNew+0xe8>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d01f      	beq.n	800d154 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d114:	2300      	movs	r3, #0
 800d116:	2200      	movs	r2, #0
 800d118:	2100      	movs	r1, #0
 800d11a:	69f8      	ldr	r0, [r7, #28]
 800d11c:	f000 fb8a 	bl	800d834 <xQueueGenericSend>
 800d120:	4603      	mov	r3, r0
 800d122:	2b01      	cmp	r3, #1
 800d124:	d016      	beq.n	800d154 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d126:	69f8      	ldr	r0, [r7, #28]
 800d128:	f000 fe06 	bl	800dd38 <vQueueDelete>
            hSemaphore = NULL;
 800d12c:	2300      	movs	r3, #0
 800d12e:	61fb      	str	r3, [r7, #28]
 800d130:	e010      	b.n	800d154 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d108      	bne.n	800d14a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	461a      	mov	r2, r3
 800d13e:	68b9      	ldr	r1, [r7, #8]
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 fb09 	bl	800d758 <xQueueCreateCountingSemaphoreStatic>
 800d146:	61f8      	str	r0, [r7, #28]
 800d148:	e004      	b.n	800d154 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d14a:	68b9      	ldr	r1, [r7, #8]
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 fb3c 	bl	800d7ca <xQueueCreateCountingSemaphore>
 800d152:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00c      	beq.n	800d174 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d003      	beq.n	800d168 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	e001      	b.n	800d16c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d168:	2300      	movs	r3, #0
 800d16a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d16c:	6979      	ldr	r1, [r7, #20]
 800d16e:	69f8      	ldr	r0, [r7, #28]
 800d170:	f000 ff16 	bl	800dfa0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d174:	69fb      	ldr	r3, [r7, #28]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3720      	adds	r7, #32
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d17e:	b580      	push	{r7, lr}
 800d180:	b08a      	sub	sp, #40	@ 0x28
 800d182:	af02      	add	r7, sp, #8
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d18a:	2300      	movs	r3, #0
 800d18c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d18e:	f3ef 8305 	mrs	r3, IPSR
 800d192:	613b      	str	r3, [r7, #16]
  return(result);
 800d194:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d196:	2b00      	cmp	r3, #0
 800d198:	d15f      	bne.n	800d25a <osMessageQueueNew+0xdc>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d05c      	beq.n	800d25a <osMessageQueueNew+0xdc>
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d059      	beq.n	800d25a <osMessageQueueNew+0xdc>
    mem = -1;
 800d1a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d029      	beq.n	800d206 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d012      	beq.n	800d1e0 <osMessageQueueNew+0x62>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	2b4f      	cmp	r3, #79	@ 0x4f
 800d1c0:	d90e      	bls.n	800d1e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	695a      	ldr	r2, [r3, #20]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68b9      	ldr	r1, [r7, #8]
 800d1d2:	fb01 f303 	mul.w	r3, r1, r3
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d302      	bcc.n	800d1e0 <osMessageQueueNew+0x62>
        mem = 1;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	61bb      	str	r3, [r7, #24]
 800d1de:	e014      	b.n	800d20a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d110      	bne.n	800d20a <osMessageQueueNew+0x8c>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10c      	bne.n	800d20a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d108      	bne.n	800d20a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d104      	bne.n	800d20a <osMessageQueueNew+0x8c>
          mem = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	61bb      	str	r3, [r7, #24]
 800d204:	e001      	b.n	800d20a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d10b      	bne.n	800d228 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	691a      	ldr	r2, [r3, #16]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	2100      	movs	r1, #0
 800d21a:	9100      	str	r1, [sp, #0]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 f972 	bl	800d508 <xQueueGenericCreateStatic>
 800d224:	61f8      	str	r0, [r7, #28]
 800d226:	e008      	b.n	800d23a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d105      	bne.n	800d23a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d22e:	2200      	movs	r2, #0
 800d230:	68b9      	ldr	r1, [r7, #8]
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f000 f9e5 	bl	800d602 <xQueueGenericCreate>
 800d238:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00c      	beq.n	800d25a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <osMessageQueueNew+0xd0>
        name = attr->name;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	e001      	b.n	800d252 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d252:	6979      	ldr	r1, [r7, #20]
 800d254:	69f8      	ldr	r0, [r7, #28]
 800d256:	f000 fea3 	bl	800dfa0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d25a:	69fb      	ldr	r3, [r7, #28]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3720      	adds	r7, #32
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	4a07      	ldr	r2, [pc, #28]	@ (800d290 <vApplicationGetIdleTaskMemory+0x2c>)
 800d274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	4a06      	ldr	r2, [pc, #24]	@ (800d294 <vApplicationGetIdleTaskMemory+0x30>)
 800d27a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2280      	movs	r2, #128	@ 0x80
 800d280:	601a      	str	r2, [r3, #0]
}
 800d282:	bf00      	nop
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000654 	.word	0x20000654
 800d294:	200006fc 	.word	0x200006fc

0800d298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4a07      	ldr	r2, [pc, #28]	@ (800d2c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d2a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	4a06      	ldr	r2, [pc, #24]	@ (800d2c8 <vApplicationGetTimerTaskMemory+0x30>)
 800d2ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d2b6:	601a      	str	r2, [r3, #0]
}
 800d2b8:	bf00      	nop
 800d2ba:	3714      	adds	r7, #20
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	200008fc 	.word	0x200008fc
 800d2c8:	200009a4 	.word	0x200009a4

0800d2cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f103 0208 	add.w	r2, r3, #8
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f103 0208 	add.w	r2, r3, #8
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f103 0208 	add.w	r2, r3, #8
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d31a:	bf00      	nop
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d326:	b480      	push	{r7}
 800d328:	b085      	sub	sp, #20
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	689a      	ldr	r2, [r3, #8]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	601a      	str	r2, [r3, #0]
}
 800d362:	bf00      	nop
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d36e:	b480      	push	{r7}
 800d370:	b085      	sub	sp, #20
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d384:	d103      	bne.n	800d38e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	e00c      	b.n	800d3a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	3308      	adds	r3, #8
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	e002      	b.n	800d39c <vListInsert+0x2e>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	60fb      	str	r3, [r7, #12]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d2f6      	bcs.n	800d396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	601a      	str	r2, [r3, #0]
}
 800d3d4:	bf00      	nop
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	6892      	ldr	r2, [r2, #8]
 800d3f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	6852      	ldr	r2, [r2, #4]
 800d400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d103      	bne.n	800d414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	689a      	ldr	r2, [r3, #8]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	1e5a      	subs	r2, r3, #1
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3714      	adds	r7, #20
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10b      	bne.n	800d460 <xQueueGenericReset+0x2c>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	60bb      	str	r3, [r7, #8]
}
 800d45a:	bf00      	nop
 800d45c:	bf00      	nop
 800d45e:	e7fd      	b.n	800d45c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d460:	f002 faba 	bl	800f9d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d46c:	68f9      	ldr	r1, [r7, #12]
 800d46e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d470:	fb01 f303 	mul.w	r3, r1, r3
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d490:	3b01      	subs	r3, #1
 800d492:	68f9      	ldr	r1, [r7, #12]
 800d494:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d496:	fb01 f303 	mul.w	r3, r1, r3
 800d49a:	441a      	add	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	22ff      	movs	r2, #255	@ 0xff
 800d4a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	22ff      	movs	r2, #255	@ 0xff
 800d4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d114      	bne.n	800d4e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d01a      	beq.n	800d4f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3310      	adds	r3, #16
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f001 fa98 	bl	800e9f8 <xTaskRemoveFromEventList>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d012      	beq.n	800d4f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <xQueueGenericReset+0xd0>)
 800d4d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	e009      	b.n	800d4f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	3310      	adds	r3, #16
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff fef1 	bl	800d2cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	3324      	adds	r3, #36	@ 0x24
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff feec 	bl	800d2cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d4f4:	f002 faa2 	bl	800fa3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d4f8:	2301      	movs	r3, #1
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	e000ed04 	.word	0xe000ed04

0800d508 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08e      	sub	sp, #56	@ 0x38
 800d50c:	af02      	add	r7, sp, #8
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
 800d514:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10b      	bne.n	800d534 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d52e:	bf00      	nop
 800d530:	bf00      	nop
 800d532:	e7fd      	b.n	800d530 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10b      	bne.n	800d552 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d54c:	bf00      	nop
 800d54e:	bf00      	nop
 800d550:	e7fd      	b.n	800d54e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <xQueueGenericCreateStatic+0x56>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <xQueueGenericCreateStatic+0x5a>
 800d55e:	2301      	movs	r3, #1
 800d560:	e000      	b.n	800d564 <xQueueGenericCreateStatic+0x5c>
 800d562:	2300      	movs	r3, #0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10b      	bne.n	800d580 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	623b      	str	r3, [r7, #32]
}
 800d57a:	bf00      	nop
 800d57c:	bf00      	nop
 800d57e:	e7fd      	b.n	800d57c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <xQueueGenericCreateStatic+0x84>
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <xQueueGenericCreateStatic+0x88>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <xQueueGenericCreateStatic+0x8a>
 800d590:	2300      	movs	r3, #0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10b      	bne.n	800d5ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	61fb      	str	r3, [r7, #28]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d5ae:	2350      	movs	r3, #80	@ 0x50
 800d5b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b50      	cmp	r3, #80	@ 0x50
 800d5b6:	d00b      	beq.n	800d5d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	61bb      	str	r3, [r7, #24]
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	e7fd      	b.n	800d5cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d5d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00d      	beq.n	800d5f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	68b9      	ldr	r1, [r7, #8]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 f840 	bl	800d678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3730      	adds	r7, #48	@ 0x30
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d602:	b580      	push	{r7, lr}
 800d604:	b08a      	sub	sp, #40	@ 0x28
 800d606:	af02      	add	r7, sp, #8
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	60b9      	str	r1, [r7, #8]
 800d60c:	4613      	mov	r3, r2
 800d60e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10b      	bne.n	800d62e <xQueueGenericCreate+0x2c>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	613b      	str	r3, [r7, #16]
}
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	e7fd      	b.n	800d62a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	fb02 f303 	mul.w	r3, r2, r3
 800d636:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	3350      	adds	r3, #80	@ 0x50
 800d63c:	4618      	mov	r0, r3
 800d63e:	f002 faed 	bl	800fc1c <pvPortMalloc>
 800d642:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d011      	beq.n	800d66e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	3350      	adds	r3, #80	@ 0x50
 800d652:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d65c:	79fa      	ldrb	r2, [r7, #7]
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	4613      	mov	r3, r2
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 f805 	bl	800d678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d66e:	69bb      	ldr	r3, [r7, #24]
	}
 800d670:	4618      	mov	r0, r3
 800d672:	3720      	adds	r7, #32
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d103      	bne.n	800d694 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	69ba      	ldr	r2, [r7, #24]
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	e002      	b.n	800d69a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6a6:	2101      	movs	r1, #1
 800d6a8:	69b8      	ldr	r0, [r7, #24]
 800d6aa:	f7ff fec3 	bl	800d434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	78fa      	ldrb	r2, [r7, #3]
 800d6b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6b6:	bf00      	nop
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b082      	sub	sp, #8
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00e      	beq.n	800d6ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d6de:	2300      	movs	r3, #0
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f8a5 	bl	800d834 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b086      	sub	sp, #24
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	617b      	str	r3, [r7, #20]
 800d700:	2300      	movs	r3, #0
 800d702:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d704:	79fb      	ldrb	r3, [r7, #7]
 800d706:	461a      	mov	r2, r3
 800d708:	6939      	ldr	r1, [r7, #16]
 800d70a:	6978      	ldr	r0, [r7, #20]
 800d70c:	f7ff ff79 	bl	800d602 <xQueueGenericCreate>
 800d710:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f7ff ffd3 	bl	800d6be <prvInitialiseMutex>

		return xNewQueue;
 800d718:	68fb      	ldr	r3, [r7, #12]
	}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d722:	b580      	push	{r7, lr}
 800d724:	b088      	sub	sp, #32
 800d726:	af02      	add	r7, sp, #8
 800d728:	4603      	mov	r3, r0
 800d72a:	6039      	str	r1, [r7, #0]
 800d72c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d72e:	2301      	movs	r3, #1
 800d730:	617b      	str	r3, [r7, #20]
 800d732:	2300      	movs	r3, #0
 800d734:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2200      	movs	r2, #0
 800d73e:	6939      	ldr	r1, [r7, #16]
 800d740:	6978      	ldr	r0, [r7, #20]
 800d742:	f7ff fee1 	bl	800d508 <xQueueGenericCreateStatic>
 800d746:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7ff ffb8 	bl	800d6be <prvInitialiseMutex>

		return xNewQueue;
 800d74e:	68fb      	ldr	r3, [r7, #12]
	}
 800d750:	4618      	mov	r0, r3
 800d752:	3718      	adds	r7, #24
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08a      	sub	sp, #40	@ 0x28
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10b      	bne.n	800d782 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	61bb      	str	r3, [r7, #24]
}
 800d77c:	bf00      	nop
 800d77e:	bf00      	nop
 800d780:	e7fd      	b.n	800d77e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d782:	68ba      	ldr	r2, [r7, #8]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	429a      	cmp	r2, r3
 800d788:	d90b      	bls.n	800d7a2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	617b      	str	r3, [r7, #20]
}
 800d79c:	bf00      	nop
 800d79e:	bf00      	nop
 800d7a0:	e7fd      	b.n	800d79e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff feab 	bl	800d508 <xQueueGenericCreateStatic>
 800d7b2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
	}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b086      	sub	sp, #24
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10b      	bne.n	800d7f2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7de:	f383 8811 	msr	BASEPRI, r3
 800d7e2:	f3bf 8f6f 	isb	sy
 800d7e6:	f3bf 8f4f 	dsb	sy
 800d7ea:	613b      	str	r3, [r7, #16]
}
 800d7ec:	bf00      	nop
 800d7ee:	bf00      	nop
 800d7f0:	e7fd      	b.n	800d7ee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d90b      	bls.n	800d812 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	60fb      	str	r3, [r7, #12]
}
 800d80c:	bf00      	nop
 800d80e:	bf00      	nop
 800d810:	e7fd      	b.n	800d80e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d812:	2202      	movs	r2, #2
 800d814:	2100      	movs	r1, #0
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7ff fef3 	bl	800d602 <xQueueGenericCreate>
 800d81c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d82a:	697b      	ldr	r3, [r7, #20]
	}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3718      	adds	r7, #24
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08e      	sub	sp, #56	@ 0x38
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d842:	2300      	movs	r3, #0
 800d844:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10b      	bne.n	800d868 <xQueueGenericSend+0x34>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d862:	bf00      	nop
 800d864:	bf00      	nop
 800d866:	e7fd      	b.n	800d864 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <xQueueGenericSend+0x42>
 800d86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <xQueueGenericSend+0x46>
 800d876:	2301      	movs	r3, #1
 800d878:	e000      	b.n	800d87c <xQueueGenericSend+0x48>
 800d87a:	2300      	movs	r3, #0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10b      	bne.n	800d898 <xQueueGenericSend+0x64>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d892:	bf00      	nop
 800d894:	bf00      	nop
 800d896:	e7fd      	b.n	800d894 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d103      	bne.n	800d8a6 <xQueueGenericSend+0x72>
 800d89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d101      	bne.n	800d8aa <xQueueGenericSend+0x76>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e000      	b.n	800d8ac <xQueueGenericSend+0x78>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10b      	bne.n	800d8c8 <xQueueGenericSend+0x94>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	623b      	str	r3, [r7, #32]
}
 800d8c2:	bf00      	nop
 800d8c4:	bf00      	nop
 800d8c6:	e7fd      	b.n	800d8c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8c8:	f001 fa5c 	bl	800ed84 <xTaskGetSchedulerState>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <xQueueGenericSend+0xa4>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <xQueueGenericSend+0xa8>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e000      	b.n	800d8de <xQueueGenericSend+0xaa>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10b      	bne.n	800d8fa <xQueueGenericSend+0xc6>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	61fb      	str	r3, [r7, #28]
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop
 800d8f8:	e7fd      	b.n	800d8f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8fa:	f002 f86d 	bl	800f9d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d906:	429a      	cmp	r2, r3
 800d908:	d302      	bcc.n	800d910 <xQueueGenericSend+0xdc>
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d129      	bne.n	800d964 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d910:	683a      	ldr	r2, [r7, #0]
 800d912:	68b9      	ldr	r1, [r7, #8]
 800d914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d916:	f000 fa33 	bl	800dd80 <prvCopyDataToQueue>
 800d91a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d920:	2b00      	cmp	r3, #0
 800d922:	d010      	beq.n	800d946 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d926:	3324      	adds	r3, #36	@ 0x24
 800d928:	4618      	mov	r0, r3
 800d92a:	f001 f865 	bl	800e9f8 <xTaskRemoveFromEventList>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d013      	beq.n	800d95c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d934:	4b3f      	ldr	r3, [pc, #252]	@ (800da34 <xQueueGenericSend+0x200>)
 800d936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	e00a      	b.n	800d95c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d007      	beq.n	800d95c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d94c:	4b39      	ldr	r3, [pc, #228]	@ (800da34 <xQueueGenericSend+0x200>)
 800d94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d95c:	f002 f86e 	bl	800fa3c <vPortExitCritical>
				return pdPASS;
 800d960:	2301      	movs	r3, #1
 800d962:	e063      	b.n	800da2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d103      	bne.n	800d972 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d96a:	f002 f867 	bl	800fa3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	e05c      	b.n	800da2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d974:	2b00      	cmp	r3, #0
 800d976:	d106      	bne.n	800d986 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d978:	f107 0314 	add.w	r3, r7, #20
 800d97c:	4618      	mov	r0, r3
 800d97e:	f001 f89f 	bl	800eac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d982:	2301      	movs	r3, #1
 800d984:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d986:	f002 f859 	bl	800fa3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d98a:	f000 fdf5 	bl	800e578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d98e:	f002 f823 	bl	800f9d8 <vPortEnterCritical>
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d998:	b25b      	sxtb	r3, r3
 800d99a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d99e:	d103      	bne.n	800d9a8 <xQueueGenericSend+0x174>
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9ae:	b25b      	sxtb	r3, r3
 800d9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9b4:	d103      	bne.n	800d9be <xQueueGenericSend+0x18a>
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9be:	f002 f83d 	bl	800fa3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9c2:	1d3a      	adds	r2, r7, #4
 800d9c4:	f107 0314 	add.w	r3, r7, #20
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 f88e 	bl	800eaec <xTaskCheckForTimeOut>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d124      	bne.n	800da20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d9d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9d8:	f000 faca 	bl	800df70 <prvIsQueueFull>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d018      	beq.n	800da14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e4:	3310      	adds	r3, #16
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 ffb2 	bl	800e954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d9f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9f2:	f000 fa55 	bl	800dea0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d9f6:	f000 fdcd 	bl	800e594 <xTaskResumeAll>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f47f af7c 	bne.w	800d8fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800da02:	4b0c      	ldr	r3, [pc, #48]	@ (800da34 <xQueueGenericSend+0x200>)
 800da04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	e772      	b.n	800d8fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da16:	f000 fa43 	bl	800dea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da1a:	f000 fdbb 	bl	800e594 <xTaskResumeAll>
 800da1e:	e76c      	b.n	800d8fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da22:	f000 fa3d 	bl	800dea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da26:	f000 fdb5 	bl	800e594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3738      	adds	r7, #56	@ 0x38
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	e000ed04 	.word	0xe000ed04

0800da38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b090      	sub	sp, #64	@ 0x40
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800da4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10b      	bne.n	800da68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da62:	bf00      	nop
 800da64:	bf00      	nop
 800da66:	e7fd      	b.n	800da64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <xQueueGenericSendFromISR+0x3e>
 800da6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da72:	2b00      	cmp	r3, #0
 800da74:	d101      	bne.n	800da7a <xQueueGenericSendFromISR+0x42>
 800da76:	2301      	movs	r3, #1
 800da78:	e000      	b.n	800da7c <xQueueGenericSendFromISR+0x44>
 800da7a:	2300      	movs	r3, #0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10b      	bne.n	800da98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da92:	bf00      	nop
 800da94:	bf00      	nop
 800da96:	e7fd      	b.n	800da94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d103      	bne.n	800daa6 <xQueueGenericSendFromISR+0x6e>
 800da9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d101      	bne.n	800daaa <xQueueGenericSendFromISR+0x72>
 800daa6:	2301      	movs	r3, #1
 800daa8:	e000      	b.n	800daac <xQueueGenericSendFromISR+0x74>
 800daaa:	2300      	movs	r3, #0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10b      	bne.n	800dac8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	623b      	str	r3, [r7, #32]
}
 800dac2:	bf00      	nop
 800dac4:	bf00      	nop
 800dac6:	e7fd      	b.n	800dac4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dac8:	f002 f866 	bl	800fb98 <vPortValidateInterruptPriority>
	__asm volatile
 800dacc:	f3ef 8211 	mrs	r2, BASEPRI
 800dad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	61fa      	str	r2, [r7, #28]
 800dae2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800dae4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dae6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800daec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d302      	bcc.n	800dafa <xQueueGenericSendFromISR+0xc2>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d12f      	bne.n	800db5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db10:	f000 f936 	bl	800dd80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800db18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db1c:	d112      	bne.n	800db44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db22:	2b00      	cmp	r3, #0
 800db24:	d016      	beq.n	800db54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db28:	3324      	adds	r3, #36	@ 0x24
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 ff64 	bl	800e9f8 <xTaskRemoveFromEventList>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00e      	beq.n	800db54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00b      	beq.n	800db54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	601a      	str	r2, [r3, #0]
 800db42:	e007      	b.n	800db54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800db48:	3301      	adds	r3, #1
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	b25a      	sxtb	r2, r3
 800db4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800db54:	2301      	movs	r3, #1
 800db56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800db58:	e001      	b.n	800db5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db60:	617b      	str	r3, [r7, #20]
	__asm volatile
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f383 8811 	msr	BASEPRI, r3
}
 800db68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3740      	adds	r7, #64	@ 0x40
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b08c      	sub	sp, #48	@ 0x30
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db80:	2300      	movs	r3, #0
 800db82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10b      	bne.n	800dba6 <xQueueReceive+0x32>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	623b      	str	r3, [r7, #32]
}
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	e7fd      	b.n	800dba2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d103      	bne.n	800dbb4 <xQueueReceive+0x40>
 800dbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <xQueueReceive+0x44>
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e000      	b.n	800dbba <xQueueReceive+0x46>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10b      	bne.n	800dbd6 <xQueueReceive+0x62>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	61fb      	str	r3, [r7, #28]
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	e7fd      	b.n	800dbd2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbd6:	f001 f8d5 	bl	800ed84 <xTaskGetSchedulerState>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d102      	bne.n	800dbe6 <xQueueReceive+0x72>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <xQueueReceive+0x76>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e000      	b.n	800dbec <xQueueReceive+0x78>
 800dbea:	2300      	movs	r3, #0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10b      	bne.n	800dc08 <xQueueReceive+0x94>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	61bb      	str	r3, [r7, #24]
}
 800dc02:	bf00      	nop
 800dc04:	bf00      	nop
 800dc06:	e7fd      	b.n	800dc04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc08:	f001 fee6 	bl	800f9d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d01f      	beq.n	800dc58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc18:	68b9      	ldr	r1, [r7, #8]
 800dc1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc1c:	f000 f91a 	bl	800de54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc22:	1e5a      	subs	r2, r3, #1
 800dc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00f      	beq.n	800dc50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc32:	3310      	adds	r3, #16
 800dc34:	4618      	mov	r0, r3
 800dc36:	f000 fedf 	bl	800e9f8 <xTaskRemoveFromEventList>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d007      	beq.n	800dc50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc40:	4b3c      	ldr	r3, [pc, #240]	@ (800dd34 <xQueueReceive+0x1c0>)
 800dc42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc50:	f001 fef4 	bl	800fa3c <vPortExitCritical>
				return pdPASS;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e069      	b.n	800dd2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d103      	bne.n	800dc66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc5e:	f001 feed 	bl	800fa3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc62:	2300      	movs	r3, #0
 800dc64:	e062      	b.n	800dd2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d106      	bne.n	800dc7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc6c:	f107 0310 	add.w	r3, r7, #16
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 ff25 	bl	800eac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc76:	2301      	movs	r3, #1
 800dc78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc7a:	f001 fedf 	bl	800fa3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc7e:	f000 fc7b 	bl	800e578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc82:	f001 fea9 	bl	800f9d8 <vPortEnterCritical>
 800dc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc8c:	b25b      	sxtb	r3, r3
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc92:	d103      	bne.n	800dc9c <xQueueReceive+0x128>
 800dc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dca2:	b25b      	sxtb	r3, r3
 800dca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dca8:	d103      	bne.n	800dcb2 <xQueueReceive+0x13e>
 800dcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcb2:	f001 fec3 	bl	800fa3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcb6:	1d3a      	adds	r2, r7, #4
 800dcb8:	f107 0310 	add.w	r3, r7, #16
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 ff14 	bl	800eaec <xTaskCheckForTimeOut>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d123      	bne.n	800dd12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dccc:	f000 f93a 	bl	800df44 <prvIsQueueEmpty>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d017      	beq.n	800dd06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd8:	3324      	adds	r3, #36	@ 0x24
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 fe38 	bl	800e954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dce4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dce6:	f000 f8db 	bl	800dea0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcea:	f000 fc53 	bl	800e594 <xTaskResumeAll>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d189      	bne.n	800dc08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dcf4:	4b0f      	ldr	r3, [pc, #60]	@ (800dd34 <xQueueReceive+0x1c0>)
 800dcf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcfa:	601a      	str	r2, [r3, #0]
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	e780      	b.n	800dc08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd08:	f000 f8ca 	bl	800dea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd0c:	f000 fc42 	bl	800e594 <xTaskResumeAll>
 800dd10:	e77a      	b.n	800dc08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd14:	f000 f8c4 	bl	800dea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd18:	f000 fc3c 	bl	800e594 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd1e:	f000 f911 	bl	800df44 <prvIsQueueEmpty>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f43f af6f 	beq.w	800dc08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3730      	adds	r7, #48	@ 0x30
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	e000ed04 	.word	0xe000ed04

0800dd38 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10b      	bne.n	800dd62 <vQueueDelete+0x2a>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	60bb      	str	r3, [r7, #8]
}
 800dd5c:	bf00      	nop
 800dd5e:	bf00      	nop
 800dd60:	e7fd      	b.n	800dd5e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f000 f946 	bl	800dff4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d102      	bne.n	800dd78 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f002 f820 	bl	800fdb8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dd78:	bf00      	nop
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10d      	bne.n	800ddba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d14d      	bne.n	800de42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f001 f808 	bl	800edc0 <xTaskPriorityDisinherit>
 800ddb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	609a      	str	r2, [r3, #8]
 800ddb8:	e043      	b.n	800de42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d119      	bne.n	800ddf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6858      	ldr	r0, [r3, #4]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc8:	461a      	mov	r2, r3
 800ddca:	68b9      	ldr	r1, [r7, #8]
 800ddcc:	f004 ff0c 	bl	8012be8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	685a      	ldr	r2, [r3, #4]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddd8:	441a      	add	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	685a      	ldr	r2, [r3, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d32b      	bcc.n	800de42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	605a      	str	r2, [r3, #4]
 800ddf2:	e026      	b.n	800de42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	68d8      	ldr	r0, [r3, #12]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	68b9      	ldr	r1, [r7, #8]
 800de00:	f004 fef2 	bl	8012be8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	68da      	ldr	r2, [r3, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de0c:	425b      	negs	r3, r3
 800de0e:	441a      	add	r2, r3
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d207      	bcs.n	800de30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	689a      	ldr	r2, [r3, #8]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de28:	425b      	negs	r3, r3
 800de2a:	441a      	add	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b02      	cmp	r3, #2
 800de34:	d105      	bne.n	800de42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d002      	beq.n	800de42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	3b01      	subs	r3, #1
 800de40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	1c5a      	adds	r2, r3, #1
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800de4a:	697b      	ldr	r3, [r7, #20]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3718      	adds	r7, #24
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de62:	2b00      	cmp	r3, #0
 800de64:	d018      	beq.n	800de98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68da      	ldr	r2, [r3, #12]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de6e:	441a      	add	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68da      	ldr	r2, [r3, #12]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d303      	bcc.n	800de88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68d9      	ldr	r1, [r3, #12]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de90:	461a      	mov	r2, r3
 800de92:	6838      	ldr	r0, [r7, #0]
 800de94:	f004 fea8 	bl	8012be8 <memcpy>
	}
}
 800de98:	bf00      	nop
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dea8:	f001 fd96 	bl	800f9d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800deb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deb4:	e011      	b.n	800deda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deba:	2b00      	cmp	r3, #0
 800debc:	d012      	beq.n	800dee4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	3324      	adds	r3, #36	@ 0x24
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 fd98 	bl	800e9f8 <xTaskRemoveFromEventList>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d001      	beq.n	800ded2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dece:	f000 fe71 	bl	800ebb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dce9      	bgt.n	800deb6 <prvUnlockQueue+0x16>
 800dee2:	e000      	b.n	800dee6 <prvUnlockQueue+0x46>
					break;
 800dee4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	22ff      	movs	r2, #255	@ 0xff
 800deea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800deee:	f001 fda5 	bl	800fa3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800def2:	f001 fd71 	bl	800f9d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800defc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800defe:	e011      	b.n	800df24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d012      	beq.n	800df2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	3310      	adds	r3, #16
 800df0c:	4618      	mov	r0, r3
 800df0e:	f000 fd73 	bl	800e9f8 <xTaskRemoveFromEventList>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df18:	f000 fe4c 	bl	800ebb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df1c:	7bbb      	ldrb	r3, [r7, #14]
 800df1e:	3b01      	subs	r3, #1
 800df20:	b2db      	uxtb	r3, r3
 800df22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	dce9      	bgt.n	800df00 <prvUnlockQueue+0x60>
 800df2c:	e000      	b.n	800df30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	22ff      	movs	r2, #255	@ 0xff
 800df34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800df38:	f001 fd80 	bl	800fa3c <vPortExitCritical>
}
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df4c:	f001 fd44 	bl	800f9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df58:	2301      	movs	r3, #1
 800df5a:	60fb      	str	r3, [r7, #12]
 800df5c:	e001      	b.n	800df62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df5e:	2300      	movs	r3, #0
 800df60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df62:	f001 fd6b 	bl	800fa3c <vPortExitCritical>

	return xReturn;
 800df66:	68fb      	ldr	r3, [r7, #12]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df78:	f001 fd2e 	bl	800f9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df84:	429a      	cmp	r2, r3
 800df86:	d102      	bne.n	800df8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df88:	2301      	movs	r3, #1
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	e001      	b.n	800df92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df8e:	2300      	movs	r3, #0
 800df90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df92:	f001 fd53 	bl	800fa3c <vPortExitCritical>

	return xReturn;
 800df96:	68fb      	ldr	r3, [r7, #12]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60fb      	str	r3, [r7, #12]
 800dfae:	e014      	b.n	800dfda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dfb0:	4a0f      	ldr	r2, [pc, #60]	@ (800dff0 <vQueueAddToRegistry+0x50>)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d10b      	bne.n	800dfd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dfbc:	490c      	ldr	r1, [pc, #48]	@ (800dff0 <vQueueAddToRegistry+0x50>)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800dff0 <vQueueAddToRegistry+0x50>)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	4413      	add	r3, r2
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfd2:	e006      	b.n	800dfe2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	60fb      	str	r3, [r7, #12]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2b07      	cmp	r3, #7
 800dfde:	d9e7      	bls.n	800dfb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfe0:	bf00      	nop
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	20000da4 	.word	0x20000da4

0800dff4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dffc:	2300      	movs	r3, #0
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	e016      	b.n	800e030 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e002:	4a10      	ldr	r2, [pc, #64]	@ (800e044 <vQueueUnregisterQueue+0x50>)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	4413      	add	r3, r2
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d10b      	bne.n	800e02a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e012:	4a0c      	ldr	r2, [pc, #48]	@ (800e044 <vQueueUnregisterQueue+0x50>)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2100      	movs	r1, #0
 800e018:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e01c:	4a09      	ldr	r2, [pc, #36]	@ (800e044 <vQueueUnregisterQueue+0x50>)
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	00db      	lsls	r3, r3, #3
 800e022:	4413      	add	r3, r2
 800e024:	2200      	movs	r2, #0
 800e026:	605a      	str	r2, [r3, #4]
				break;
 800e028:	e006      	b.n	800e038 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3301      	adds	r3, #1
 800e02e:	60fb      	str	r3, [r7, #12]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b07      	cmp	r3, #7
 800e034:	d9e5      	bls.n	800e002 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e036:	bf00      	nop
 800e038:	bf00      	nop
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	20000da4 	.word	0x20000da4

0800e048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e058:	f001 fcbe 	bl	800f9d8 <vPortEnterCritical>
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e062:	b25b      	sxtb	r3, r3
 800e064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e068:	d103      	bne.n	800e072 <vQueueWaitForMessageRestricted+0x2a>
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e078:	b25b      	sxtb	r3, r3
 800e07a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e07e:	d103      	bne.n	800e088 <vQueueWaitForMessageRestricted+0x40>
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e088:	f001 fcd8 	bl	800fa3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e090:	2b00      	cmp	r3, #0
 800e092:	d106      	bne.n	800e0a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	3324      	adds	r3, #36	@ 0x24
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	68b9      	ldr	r1, [r7, #8]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f000 fc7f 	bl	800e9a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0a2:	6978      	ldr	r0, [r7, #20]
 800e0a4:	f7ff fefc 	bl	800dea0 <prvUnlockQueue>
	}
 800e0a8:	bf00      	nop
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b08e      	sub	sp, #56	@ 0x38
 800e0b4:	af04      	add	r7, sp, #16
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
 800e0bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10b      	bne.n	800e0dc <xTaskCreateStatic+0x2c>
	__asm volatile
 800e0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	623b      	str	r3, [r7, #32]
}
 800e0d6:	bf00      	nop
 800e0d8:	bf00      	nop
 800e0da:	e7fd      	b.n	800e0d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d10b      	bne.n	800e0fa <xTaskCreateStatic+0x4a>
	__asm volatile
 800e0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e6:	f383 8811 	msr	BASEPRI, r3
 800e0ea:	f3bf 8f6f 	isb	sy
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	61fb      	str	r3, [r7, #28]
}
 800e0f4:	bf00      	nop
 800e0f6:	bf00      	nop
 800e0f8:	e7fd      	b.n	800e0f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0fa:	23a8      	movs	r3, #168	@ 0xa8
 800e0fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	2ba8      	cmp	r3, #168	@ 0xa8
 800e102:	d00b      	beq.n	800e11c <xTaskCreateStatic+0x6c>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	61bb      	str	r3, [r7, #24]
}
 800e116:	bf00      	nop
 800e118:	bf00      	nop
 800e11a:	e7fd      	b.n	800e118 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e11c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e120:	2b00      	cmp	r3, #0
 800e122:	d01e      	beq.n	800e162 <xTaskCreateStatic+0xb2>
 800e124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e126:	2b00      	cmp	r3, #0
 800e128:	d01b      	beq.n	800e162 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e132:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e136:	2202      	movs	r2, #2
 800e138:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e13c:	2300      	movs	r3, #0
 800e13e:	9303      	str	r3, [sp, #12]
 800e140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e142:	9302      	str	r3, [sp, #8]
 800e144:	f107 0314 	add.w	r3, r7, #20
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	68b9      	ldr	r1, [r7, #8]
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 f851 	bl	800e1fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e15a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e15c:	f000 f8f6 	bl	800e34c <prvAddNewTaskToReadyList>
 800e160:	e001      	b.n	800e166 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e166:	697b      	ldr	r3, [r7, #20]
	}
 800e168:	4618      	mov	r0, r3
 800e16a:	3728      	adds	r7, #40	@ 0x28
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08c      	sub	sp, #48	@ 0x30
 800e174:	af04      	add	r7, sp, #16
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	603b      	str	r3, [r7, #0]
 800e17c:	4613      	mov	r3, r2
 800e17e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e180:	88fb      	ldrh	r3, [r7, #6]
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4618      	mov	r0, r3
 800e186:	f001 fd49 	bl	800fc1c <pvPortMalloc>
 800e18a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00e      	beq.n	800e1b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e192:	20a8      	movs	r0, #168	@ 0xa8
 800e194:	f001 fd42 	bl	800fc1c <pvPortMalloc>
 800e198:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d003      	beq.n	800e1a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800e1a6:	e005      	b.n	800e1b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1a8:	6978      	ldr	r0, [r7, #20]
 800e1aa:	f001 fe05 	bl	800fdb8 <vPortFree>
 800e1ae:	e001      	b.n	800e1b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d017      	beq.n	800e1ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1c2:	88fa      	ldrh	r2, [r7, #6]
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	9303      	str	r3, [sp, #12]
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	9302      	str	r3, [sp, #8]
 800e1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	68b9      	ldr	r1, [r7, #8]
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f000 f80f 	bl	800e1fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1de:	69f8      	ldr	r0, [r7, #28]
 800e1e0:	f000 f8b4 	bl	800e34c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	61bb      	str	r3, [r7, #24]
 800e1e8:	e002      	b.n	800e1f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e1f0:	69bb      	ldr	r3, [r7, #24]
	}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3720      	adds	r7, #32
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
	...

0800e1fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	461a      	mov	r2, r3
 800e214:	21a5      	movs	r1, #165	@ 0xa5
 800e216:	f004 fb8d 	bl	8012934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e224:	3b01      	subs	r3, #1
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	f023 0307 	bic.w	r3, r3, #7
 800e232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	f003 0307 	and.w	r3, r3, #7
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00b      	beq.n	800e256 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	617b      	str	r3, [r7, #20]
}
 800e250:	bf00      	nop
 800e252:	bf00      	nop
 800e254:	e7fd      	b.n	800e252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d01f      	beq.n	800e29c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e25c:	2300      	movs	r3, #0
 800e25e:	61fb      	str	r3, [r7, #28]
 800e260:	e012      	b.n	800e288 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	4413      	add	r3, r2
 800e268:	7819      	ldrb	r1, [r3, #0]
 800e26a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	4413      	add	r3, r2
 800e270:	3334      	adds	r3, #52	@ 0x34
 800e272:	460a      	mov	r2, r1
 800e274:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	4413      	add	r3, r2
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d006      	beq.n	800e290 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	3301      	adds	r3, #1
 800e286:	61fb      	str	r3, [r7, #28]
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	2b0f      	cmp	r3, #15
 800e28c:	d9e9      	bls.n	800e262 <prvInitialiseNewTask+0x66>
 800e28e:	e000      	b.n	800e292 <prvInitialiseNewTask+0x96>
			{
				break;
 800e290:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e29a:	e003      	b.n	800e2a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a6:	2b37      	cmp	r3, #55	@ 0x37
 800e2a8:	d901      	bls.n	800e2ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2aa:	2337      	movs	r3, #55	@ 0x37
 800e2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	2200      	movs	r2, #0
 800e2be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff f821 	bl	800d30c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2cc:	3318      	adds	r3, #24
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7ff f81c 	bl	800d30c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fc:	3354      	adds	r3, #84	@ 0x54
 800e2fe:	224c      	movs	r2, #76	@ 0x4c
 800e300:	2100      	movs	r1, #0
 800e302:	4618      	mov	r0, r3
 800e304:	f004 fb16 	bl	8012934 <memset>
 800e308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30a:	4a0d      	ldr	r2, [pc, #52]	@ (800e340 <prvInitialiseNewTask+0x144>)
 800e30c:	659a      	str	r2, [r3, #88]	@ 0x58
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	4a0c      	ldr	r2, [pc, #48]	@ (800e344 <prvInitialiseNewTask+0x148>)
 800e312:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e316:	4a0c      	ldr	r2, [pc, #48]	@ (800e348 <prvInitialiseNewTask+0x14c>)
 800e318:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e31a:	683a      	ldr	r2, [r7, #0]
 800e31c:	68f9      	ldr	r1, [r7, #12]
 800e31e:	69b8      	ldr	r0, [r7, #24]
 800e320:	f001 fa2c 	bl	800f77c <pxPortInitialiseStack>
 800e324:	4602      	mov	r2, r0
 800e326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e328:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e336:	bf00      	nop
 800e338:	3720      	adds	r7, #32
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	20006c24 	.word	0x20006c24
 800e344:	20006c8c 	.word	0x20006c8c
 800e348:	20006cf4 	.word	0x20006cf4

0800e34c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e354:	f001 fb40 	bl	800f9d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e358:	4b2d      	ldr	r3, [pc, #180]	@ (800e410 <prvAddNewTaskToReadyList+0xc4>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	3301      	adds	r3, #1
 800e35e:	4a2c      	ldr	r2, [pc, #176]	@ (800e410 <prvAddNewTaskToReadyList+0xc4>)
 800e360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e362:	4b2c      	ldr	r3, [pc, #176]	@ (800e414 <prvAddNewTaskToReadyList+0xc8>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d109      	bne.n	800e37e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e36a:	4a2a      	ldr	r2, [pc, #168]	@ (800e414 <prvAddNewTaskToReadyList+0xc8>)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e370:	4b27      	ldr	r3, [pc, #156]	@ (800e410 <prvAddNewTaskToReadyList+0xc4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d110      	bne.n	800e39a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e378:	f000 fc40 	bl	800ebfc <prvInitialiseTaskLists>
 800e37c:	e00d      	b.n	800e39a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e37e:	4b26      	ldr	r3, [pc, #152]	@ (800e418 <prvAddNewTaskToReadyList+0xcc>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d109      	bne.n	800e39a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e386:	4b23      	ldr	r3, [pc, #140]	@ (800e414 <prvAddNewTaskToReadyList+0xc8>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e390:	429a      	cmp	r2, r3
 800e392:	d802      	bhi.n	800e39a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e394:	4a1f      	ldr	r2, [pc, #124]	@ (800e414 <prvAddNewTaskToReadyList+0xc8>)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e39a:	4b20      	ldr	r3, [pc, #128]	@ (800e41c <prvAddNewTaskToReadyList+0xd0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	4a1e      	ldr	r2, [pc, #120]	@ (800e41c <prvAddNewTaskToReadyList+0xd0>)
 800e3a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800e41c <prvAddNewTaskToReadyList+0xd0>)
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b0:	4b1b      	ldr	r3, [pc, #108]	@ (800e420 <prvAddNewTaskToReadyList+0xd4>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d903      	bls.n	800e3c0 <prvAddNewTaskToReadyList+0x74>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3bc:	4a18      	ldr	r2, [pc, #96]	@ (800e420 <prvAddNewTaskToReadyList+0xd4>)
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4a15      	ldr	r2, [pc, #84]	@ (800e424 <prvAddNewTaskToReadyList+0xd8>)
 800e3ce:	441a      	add	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f7fe ffa5 	bl	800d326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3dc:	f001 fb2e 	bl	800fa3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e418 <prvAddNewTaskToReadyList+0xcc>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00e      	beq.n	800e406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e414 <prvAddNewTaskToReadyList+0xc8>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d207      	bcs.n	800e406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e428 <prvAddNewTaskToReadyList+0xdc>)
 800e3f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3fc:	601a      	str	r2, [r3, #0]
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e406:	bf00      	nop
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	200012b8 	.word	0x200012b8
 800e414:	20000de4 	.word	0x20000de4
 800e418:	200012c4 	.word	0x200012c4
 800e41c:	200012d4 	.word	0x200012d4
 800e420:	200012c0 	.word	0x200012c0
 800e424:	20000de8 	.word	0x20000de8
 800e428:	e000ed04 	.word	0xe000ed04

0800e42c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d018      	beq.n	800e470 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e43e:	4b14      	ldr	r3, [pc, #80]	@ (800e490 <vTaskDelay+0x64>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00b      	beq.n	800e45e <vTaskDelay+0x32>
	__asm volatile
 800e446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	60bb      	str	r3, [r7, #8]
}
 800e458:	bf00      	nop
 800e45a:	bf00      	nop
 800e45c:	e7fd      	b.n	800e45a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e45e:	f000 f88b 	bl	800e578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e462:	2100      	movs	r1, #0
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 fd1b 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e46a:	f000 f893 	bl	800e594 <xTaskResumeAll>
 800e46e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d107      	bne.n	800e486 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e476:	4b07      	ldr	r3, [pc, #28]	@ (800e494 <vTaskDelay+0x68>)
 800e478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e486:	bf00      	nop
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	200012e0 	.word	0x200012e0
 800e494:	e000ed04 	.word	0xe000ed04

0800e498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08a      	sub	sp, #40	@ 0x28
 800e49c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	1d39      	adds	r1, r7, #4
 800e4aa:	f107 0308 	add.w	r3, r7, #8
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fe fed8 	bl	800d264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4b4:	6839      	ldr	r1, [r7, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	9202      	str	r2, [sp, #8]
 800e4bc:	9301      	str	r3, [sp, #4]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	460a      	mov	r2, r1
 800e4c6:	4924      	ldr	r1, [pc, #144]	@ (800e558 <vTaskStartScheduler+0xc0>)
 800e4c8:	4824      	ldr	r0, [pc, #144]	@ (800e55c <vTaskStartScheduler+0xc4>)
 800e4ca:	f7ff fdf1 	bl	800e0b0 <xTaskCreateStatic>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	4a23      	ldr	r2, [pc, #140]	@ (800e560 <vTaskStartScheduler+0xc8>)
 800e4d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e4d4:	4b22      	ldr	r3, [pc, #136]	@ (800e560 <vTaskStartScheduler+0xc8>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d002      	beq.n	800e4e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	617b      	str	r3, [r7, #20]
 800e4e0:	e001      	b.n	800e4e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d102      	bne.n	800e4f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e4ec:	f000 fd2c 	bl	800ef48 <xTimerCreateTimerTask>
 800e4f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d11b      	bne.n	800e530 <vTaskStartScheduler+0x98>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	613b      	str	r3, [r7, #16]
}
 800e50a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e50c:	4b15      	ldr	r3, [pc, #84]	@ (800e564 <vTaskStartScheduler+0xcc>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	3354      	adds	r3, #84	@ 0x54
 800e512:	4a15      	ldr	r2, [pc, #84]	@ (800e568 <vTaskStartScheduler+0xd0>)
 800e514:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e516:	4b15      	ldr	r3, [pc, #84]	@ (800e56c <vTaskStartScheduler+0xd4>)
 800e518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e51c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e51e:	4b14      	ldr	r3, [pc, #80]	@ (800e570 <vTaskStartScheduler+0xd8>)
 800e520:	2201      	movs	r2, #1
 800e522:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e524:	4b13      	ldr	r3, [pc, #76]	@ (800e574 <vTaskStartScheduler+0xdc>)
 800e526:	2200      	movs	r2, #0
 800e528:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e52a:	f001 f9b1 	bl	800f890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e52e:	e00f      	b.n	800e550 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e536:	d10b      	bne.n	800e550 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	60fb      	str	r3, [r7, #12]
}
 800e54a:	bf00      	nop
 800e54c:	bf00      	nop
 800e54e:	e7fd      	b.n	800e54c <vTaskStartScheduler+0xb4>
}
 800e550:	bf00      	nop
 800e552:	3718      	adds	r7, #24
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	08015290 	.word	0x08015290
 800e55c:	0800ebcd 	.word	0x0800ebcd
 800e560:	200012dc 	.word	0x200012dc
 800e564:	20000de4 	.word	0x20000de4
 800e568:	20000278 	.word	0x20000278
 800e56c:	200012d8 	.word	0x200012d8
 800e570:	200012c4 	.word	0x200012c4
 800e574:	200012bc 	.word	0x200012bc

0800e578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e578:	b480      	push	{r7}
 800e57a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e57c:	4b04      	ldr	r3, [pc, #16]	@ (800e590 <vTaskSuspendAll+0x18>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	4a03      	ldr	r2, [pc, #12]	@ (800e590 <vTaskSuspendAll+0x18>)
 800e584:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e586:	bf00      	nop
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	200012e0 	.word	0x200012e0

0800e594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5a2:	4b42      	ldr	r3, [pc, #264]	@ (800e6ac <xTaskResumeAll+0x118>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10b      	bne.n	800e5c2 <xTaskResumeAll+0x2e>
	__asm volatile
 800e5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	603b      	str	r3, [r7, #0]
}
 800e5bc:	bf00      	nop
 800e5be:	bf00      	nop
 800e5c0:	e7fd      	b.n	800e5be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e5c2:	f001 fa09 	bl	800f9d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e5c6:	4b39      	ldr	r3, [pc, #228]	@ (800e6ac <xTaskResumeAll+0x118>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	4a37      	ldr	r2, [pc, #220]	@ (800e6ac <xTaskResumeAll+0x118>)
 800e5ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5d0:	4b36      	ldr	r3, [pc, #216]	@ (800e6ac <xTaskResumeAll+0x118>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d162      	bne.n	800e69e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5d8:	4b35      	ldr	r3, [pc, #212]	@ (800e6b0 <xTaskResumeAll+0x11c>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d05e      	beq.n	800e69e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5e0:	e02f      	b.n	800e642 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5e2:	4b34      	ldr	r3, [pc, #208]	@ (800e6b4 <xTaskResumeAll+0x120>)
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3318      	adds	r3, #24
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fe fef6 	bl	800d3e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe fef1 	bl	800d3e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e602:	4b2d      	ldr	r3, [pc, #180]	@ (800e6b8 <xTaskResumeAll+0x124>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d903      	bls.n	800e612 <xTaskResumeAll+0x7e>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60e:	4a2a      	ldr	r2, [pc, #168]	@ (800e6b8 <xTaskResumeAll+0x124>)
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e616:	4613      	mov	r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4413      	add	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4a27      	ldr	r2, [pc, #156]	@ (800e6bc <xTaskResumeAll+0x128>)
 800e620:	441a      	add	r2, r3
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3304      	adds	r3, #4
 800e626:	4619      	mov	r1, r3
 800e628:	4610      	mov	r0, r2
 800e62a:	f7fe fe7c 	bl	800d326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e632:	4b23      	ldr	r3, [pc, #140]	@ (800e6c0 <xTaskResumeAll+0x12c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e638:	429a      	cmp	r2, r3
 800e63a:	d302      	bcc.n	800e642 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e63c:	4b21      	ldr	r3, [pc, #132]	@ (800e6c4 <xTaskResumeAll+0x130>)
 800e63e:	2201      	movs	r2, #1
 800e640:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e642:	4b1c      	ldr	r3, [pc, #112]	@ (800e6b4 <xTaskResumeAll+0x120>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1cb      	bne.n	800e5e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e650:	f000 fb78 	bl	800ed44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e654:	4b1c      	ldr	r3, [pc, #112]	@ (800e6c8 <xTaskResumeAll+0x134>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d010      	beq.n	800e682 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e660:	f000 f858 	bl	800e714 <xTaskIncrementTick>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e66a:	4b16      	ldr	r3, [pc, #88]	@ (800e6c4 <xTaskResumeAll+0x130>)
 800e66c:	2201      	movs	r2, #1
 800e66e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3b01      	subs	r3, #1
 800e674:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1f1      	bne.n	800e660 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e67c:	4b12      	ldr	r3, [pc, #72]	@ (800e6c8 <xTaskResumeAll+0x134>)
 800e67e:	2200      	movs	r2, #0
 800e680:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e682:	4b10      	ldr	r3, [pc, #64]	@ (800e6c4 <xTaskResumeAll+0x130>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d009      	beq.n	800e69e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e68a:	2301      	movs	r3, #1
 800e68c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e68e:	4b0f      	ldr	r3, [pc, #60]	@ (800e6cc <xTaskResumeAll+0x138>)
 800e690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e694:	601a      	str	r2, [r3, #0]
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e69e:	f001 f9cd 	bl	800fa3c <vPortExitCritical>

	return xAlreadyYielded;
 800e6a2:	68bb      	ldr	r3, [r7, #8]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	200012e0 	.word	0x200012e0
 800e6b0:	200012b8 	.word	0x200012b8
 800e6b4:	20001278 	.word	0x20001278
 800e6b8:	200012c0 	.word	0x200012c0
 800e6bc:	20000de8 	.word	0x20000de8
 800e6c0:	20000de4 	.word	0x20000de4
 800e6c4:	200012cc 	.word	0x200012cc
 800e6c8:	200012c8 	.word	0x200012c8
 800e6cc:	e000ed04 	.word	0xe000ed04

0800e6d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e6d6:	4b05      	ldr	r3, [pc, #20]	@ (800e6ec <xTaskGetTickCount+0x1c>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e6dc:	687b      	ldr	r3, [r7, #4]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	200012bc 	.word	0x200012bc

0800e6f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6f6:	f001 fa4f 	bl	800fb98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e6fe:	4b04      	ldr	r3, [pc, #16]	@ (800e710 <xTaskGetTickCountFromISR+0x20>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e704:	683b      	ldr	r3, [r7, #0]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	200012bc 	.word	0x200012bc

0800e714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e71a:	2300      	movs	r3, #0
 800e71c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e71e:	4b4f      	ldr	r3, [pc, #316]	@ (800e85c <xTaskIncrementTick+0x148>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	f040 8090 	bne.w	800e848 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e728:	4b4d      	ldr	r3, [pc, #308]	@ (800e860 <xTaskIncrementTick+0x14c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3301      	adds	r3, #1
 800e72e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e730:	4a4b      	ldr	r2, [pc, #300]	@ (800e860 <xTaskIncrementTick+0x14c>)
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d121      	bne.n	800e780 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e73c:	4b49      	ldr	r3, [pc, #292]	@ (800e864 <xTaskIncrementTick+0x150>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00b      	beq.n	800e75e <xTaskIncrementTick+0x4a>
	__asm volatile
 800e746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74a:	f383 8811 	msr	BASEPRI, r3
 800e74e:	f3bf 8f6f 	isb	sy
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	603b      	str	r3, [r7, #0]
}
 800e758:	bf00      	nop
 800e75a:	bf00      	nop
 800e75c:	e7fd      	b.n	800e75a <xTaskIncrementTick+0x46>
 800e75e:	4b41      	ldr	r3, [pc, #260]	@ (800e864 <xTaskIncrementTick+0x150>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	4b40      	ldr	r3, [pc, #256]	@ (800e868 <xTaskIncrementTick+0x154>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a3e      	ldr	r2, [pc, #248]	@ (800e864 <xTaskIncrementTick+0x150>)
 800e76a:	6013      	str	r3, [r2, #0]
 800e76c:	4a3e      	ldr	r2, [pc, #248]	@ (800e868 <xTaskIncrementTick+0x154>)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6013      	str	r3, [r2, #0]
 800e772:	4b3e      	ldr	r3, [pc, #248]	@ (800e86c <xTaskIncrementTick+0x158>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3301      	adds	r3, #1
 800e778:	4a3c      	ldr	r2, [pc, #240]	@ (800e86c <xTaskIncrementTick+0x158>)
 800e77a:	6013      	str	r3, [r2, #0]
 800e77c:	f000 fae2 	bl	800ed44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e780:	4b3b      	ldr	r3, [pc, #236]	@ (800e870 <xTaskIncrementTick+0x15c>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	429a      	cmp	r2, r3
 800e788:	d349      	bcc.n	800e81e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e78a:	4b36      	ldr	r3, [pc, #216]	@ (800e864 <xTaskIncrementTick+0x150>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e794:	4b36      	ldr	r3, [pc, #216]	@ (800e870 <xTaskIncrementTick+0x15c>)
 800e796:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e79a:	601a      	str	r2, [r3, #0]
					break;
 800e79c:	e03f      	b.n	800e81e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e79e:	4b31      	ldr	r3, [pc, #196]	@ (800e864 <xTaskIncrementTick+0x150>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7ae:	693a      	ldr	r2, [r7, #16]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d203      	bcs.n	800e7be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7b6:	4a2e      	ldr	r2, [pc, #184]	@ (800e870 <xTaskIncrementTick+0x15c>)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e7bc:	e02f      	b.n	800e81e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe fe0c 	bl	800d3e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d004      	beq.n	800e7da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	3318      	adds	r3, #24
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fe fe03 	bl	800d3e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7de:	4b25      	ldr	r3, [pc, #148]	@ (800e874 <xTaskIncrementTick+0x160>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d903      	bls.n	800e7ee <xTaskIncrementTick+0xda>
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ea:	4a22      	ldr	r2, [pc, #136]	@ (800e874 <xTaskIncrementTick+0x160>)
 800e7ec:	6013      	str	r3, [r2, #0]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	4413      	add	r3, r2
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4a1f      	ldr	r2, [pc, #124]	@ (800e878 <xTaskIncrementTick+0x164>)
 800e7fc:	441a      	add	r2, r3
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	3304      	adds	r3, #4
 800e802:	4619      	mov	r1, r3
 800e804:	4610      	mov	r0, r2
 800e806:	f7fe fd8e 	bl	800d326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e80e:	4b1b      	ldr	r3, [pc, #108]	@ (800e87c <xTaskIncrementTick+0x168>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e814:	429a      	cmp	r2, r3
 800e816:	d3b8      	bcc.n	800e78a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e818:	2301      	movs	r3, #1
 800e81a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e81c:	e7b5      	b.n	800e78a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e81e:	4b17      	ldr	r3, [pc, #92]	@ (800e87c <xTaskIncrementTick+0x168>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e824:	4914      	ldr	r1, [pc, #80]	@ (800e878 <xTaskIncrementTick+0x164>)
 800e826:	4613      	mov	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4413      	add	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	440b      	add	r3, r1
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d901      	bls.n	800e83a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e836:	2301      	movs	r3, #1
 800e838:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e83a:	4b11      	ldr	r3, [pc, #68]	@ (800e880 <xTaskIncrementTick+0x16c>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d007      	beq.n	800e852 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e842:	2301      	movs	r3, #1
 800e844:	617b      	str	r3, [r7, #20]
 800e846:	e004      	b.n	800e852 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e848:	4b0e      	ldr	r3, [pc, #56]	@ (800e884 <xTaskIncrementTick+0x170>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	4a0d      	ldr	r2, [pc, #52]	@ (800e884 <xTaskIncrementTick+0x170>)
 800e850:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e852:	697b      	ldr	r3, [r7, #20]
}
 800e854:	4618      	mov	r0, r3
 800e856:	3718      	adds	r7, #24
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	200012e0 	.word	0x200012e0
 800e860:	200012bc 	.word	0x200012bc
 800e864:	20001270 	.word	0x20001270
 800e868:	20001274 	.word	0x20001274
 800e86c:	200012d0 	.word	0x200012d0
 800e870:	200012d8 	.word	0x200012d8
 800e874:	200012c0 	.word	0x200012c0
 800e878:	20000de8 	.word	0x20000de8
 800e87c:	20000de4 	.word	0x20000de4
 800e880:	200012cc 	.word	0x200012cc
 800e884:	200012c8 	.word	0x200012c8

0800e888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e88e:	4b2b      	ldr	r3, [pc, #172]	@ (800e93c <vTaskSwitchContext+0xb4>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e896:	4b2a      	ldr	r3, [pc, #168]	@ (800e940 <vTaskSwitchContext+0xb8>)
 800e898:	2201      	movs	r2, #1
 800e89a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e89c:	e047      	b.n	800e92e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e89e:	4b28      	ldr	r3, [pc, #160]	@ (800e940 <vTaskSwitchContext+0xb8>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8a4:	4b27      	ldr	r3, [pc, #156]	@ (800e944 <vTaskSwitchContext+0xbc>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	60fb      	str	r3, [r7, #12]
 800e8aa:	e011      	b.n	800e8d0 <vTaskSwitchContext+0x48>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d10b      	bne.n	800e8ca <vTaskSwitchContext+0x42>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b6:	f383 8811 	msr	BASEPRI, r3
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	607b      	str	r3, [r7, #4]
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop
 800e8c8:	e7fd      	b.n	800e8c6 <vTaskSwitchContext+0x3e>
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	491d      	ldr	r1, [pc, #116]	@ (800e948 <vTaskSwitchContext+0xc0>)
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	440b      	add	r3, r1
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d0e3      	beq.n	800e8ac <vTaskSwitchContext+0x24>
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4a16      	ldr	r2, [pc, #88]	@ (800e948 <vTaskSwitchContext+0xc0>)
 800e8f0:	4413      	add	r3, r2
 800e8f2:	60bb      	str	r3, [r7, #8]
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	685a      	ldr	r2, [r3, #4]
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	605a      	str	r2, [r3, #4]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	3308      	adds	r3, #8
 800e906:	429a      	cmp	r2, r3
 800e908:	d104      	bne.n	800e914 <vTaskSwitchContext+0x8c>
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	605a      	str	r2, [r3, #4]
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	4a0c      	ldr	r2, [pc, #48]	@ (800e94c <vTaskSwitchContext+0xc4>)
 800e91c:	6013      	str	r3, [r2, #0]
 800e91e:	4a09      	ldr	r2, [pc, #36]	@ (800e944 <vTaskSwitchContext+0xbc>)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e924:	4b09      	ldr	r3, [pc, #36]	@ (800e94c <vTaskSwitchContext+0xc4>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	3354      	adds	r3, #84	@ 0x54
 800e92a:	4a09      	ldr	r2, [pc, #36]	@ (800e950 <vTaskSwitchContext+0xc8>)
 800e92c:	6013      	str	r3, [r2, #0]
}
 800e92e:	bf00      	nop
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	200012e0 	.word	0x200012e0
 800e940:	200012cc 	.word	0x200012cc
 800e944:	200012c0 	.word	0x200012c0
 800e948:	20000de8 	.word	0x20000de8
 800e94c:	20000de4 	.word	0x20000de4
 800e950:	20000278 	.word	0x20000278

0800e954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d10b      	bne.n	800e97c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	60fb      	str	r3, [r7, #12]
}
 800e976:	bf00      	nop
 800e978:	bf00      	nop
 800e97a:	e7fd      	b.n	800e978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e97c:	4b07      	ldr	r3, [pc, #28]	@ (800e99c <vTaskPlaceOnEventList+0x48>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3318      	adds	r3, #24
 800e982:	4619      	mov	r1, r3
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7fe fcf2 	bl	800d36e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e98a:	2101      	movs	r1, #1
 800e98c:	6838      	ldr	r0, [r7, #0]
 800e98e:	f000 fa87 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
}
 800e992:	bf00      	nop
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20000de4 	.word	0x20000de4

0800e9a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d10b      	bne.n	800e9ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	617b      	str	r3, [r7, #20]
}
 800e9c4:	bf00      	nop
 800e9c6:	bf00      	nop
 800e9c8:	e7fd      	b.n	800e9c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e9f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	3318      	adds	r3, #24
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7fe fca7 	bl	800d326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e9e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9e4:	6879      	ldr	r1, [r7, #4]
 800e9e6:	68b8      	ldr	r0, [r7, #8]
 800e9e8:	f000 fa5a 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
	}
 800e9ec:	bf00      	nop
 800e9ee:	3718      	adds	r7, #24
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	20000de4 	.word	0x20000de4

0800e9f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10b      	bne.n	800ea26 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	60fb      	str	r3, [r7, #12]
}
 800ea20:	bf00      	nop
 800ea22:	bf00      	nop
 800ea24:	e7fd      	b.n	800ea22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	3318      	adds	r3, #24
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fcd8 	bl	800d3e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea30:	4b1d      	ldr	r3, [pc, #116]	@ (800eaa8 <xTaskRemoveFromEventList+0xb0>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d11d      	bne.n	800ea74 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	3304      	adds	r3, #4
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fe fccf 	bl	800d3e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea46:	4b19      	ldr	r3, [pc, #100]	@ (800eaac <xTaskRemoveFromEventList+0xb4>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d903      	bls.n	800ea56 <xTaskRemoveFromEventList+0x5e>
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea52:	4a16      	ldr	r2, [pc, #88]	@ (800eaac <xTaskRemoveFromEventList+0xb4>)
 800ea54:	6013      	str	r3, [r2, #0]
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4a13      	ldr	r2, [pc, #76]	@ (800eab0 <xTaskRemoveFromEventList+0xb8>)
 800ea64:	441a      	add	r2, r3
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	3304      	adds	r3, #4
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	f7fe fc5a 	bl	800d326 <vListInsertEnd>
 800ea72:	e005      	b.n	800ea80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	3318      	adds	r3, #24
 800ea78:	4619      	mov	r1, r3
 800ea7a:	480e      	ldr	r0, [pc, #56]	@ (800eab4 <xTaskRemoveFromEventList+0xbc>)
 800ea7c:	f7fe fc53 	bl	800d326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea84:	4b0c      	ldr	r3, [pc, #48]	@ (800eab8 <xTaskRemoveFromEventList+0xc0>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d905      	bls.n	800ea9a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea92:	4b0a      	ldr	r3, [pc, #40]	@ (800eabc <xTaskRemoveFromEventList+0xc4>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	601a      	str	r2, [r3, #0]
 800ea98:	e001      	b.n	800ea9e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea9e:	697b      	ldr	r3, [r7, #20]
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3718      	adds	r7, #24
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	200012e0 	.word	0x200012e0
 800eaac:	200012c0 	.word	0x200012c0
 800eab0:	20000de8 	.word	0x20000de8
 800eab4:	20001278 	.word	0x20001278
 800eab8:	20000de4 	.word	0x20000de4
 800eabc:	200012cc 	.word	0x200012cc

0800eac0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eac8:	4b06      	ldr	r3, [pc, #24]	@ (800eae4 <vTaskInternalSetTimeOutState+0x24>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ead0:	4b05      	ldr	r3, [pc, #20]	@ (800eae8 <vTaskInternalSetTimeOutState+0x28>)
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	605a      	str	r2, [r3, #4]
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	200012d0 	.word	0x200012d0
 800eae8:	200012bc 	.word	0x200012bc

0800eaec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b088      	sub	sp, #32
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10b      	bne.n	800eb14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800eafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	613b      	str	r3, [r7, #16]
}
 800eb0e:	bf00      	nop
 800eb10:	bf00      	nop
 800eb12:	e7fd      	b.n	800eb10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d10b      	bne.n	800eb32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800eb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb1e:	f383 8811 	msr	BASEPRI, r3
 800eb22:	f3bf 8f6f 	isb	sy
 800eb26:	f3bf 8f4f 	dsb	sy
 800eb2a:	60fb      	str	r3, [r7, #12]
}
 800eb2c:	bf00      	nop
 800eb2e:	bf00      	nop
 800eb30:	e7fd      	b.n	800eb2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eb32:	f000 ff51 	bl	800f9d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb36:	4b1d      	ldr	r3, [pc, #116]	@ (800ebac <xTaskCheckForTimeOut+0xc0>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	69ba      	ldr	r2, [r7, #24]
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb4e:	d102      	bne.n	800eb56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb50:	2300      	movs	r3, #0
 800eb52:	61fb      	str	r3, [r7, #28]
 800eb54:	e023      	b.n	800eb9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	4b15      	ldr	r3, [pc, #84]	@ (800ebb0 <xTaskCheckForTimeOut+0xc4>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d007      	beq.n	800eb72 <xTaskCheckForTimeOut+0x86>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	69ba      	ldr	r2, [r7, #24]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d302      	bcc.n	800eb72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	61fb      	str	r3, [r7, #28]
 800eb70:	e015      	b.n	800eb9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d20b      	bcs.n	800eb94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7ff ff99 	bl	800eac0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	61fb      	str	r3, [r7, #28]
 800eb92:	e004      	b.n	800eb9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	2200      	movs	r2, #0
 800eb98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb9e:	f000 ff4d 	bl	800fa3c <vPortExitCritical>

	return xReturn;
 800eba2:	69fb      	ldr	r3, [r7, #28]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3720      	adds	r7, #32
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	200012bc 	.word	0x200012bc
 800ebb0:	200012d0 	.word	0x200012d0

0800ebb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebb8:	4b03      	ldr	r3, [pc, #12]	@ (800ebc8 <vTaskMissedYield+0x14>)
 800ebba:	2201      	movs	r2, #1
 800ebbc:	601a      	str	r2, [r3, #0]
}
 800ebbe:	bf00      	nop
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	200012cc 	.word	0x200012cc

0800ebcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ebd4:	f000 f852 	bl	800ec7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ebd8:	4b06      	ldr	r3, [pc, #24]	@ (800ebf4 <prvIdleTask+0x28>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d9f9      	bls.n	800ebd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebe0:	4b05      	ldr	r3, [pc, #20]	@ (800ebf8 <prvIdleTask+0x2c>)
 800ebe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebe6:	601a      	str	r2, [r3, #0]
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ebf0:	e7f0      	b.n	800ebd4 <prvIdleTask+0x8>
 800ebf2:	bf00      	nop
 800ebf4:	20000de8 	.word	0x20000de8
 800ebf8:	e000ed04 	.word	0xe000ed04

0800ebfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec02:	2300      	movs	r3, #0
 800ec04:	607b      	str	r3, [r7, #4]
 800ec06:	e00c      	b.n	800ec22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	4413      	add	r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	4a12      	ldr	r2, [pc, #72]	@ (800ec5c <prvInitialiseTaskLists+0x60>)
 800ec14:	4413      	add	r3, r2
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe fb58 	bl	800d2cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	607b      	str	r3, [r7, #4]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b37      	cmp	r3, #55	@ 0x37
 800ec26:	d9ef      	bls.n	800ec08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec28:	480d      	ldr	r0, [pc, #52]	@ (800ec60 <prvInitialiseTaskLists+0x64>)
 800ec2a:	f7fe fb4f 	bl	800d2cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec2e:	480d      	ldr	r0, [pc, #52]	@ (800ec64 <prvInitialiseTaskLists+0x68>)
 800ec30:	f7fe fb4c 	bl	800d2cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec34:	480c      	ldr	r0, [pc, #48]	@ (800ec68 <prvInitialiseTaskLists+0x6c>)
 800ec36:	f7fe fb49 	bl	800d2cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec3a:	480c      	ldr	r0, [pc, #48]	@ (800ec6c <prvInitialiseTaskLists+0x70>)
 800ec3c:	f7fe fb46 	bl	800d2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec40:	480b      	ldr	r0, [pc, #44]	@ (800ec70 <prvInitialiseTaskLists+0x74>)
 800ec42:	f7fe fb43 	bl	800d2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec46:	4b0b      	ldr	r3, [pc, #44]	@ (800ec74 <prvInitialiseTaskLists+0x78>)
 800ec48:	4a05      	ldr	r2, [pc, #20]	@ (800ec60 <prvInitialiseTaskLists+0x64>)
 800ec4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec78 <prvInitialiseTaskLists+0x7c>)
 800ec4e:	4a05      	ldr	r2, [pc, #20]	@ (800ec64 <prvInitialiseTaskLists+0x68>)
 800ec50:	601a      	str	r2, [r3, #0]
}
 800ec52:	bf00      	nop
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20000de8 	.word	0x20000de8
 800ec60:	20001248 	.word	0x20001248
 800ec64:	2000125c 	.word	0x2000125c
 800ec68:	20001278 	.word	0x20001278
 800ec6c:	2000128c 	.word	0x2000128c
 800ec70:	200012a4 	.word	0x200012a4
 800ec74:	20001270 	.word	0x20001270
 800ec78:	20001274 	.word	0x20001274

0800ec7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec82:	e019      	b.n	800ecb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec84:	f000 fea8 	bl	800f9d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec88:	4b10      	ldr	r3, [pc, #64]	@ (800eccc <prvCheckTasksWaitingTermination+0x50>)
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3304      	adds	r3, #4
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fe fba3 	bl	800d3e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ecd0 <prvCheckTasksWaitingTermination+0x54>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	4a0b      	ldr	r2, [pc, #44]	@ (800ecd0 <prvCheckTasksWaitingTermination+0x54>)
 800eca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eca4:	4b0b      	ldr	r3, [pc, #44]	@ (800ecd4 <prvCheckTasksWaitingTermination+0x58>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ecd4 <prvCheckTasksWaitingTermination+0x58>)
 800ecac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecae:	f000 fec5 	bl	800fa3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f810 	bl	800ecd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecb8:	4b06      	ldr	r3, [pc, #24]	@ (800ecd4 <prvCheckTasksWaitingTermination+0x58>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1e1      	bne.n	800ec84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecc0:	bf00      	nop
 800ecc2:	bf00      	nop
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	2000128c 	.word	0x2000128c
 800ecd0:	200012b8 	.word	0x200012b8
 800ecd4:	200012a0 	.word	0x200012a0

0800ecd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	3354      	adds	r3, #84	@ 0x54
 800ece4:	4618      	mov	r0, r3
 800ece6:	f003 ff19 	bl	8012b1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d108      	bne.n	800ed06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f001 f85d 	bl	800fdb8 <vPortFree>
				vPortFree( pxTCB );
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f001 f85a 	bl	800fdb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed04:	e019      	b.n	800ed3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d103      	bne.n	800ed18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f001 f851 	bl	800fdb8 <vPortFree>
	}
 800ed16:	e010      	b.n	800ed3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d00b      	beq.n	800ed3a <prvDeleteTCB+0x62>
	__asm volatile
 800ed22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	60fb      	str	r3, [r7, #12]
}
 800ed34:	bf00      	nop
 800ed36:	bf00      	nop
 800ed38:	e7fd      	b.n	800ed36 <prvDeleteTCB+0x5e>
	}
 800ed3a:	bf00      	nop
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
	...

0800ed44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed7c <prvResetNextTaskUnblockTime+0x38>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d104      	bne.n	800ed5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed54:	4b0a      	ldr	r3, [pc, #40]	@ (800ed80 <prvResetNextTaskUnblockTime+0x3c>)
 800ed56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed5c:	e008      	b.n	800ed70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed5e:	4b07      	ldr	r3, [pc, #28]	@ (800ed7c <prvResetNextTaskUnblockTime+0x38>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	4a04      	ldr	r2, [pc, #16]	@ (800ed80 <prvResetNextTaskUnblockTime+0x3c>)
 800ed6e:	6013      	str	r3, [r2, #0]
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	20001270 	.word	0x20001270
 800ed80:	200012d8 	.word	0x200012d8

0800ed84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed8a:	4b0b      	ldr	r3, [pc, #44]	@ (800edb8 <xTaskGetSchedulerState+0x34>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d102      	bne.n	800ed98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed92:	2301      	movs	r3, #1
 800ed94:	607b      	str	r3, [r7, #4]
 800ed96:	e008      	b.n	800edaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed98:	4b08      	ldr	r3, [pc, #32]	@ (800edbc <xTaskGetSchedulerState+0x38>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d102      	bne.n	800eda6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eda0:	2302      	movs	r3, #2
 800eda2:	607b      	str	r3, [r7, #4]
 800eda4:	e001      	b.n	800edaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eda6:	2300      	movs	r3, #0
 800eda8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edaa:	687b      	ldr	r3, [r7, #4]
	}
 800edac:	4618      	mov	r0, r3
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr
 800edb8:	200012c4 	.word	0x200012c4
 800edbc:	200012e0 	.word	0x200012e0

0800edc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edcc:	2300      	movs	r3, #0
 800edce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d058      	beq.n	800ee88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edd6:	4b2f      	ldr	r3, [pc, #188]	@ (800ee94 <xTaskPriorityDisinherit+0xd4>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d00b      	beq.n	800edf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	60fb      	str	r3, [r7, #12]
}
 800edf2:	bf00      	nop
 800edf4:	bf00      	nop
 800edf6:	e7fd      	b.n	800edf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10b      	bne.n	800ee18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	60bb      	str	r3, [r7, #8]
}
 800ee12:	bf00      	nop
 800ee14:	bf00      	nop
 800ee16:	e7fd      	b.n	800ee14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee1c:	1e5a      	subs	r2, r3, #1
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d02c      	beq.n	800ee88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d128      	bne.n	800ee88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	3304      	adds	r3, #4
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fe fad0 	bl	800d3e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee58:	4b0f      	ldr	r3, [pc, #60]	@ (800ee98 <xTaskPriorityDisinherit+0xd8>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d903      	bls.n	800ee68 <xTaskPriorityDisinherit+0xa8>
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee64:	4a0c      	ldr	r2, [pc, #48]	@ (800ee98 <xTaskPriorityDisinherit+0xd8>)
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4a09      	ldr	r2, [pc, #36]	@ (800ee9c <xTaskPriorityDisinherit+0xdc>)
 800ee76:	441a      	add	r2, r3
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4610      	mov	r0, r2
 800ee80:	f7fe fa51 	bl	800d326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee84:	2301      	movs	r3, #1
 800ee86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee88:	697b      	ldr	r3, [r7, #20]
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20000de4 	.word	0x20000de4
 800ee98:	200012c0 	.word	0x200012c0
 800ee9c:	20000de8 	.word	0x20000de8

0800eea0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eeaa:	4b21      	ldr	r3, [pc, #132]	@ (800ef30 <prvAddCurrentTaskToDelayedList+0x90>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eeb0:	4b20      	ldr	r3, [pc, #128]	@ (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe fa92 	bl	800d3e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eec2:	d10a      	bne.n	800eeda <prvAddCurrentTaskToDelayedList+0x3a>
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d007      	beq.n	800eeda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eeca:	4b1a      	ldr	r3, [pc, #104]	@ (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3304      	adds	r3, #4
 800eed0:	4619      	mov	r1, r3
 800eed2:	4819      	ldr	r0, [pc, #100]	@ (800ef38 <prvAddCurrentTaskToDelayedList+0x98>)
 800eed4:	f7fe fa27 	bl	800d326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eed8:	e026      	b.n	800ef28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4413      	add	r3, r2
 800eee0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eee2:	4b14      	ldr	r3, [pc, #80]	@ (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d209      	bcs.n	800ef06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eef2:	4b12      	ldr	r3, [pc, #72]	@ (800ef3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	4b0f      	ldr	r3, [pc, #60]	@ (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	3304      	adds	r3, #4
 800eefc:	4619      	mov	r1, r3
 800eefe:	4610      	mov	r0, r2
 800ef00:	f7fe fa35 	bl	800d36e <vListInsert>
}
 800ef04:	e010      	b.n	800ef28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef06:	4b0e      	ldr	r3, [pc, #56]	@ (800ef40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	3304      	adds	r3, #4
 800ef10:	4619      	mov	r1, r3
 800ef12:	4610      	mov	r0, r2
 800ef14:	f7fe fa2b 	bl	800d36e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef18:	4b0a      	ldr	r3, [pc, #40]	@ (800ef44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d202      	bcs.n	800ef28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ef22:	4a08      	ldr	r2, [pc, #32]	@ (800ef44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	6013      	str	r3, [r2, #0]
}
 800ef28:	bf00      	nop
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	200012bc 	.word	0x200012bc
 800ef34:	20000de4 	.word	0x20000de4
 800ef38:	200012a4 	.word	0x200012a4
 800ef3c:	20001274 	.word	0x20001274
 800ef40:	20001270 	.word	0x20001270
 800ef44:	200012d8 	.word	0x200012d8

0800ef48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08a      	sub	sp, #40	@ 0x28
 800ef4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ef52:	f000 fbb1 	bl	800f6b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef56:	4b1d      	ldr	r3, [pc, #116]	@ (800efcc <xTimerCreateTimerTask+0x84>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d021      	beq.n	800efa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef66:	1d3a      	adds	r2, r7, #4
 800ef68:	f107 0108 	add.w	r1, r7, #8
 800ef6c:	f107 030c 	add.w	r3, r7, #12
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe f991 	bl	800d298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	9202      	str	r2, [sp, #8]
 800ef7e:	9301      	str	r3, [sp, #4]
 800ef80:	2302      	movs	r3, #2
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	2300      	movs	r3, #0
 800ef86:	460a      	mov	r2, r1
 800ef88:	4911      	ldr	r1, [pc, #68]	@ (800efd0 <xTimerCreateTimerTask+0x88>)
 800ef8a:	4812      	ldr	r0, [pc, #72]	@ (800efd4 <xTimerCreateTimerTask+0x8c>)
 800ef8c:	f7ff f890 	bl	800e0b0 <xTaskCreateStatic>
 800ef90:	4603      	mov	r3, r0
 800ef92:	4a11      	ldr	r2, [pc, #68]	@ (800efd8 <xTimerCreateTimerTask+0x90>)
 800ef94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef96:	4b10      	ldr	r3, [pc, #64]	@ (800efd8 <xTimerCreateTimerTask+0x90>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d10b      	bne.n	800efc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800efa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	613b      	str	r3, [r7, #16]
}
 800efba:	bf00      	nop
 800efbc:	bf00      	nop
 800efbe:	e7fd      	b.n	800efbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800efc0:	697b      	ldr	r3, [r7, #20]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3718      	adds	r7, #24
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	20001314 	.word	0x20001314
 800efd0:	08015298 	.word	0x08015298
 800efd4:	0800f251 	.word	0x0800f251
 800efd8:	20001318 	.word	0x20001318

0800efdc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b088      	sub	sp, #32
 800efe0:	af02      	add	r7, sp, #8
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	607a      	str	r2, [r7, #4]
 800efe8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800efea:	202c      	movs	r0, #44	@ 0x2c
 800efec:	f000 fe16 	bl	800fc1c <pvPortMalloc>
 800eff0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00d      	beq.n	800f014 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	2200      	movs	r2, #0
 800effc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	9301      	str	r3, [sp, #4]
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	68b9      	ldr	r1, [r7, #8]
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f845 	bl	800f09e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f014:	697b      	ldr	r3, [r7, #20]
	}
 800f016:	4618      	mov	r0, r3
 800f018:	3718      	adds	r7, #24
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b08a      	sub	sp, #40	@ 0x28
 800f022:	af02      	add	r7, sp, #8
 800f024:	60f8      	str	r0, [r7, #12]
 800f026:	60b9      	str	r1, [r7, #8]
 800f028:	607a      	str	r2, [r7, #4]
 800f02a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f02c:	232c      	movs	r3, #44	@ 0x2c
 800f02e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	2b2c      	cmp	r3, #44	@ 0x2c
 800f034:	d00b      	beq.n	800f04e <xTimerCreateStatic+0x30>
	__asm volatile
 800f036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	61bb      	str	r3, [r7, #24]
}
 800f048:	bf00      	nop
 800f04a:	bf00      	nop
 800f04c:	e7fd      	b.n	800f04a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f04e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10b      	bne.n	800f06e <xTimerCreateStatic+0x50>
	__asm volatile
 800f056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	617b      	str	r3, [r7, #20]
}
 800f068:	bf00      	nop
 800f06a:	bf00      	nop
 800f06c:	e7fd      	b.n	800f06a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f070:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00d      	beq.n	800f094 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	2202      	movs	r2, #2
 800f07c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	9301      	str	r3, [sp, #4]
 800f084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	68b9      	ldr	r1, [r7, #8]
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f000 f805 	bl	800f09e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f094:	69fb      	ldr	r3, [r7, #28]
	}
 800f096:	4618      	mov	r0, r3
 800f098:	3720      	adds	r7, #32
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b086      	sub	sp, #24
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	60f8      	str	r0, [r7, #12]
 800f0a6:	60b9      	str	r1, [r7, #8]
 800f0a8:	607a      	str	r2, [r7, #4]
 800f0aa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10b      	bne.n	800f0ca <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b6:	f383 8811 	msr	BASEPRI, r3
 800f0ba:	f3bf 8f6f 	isb	sy
 800f0be:	f3bf 8f4f 	dsb	sy
 800f0c2:	617b      	str	r3, [r7, #20]
}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop
 800f0c8:	e7fd      	b.n	800f0c6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d01e      	beq.n	800f10e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f0d0:	f000 faf2 	bl	800f6b8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e2:	683a      	ldr	r2, [r7, #0]
 800f0e4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e8:	6a3a      	ldr	r2, [r7, #32]
 800f0ea:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fe f90b 	bl	800d30c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d008      	beq.n	800f10e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f102:	f043 0304 	orr.w	r3, r3, #4
 800f106:	b2da      	uxtb	r2, r3
 800f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f10e:	bf00      	nop
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
	...

0800f118 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b08a      	sub	sp, #40	@ 0x28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
 800f124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f126:	2300      	movs	r3, #0
 800f128:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d10b      	bne.n	800f148 <xTimerGenericCommand+0x30>
	__asm volatile
 800f130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f134:	f383 8811 	msr	BASEPRI, r3
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	623b      	str	r3, [r7, #32]
}
 800f142:	bf00      	nop
 800f144:	bf00      	nop
 800f146:	e7fd      	b.n	800f144 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f148:	4b19      	ldr	r3, [pc, #100]	@ (800f1b0 <xTimerGenericCommand+0x98>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d02a      	beq.n	800f1a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	2b05      	cmp	r3, #5
 800f160:	dc18      	bgt.n	800f194 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f162:	f7ff fe0f 	bl	800ed84 <xTaskGetSchedulerState>
 800f166:	4603      	mov	r3, r0
 800f168:	2b02      	cmp	r3, #2
 800f16a:	d109      	bne.n	800f180 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f16c:	4b10      	ldr	r3, [pc, #64]	@ (800f1b0 <xTimerGenericCommand+0x98>)
 800f16e:	6818      	ldr	r0, [r3, #0]
 800f170:	f107 0110 	add.w	r1, r7, #16
 800f174:	2300      	movs	r3, #0
 800f176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f178:	f7fe fb5c 	bl	800d834 <xQueueGenericSend>
 800f17c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f17e:	e012      	b.n	800f1a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f180:	4b0b      	ldr	r3, [pc, #44]	@ (800f1b0 <xTimerGenericCommand+0x98>)
 800f182:	6818      	ldr	r0, [r3, #0]
 800f184:	f107 0110 	add.w	r1, r7, #16
 800f188:	2300      	movs	r3, #0
 800f18a:	2200      	movs	r2, #0
 800f18c:	f7fe fb52 	bl	800d834 <xQueueGenericSend>
 800f190:	6278      	str	r0, [r7, #36]	@ 0x24
 800f192:	e008      	b.n	800f1a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f194:	4b06      	ldr	r3, [pc, #24]	@ (800f1b0 <xTimerGenericCommand+0x98>)
 800f196:	6818      	ldr	r0, [r3, #0]
 800f198:	f107 0110 	add.w	r1, r7, #16
 800f19c:	2300      	movs	r3, #0
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	f7fe fc4a 	bl	800da38 <xQueueGenericSendFromISR>
 800f1a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3728      	adds	r7, #40	@ 0x28
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20001314 	.word	0x20001314

0800f1b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b088      	sub	sp, #32
 800f1b8:	af02      	add	r7, sp, #8
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1be:	4b23      	ldr	r3, [pc, #140]	@ (800f24c <prvProcessExpiredTimer+0x98>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fe f907 	bl	800d3e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d023      	beq.n	800f228 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	699a      	ldr	r2, [r3, #24]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	18d1      	adds	r1, r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	683a      	ldr	r2, [r7, #0]
 800f1ec:	6978      	ldr	r0, [r7, #20]
 800f1ee:	f000 f8d5 	bl	800f39c <prvInsertTimerInActiveList>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d020      	beq.n	800f23a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	2100      	movs	r1, #0
 800f202:	6978      	ldr	r0, [r7, #20]
 800f204:	f7ff ff88 	bl	800f118 <xTimerGenericCommand>
 800f208:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d114      	bne.n	800f23a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	60fb      	str	r3, [r7, #12]
}
 800f222:	bf00      	nop
 800f224:	bf00      	nop
 800f226:	e7fd      	b.n	800f224 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f22e:	f023 0301 	bic.w	r3, r3, #1
 800f232:	b2da      	uxtb	r2, r3
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	6978      	ldr	r0, [r7, #20]
 800f240:	4798      	blx	r3
}
 800f242:	bf00      	nop
 800f244:	3718      	adds	r7, #24
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	2000130c 	.word	0x2000130c

0800f250 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f258:	f107 0308 	add.w	r3, r7, #8
 800f25c:	4618      	mov	r0, r3
 800f25e:	f000 f859 	bl	800f314 <prvGetNextExpireTime>
 800f262:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	4619      	mov	r1, r3
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f000 f805 	bl	800f278 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f26e:	f000 f8d7 	bl	800f420 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f272:	bf00      	nop
 800f274:	e7f0      	b.n	800f258 <prvTimerTask+0x8>
	...

0800f278 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f282:	f7ff f979 	bl	800e578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f286:	f107 0308 	add.w	r3, r7, #8
 800f28a:	4618      	mov	r0, r3
 800f28c:	f000 f866 	bl	800f35c <prvSampleTimeNow>
 800f290:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d130      	bne.n	800f2fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10a      	bne.n	800f2b4 <prvProcessTimerOrBlockTask+0x3c>
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d806      	bhi.n	800f2b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2a6:	f7ff f975 	bl	800e594 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2aa:	68f9      	ldr	r1, [r7, #12]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff ff81 	bl	800f1b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2b2:	e024      	b.n	800f2fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d008      	beq.n	800f2cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2ba:	4b13      	ldr	r3, [pc, #76]	@ (800f308 <prvProcessTimerOrBlockTask+0x90>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d101      	bne.n	800f2c8 <prvProcessTimerOrBlockTask+0x50>
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e000      	b.n	800f2ca <prvProcessTimerOrBlockTask+0x52>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2cc:	4b0f      	ldr	r3, [pc, #60]	@ (800f30c <prvProcessTimerOrBlockTask+0x94>)
 800f2ce:	6818      	ldr	r0, [r3, #0]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	1ad3      	subs	r3, r2, r3
 800f2d6:	683a      	ldr	r2, [r7, #0]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	f7fe feb5 	bl	800e048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2de:	f7ff f959 	bl	800e594 <xTaskResumeAll>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10a      	bne.n	800f2fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f2e8:	4b09      	ldr	r3, [pc, #36]	@ (800f310 <prvProcessTimerOrBlockTask+0x98>)
 800f2ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2ee:	601a      	str	r2, [r3, #0]
 800f2f0:	f3bf 8f4f 	dsb	sy
 800f2f4:	f3bf 8f6f 	isb	sy
}
 800f2f8:	e001      	b.n	800f2fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2fa:	f7ff f94b 	bl	800e594 <xTaskResumeAll>
}
 800f2fe:	bf00      	nop
 800f300:	3710      	adds	r7, #16
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	20001310 	.word	0x20001310
 800f30c:	20001314 	.word	0x20001314
 800f310:	e000ed04 	.word	0xe000ed04

0800f314 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f31c:	4b0e      	ldr	r3, [pc, #56]	@ (800f358 <prvGetNextExpireTime+0x44>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <prvGetNextExpireTime+0x16>
 800f326:	2201      	movs	r2, #1
 800f328:	e000      	b.n	800f32c <prvGetNextExpireTime+0x18>
 800f32a:	2200      	movs	r2, #0
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d105      	bne.n	800f344 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f338:	4b07      	ldr	r3, [pc, #28]	@ (800f358 <prvGetNextExpireTime+0x44>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	60fb      	str	r3, [r7, #12]
 800f342:	e001      	b.n	800f348 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f344:	2300      	movs	r3, #0
 800f346:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f348:	68fb      	ldr	r3, [r7, #12]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3714      	adds	r7, #20
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	2000130c 	.word	0x2000130c

0800f35c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f364:	f7ff f9b4 	bl	800e6d0 <xTaskGetTickCount>
 800f368:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f36a:	4b0b      	ldr	r3, [pc, #44]	@ (800f398 <prvSampleTimeNow+0x3c>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	429a      	cmp	r2, r3
 800f372:	d205      	bcs.n	800f380 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f374:	f000 f93a 	bl	800f5ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	e002      	b.n	800f386 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f386:	4a04      	ldr	r2, [pc, #16]	@ (800f398 <prvSampleTimeNow+0x3c>)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f38c:	68fb      	ldr	r3, [r7, #12]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	2000131c 	.word	0x2000131c

0800f39c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
 800f3a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d812      	bhi.n	800f3e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	1ad2      	subs	r2, r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	699b      	ldr	r3, [r3, #24]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d302      	bcc.n	800f3d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	617b      	str	r3, [r7, #20]
 800f3d4:	e01b      	b.n	800f40e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3d6:	4b10      	ldr	r3, [pc, #64]	@ (800f418 <prvInsertTimerInActiveList+0x7c>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	3304      	adds	r3, #4
 800f3de:	4619      	mov	r1, r3
 800f3e0:	4610      	mov	r0, r2
 800f3e2:	f7fd ffc4 	bl	800d36e <vListInsert>
 800f3e6:	e012      	b.n	800f40e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d206      	bcs.n	800f3fe <prvInsertTimerInActiveList+0x62>
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d302      	bcc.n	800f3fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	617b      	str	r3, [r7, #20]
 800f3fc:	e007      	b.n	800f40e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3fe:	4b07      	ldr	r3, [pc, #28]	@ (800f41c <prvInsertTimerInActiveList+0x80>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	3304      	adds	r3, #4
 800f406:	4619      	mov	r1, r3
 800f408:	4610      	mov	r0, r2
 800f40a:	f7fd ffb0 	bl	800d36e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f40e:	697b      	ldr	r3, [r7, #20]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3718      	adds	r7, #24
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	20001310 	.word	0x20001310
 800f41c:	2000130c 	.word	0x2000130c

0800f420 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b08e      	sub	sp, #56	@ 0x38
 800f424:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f426:	e0ce      	b.n	800f5c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	da19      	bge.n	800f462 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f42e:	1d3b      	adds	r3, r7, #4
 800f430:	3304      	adds	r3, #4
 800f432:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f436:	2b00      	cmp	r3, #0
 800f438:	d10b      	bne.n	800f452 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	61fb      	str	r3, [r7, #28]
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	e7fd      	b.n	800f44e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f458:	6850      	ldr	r0, [r2, #4]
 800f45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f45c:	6892      	ldr	r2, [r2, #8]
 800f45e:	4611      	mov	r1, r2
 800f460:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	f2c0 80ae 	blt.w	800f5c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f470:	695b      	ldr	r3, [r3, #20]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d004      	beq.n	800f480 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f478:	3304      	adds	r3, #4
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fd ffb0 	bl	800d3e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f480:	463b      	mov	r3, r7
 800f482:	4618      	mov	r0, r3
 800f484:	f7ff ff6a 	bl	800f35c <prvSampleTimeNow>
 800f488:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b09      	cmp	r3, #9
 800f48e:	f200 8097 	bhi.w	800f5c0 <prvProcessReceivedCommands+0x1a0>
 800f492:	a201      	add	r2, pc, #4	@ (adr r2, 800f498 <prvProcessReceivedCommands+0x78>)
 800f494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f498:	0800f4c1 	.word	0x0800f4c1
 800f49c:	0800f4c1 	.word	0x0800f4c1
 800f4a0:	0800f4c1 	.word	0x0800f4c1
 800f4a4:	0800f537 	.word	0x0800f537
 800f4a8:	0800f54b 	.word	0x0800f54b
 800f4ac:	0800f597 	.word	0x0800f597
 800f4b0:	0800f4c1 	.word	0x0800f4c1
 800f4b4:	0800f4c1 	.word	0x0800f4c1
 800f4b8:	0800f537 	.word	0x0800f537
 800f4bc:	0800f54b 	.word	0x0800f54b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4c6:	f043 0301 	orr.w	r3, r3, #1
 800f4ca:	b2da      	uxtb	r2, r3
 800f4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4d2:	68ba      	ldr	r2, [r7, #8]
 800f4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	18d1      	adds	r1, r2, r3
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4e0:	f7ff ff5c 	bl	800f39c <prvInsertTimerInActiveList>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d06c      	beq.n	800f5c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ec:	6a1b      	ldr	r3, [r3, #32]
 800f4ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4f8:	f003 0304 	and.w	r3, r3, #4
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d061      	beq.n	800f5c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f500:	68ba      	ldr	r2, [r7, #8]
 800f502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f504:	699b      	ldr	r3, [r3, #24]
 800f506:	441a      	add	r2, r3
 800f508:	2300      	movs	r3, #0
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	2300      	movs	r3, #0
 800f50e:	2100      	movs	r1, #0
 800f510:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f512:	f7ff fe01 	bl	800f118 <xTimerGenericCommand>
 800f516:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f518:	6a3b      	ldr	r3, [r7, #32]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d152      	bne.n	800f5c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	61bb      	str	r3, [r7, #24]
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	e7fd      	b.n	800f532 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f53c:	f023 0301 	bic.w	r3, r3, #1
 800f540:	b2da      	uxtb	r2, r3
 800f542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f544:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f548:	e03d      	b.n	800f5c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f54c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f550:	f043 0301 	orr.w	r3, r3, #1
 800f554:	b2da      	uxtb	r2, r3
 800f556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f558:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f560:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f564:	699b      	ldr	r3, [r3, #24]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10b      	bne.n	800f582 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f56e:	f383 8811 	msr	BASEPRI, r3
 800f572:	f3bf 8f6f 	isb	sy
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	617b      	str	r3, [r7, #20]
}
 800f57c:	bf00      	nop
 800f57e:	bf00      	nop
 800f580:	e7fd      	b.n	800f57e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f584:	699a      	ldr	r2, [r3, #24]
 800f586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f588:	18d1      	adds	r1, r2, r3
 800f58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f58e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f590:	f7ff ff04 	bl	800f39c <prvInsertTimerInActiveList>
					break;
 800f594:	e017      	b.n	800f5c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f59c:	f003 0302 	and.w	r3, r3, #2
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d103      	bne.n	800f5ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f5a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5a6:	f000 fc07 	bl	800fdb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5aa:	e00c      	b.n	800f5c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5b2:	f023 0301 	bic.w	r3, r3, #1
 800f5b6:	b2da      	uxtb	r2, r3
 800f5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f5be:	e002      	b.n	800f5c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f5c0:	bf00      	nop
 800f5c2:	e000      	b.n	800f5c6 <prvProcessReceivedCommands+0x1a6>
					break;
 800f5c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5c6:	4b08      	ldr	r3, [pc, #32]	@ (800f5e8 <prvProcessReceivedCommands+0x1c8>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	1d39      	adds	r1, r7, #4
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fe fad0 	bl	800db74 <xQueueReceive>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	f47f af26 	bne.w	800f428 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f5dc:	bf00      	nop
 800f5de:	bf00      	nop
 800f5e0:	3730      	adds	r7, #48	@ 0x30
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20001314 	.word	0x20001314

0800f5ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b088      	sub	sp, #32
 800f5f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5f2:	e049      	b.n	800f688 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5f4:	4b2e      	ldr	r3, [pc, #184]	@ (800f6b0 <prvSwitchTimerLists+0xc4>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5fe:	4b2c      	ldr	r3, [pc, #176]	@ (800f6b0 <prvSwitchTimerLists+0xc4>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	3304      	adds	r3, #4
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fd fee7 	bl	800d3e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6a1b      	ldr	r3, [r3, #32]
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f620:	f003 0304 	and.w	r3, r3, #4
 800f624:	2b00      	cmp	r3, #0
 800f626:	d02f      	beq.n	800f688 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	699b      	ldr	r3, [r3, #24]
 800f62c:	693a      	ldr	r2, [r7, #16]
 800f62e:	4413      	add	r3, r2
 800f630:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	429a      	cmp	r2, r3
 800f638:	d90e      	bls.n	800f658 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f646:	4b1a      	ldr	r3, [pc, #104]	@ (800f6b0 <prvSwitchTimerLists+0xc4>)
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	3304      	adds	r3, #4
 800f64e:	4619      	mov	r1, r3
 800f650:	4610      	mov	r0, r2
 800f652:	f7fd fe8c 	bl	800d36e <vListInsert>
 800f656:	e017      	b.n	800f688 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f658:	2300      	movs	r3, #0
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	2300      	movs	r3, #0
 800f65e:	693a      	ldr	r2, [r7, #16]
 800f660:	2100      	movs	r1, #0
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f7ff fd58 	bl	800f118 <xTimerGenericCommand>
 800f668:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10b      	bne.n	800f688 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	603b      	str	r3, [r7, #0]
}
 800f682:	bf00      	nop
 800f684:	bf00      	nop
 800f686:	e7fd      	b.n	800f684 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f688:	4b09      	ldr	r3, [pc, #36]	@ (800f6b0 <prvSwitchTimerLists+0xc4>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1b0      	bne.n	800f5f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f692:	4b07      	ldr	r3, [pc, #28]	@ (800f6b0 <prvSwitchTimerLists+0xc4>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f698:	4b06      	ldr	r3, [pc, #24]	@ (800f6b4 <prvSwitchTimerLists+0xc8>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a04      	ldr	r2, [pc, #16]	@ (800f6b0 <prvSwitchTimerLists+0xc4>)
 800f69e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6a0:	4a04      	ldr	r2, [pc, #16]	@ (800f6b4 <prvSwitchTimerLists+0xc8>)
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	6013      	str	r3, [r2, #0]
}
 800f6a6:	bf00      	nop
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	2000130c 	.word	0x2000130c
 800f6b4:	20001310 	.word	0x20001310

0800f6b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6be:	f000 f98b 	bl	800f9d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6c2:	4b15      	ldr	r3, [pc, #84]	@ (800f718 <prvCheckForValidListAndQueue+0x60>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d120      	bne.n	800f70c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6ca:	4814      	ldr	r0, [pc, #80]	@ (800f71c <prvCheckForValidListAndQueue+0x64>)
 800f6cc:	f7fd fdfe 	bl	800d2cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6d0:	4813      	ldr	r0, [pc, #76]	@ (800f720 <prvCheckForValidListAndQueue+0x68>)
 800f6d2:	f7fd fdfb 	bl	800d2cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6d6:	4b13      	ldr	r3, [pc, #76]	@ (800f724 <prvCheckForValidListAndQueue+0x6c>)
 800f6d8:	4a10      	ldr	r2, [pc, #64]	@ (800f71c <prvCheckForValidListAndQueue+0x64>)
 800f6da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6dc:	4b12      	ldr	r3, [pc, #72]	@ (800f728 <prvCheckForValidListAndQueue+0x70>)
 800f6de:	4a10      	ldr	r2, [pc, #64]	@ (800f720 <prvCheckForValidListAndQueue+0x68>)
 800f6e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	4b11      	ldr	r3, [pc, #68]	@ (800f72c <prvCheckForValidListAndQueue+0x74>)
 800f6e8:	4a11      	ldr	r2, [pc, #68]	@ (800f730 <prvCheckForValidListAndQueue+0x78>)
 800f6ea:	2110      	movs	r1, #16
 800f6ec:	200a      	movs	r0, #10
 800f6ee:	f7fd ff0b 	bl	800d508 <xQueueGenericCreateStatic>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	4a08      	ldr	r2, [pc, #32]	@ (800f718 <prvCheckForValidListAndQueue+0x60>)
 800f6f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6f8:	4b07      	ldr	r3, [pc, #28]	@ (800f718 <prvCheckForValidListAndQueue+0x60>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d005      	beq.n	800f70c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f700:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <prvCheckForValidListAndQueue+0x60>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	490b      	ldr	r1, [pc, #44]	@ (800f734 <prvCheckForValidListAndQueue+0x7c>)
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fc4a 	bl	800dfa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f70c:	f000 f996 	bl	800fa3c <vPortExitCritical>
}
 800f710:	bf00      	nop
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	20001314 	.word	0x20001314
 800f71c:	200012e4 	.word	0x200012e4
 800f720:	200012f8 	.word	0x200012f8
 800f724:	2000130c 	.word	0x2000130c
 800f728:	20001310 	.word	0x20001310
 800f72c:	200013c0 	.word	0x200013c0
 800f730:	20001320 	.word	0x20001320
 800f734:	080152a0 	.word	0x080152a0

0800f738 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d10b      	bne.n	800f762 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800f74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	60fb      	str	r3, [r7, #12]
}
 800f75c:	bf00      	nop
 800f75e:	bf00      	nop
 800f760:	e7fd      	b.n	800f75e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f762:	f000 f939 	bl	800f9d8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	69db      	ldr	r3, [r3, #28]
 800f76a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f76c:	f000 f966 	bl	800fa3c <vPortExitCritical>

	return pvReturn;
 800f770:	693b      	ldr	r3, [r7, #16]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
	...

0800f77c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	3b04      	subs	r3, #4
 800f78c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	3b04      	subs	r3, #4
 800f79a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	f023 0201 	bic.w	r2, r3, #1
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	3b04      	subs	r3, #4
 800f7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7ac:	4a0c      	ldr	r2, [pc, #48]	@ (800f7e0 <pxPortInitialiseStack+0x64>)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	3b14      	subs	r3, #20
 800f7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3b04      	subs	r3, #4
 800f7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f06f 0202 	mvn.w	r2, #2
 800f7ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	3b20      	subs	r3, #32
 800f7d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3714      	adds	r7, #20
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	0800f7e5 	.word	0x0800f7e5

0800f7e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f7ee:	4b13      	ldr	r3, [pc, #76]	@ (800f83c <prvTaskExitError+0x58>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7f6:	d00b      	beq.n	800f810 <prvTaskExitError+0x2c>
	__asm volatile
 800f7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fc:	f383 8811 	msr	BASEPRI, r3
 800f800:	f3bf 8f6f 	isb	sy
 800f804:	f3bf 8f4f 	dsb	sy
 800f808:	60fb      	str	r3, [r7, #12]
}
 800f80a:	bf00      	nop
 800f80c:	bf00      	nop
 800f80e:	e7fd      	b.n	800f80c <prvTaskExitError+0x28>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	60bb      	str	r3, [r7, #8]
}
 800f822:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f824:	bf00      	nop
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d0fc      	beq.n	800f826 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f82c:	bf00      	nop
 800f82e:	bf00      	nop
 800f830:	3714      	adds	r7, #20
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	20000098 	.word	0x20000098

0800f840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f840:	4b07      	ldr	r3, [pc, #28]	@ (800f860 <pxCurrentTCBConst2>)
 800f842:	6819      	ldr	r1, [r3, #0]
 800f844:	6808      	ldr	r0, [r1, #0]
 800f846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84a:	f380 8809 	msr	PSP, r0
 800f84e:	f3bf 8f6f 	isb	sy
 800f852:	f04f 0000 	mov.w	r0, #0
 800f856:	f380 8811 	msr	BASEPRI, r0
 800f85a:	4770      	bx	lr
 800f85c:	f3af 8000 	nop.w

0800f860 <pxCurrentTCBConst2>:
 800f860:	20000de4 	.word	0x20000de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f864:	bf00      	nop
 800f866:	bf00      	nop

0800f868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f868:	4808      	ldr	r0, [pc, #32]	@ (800f88c <prvPortStartFirstTask+0x24>)
 800f86a:	6800      	ldr	r0, [r0, #0]
 800f86c:	6800      	ldr	r0, [r0, #0]
 800f86e:	f380 8808 	msr	MSP, r0
 800f872:	f04f 0000 	mov.w	r0, #0
 800f876:	f380 8814 	msr	CONTROL, r0
 800f87a:	b662      	cpsie	i
 800f87c:	b661      	cpsie	f
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	df00      	svc	0
 800f888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f88a:	bf00      	nop
 800f88c:	e000ed08 	.word	0xe000ed08

0800f890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f896:	4b47      	ldr	r3, [pc, #284]	@ (800f9b4 <xPortStartScheduler+0x124>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a47      	ldr	r2, [pc, #284]	@ (800f9b8 <xPortStartScheduler+0x128>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d10b      	bne.n	800f8b8 <xPortStartScheduler+0x28>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	60fb      	str	r3, [r7, #12]
}
 800f8b2:	bf00      	nop
 800f8b4:	bf00      	nop
 800f8b6:	e7fd      	b.n	800f8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f8b8:	4b3e      	ldr	r3, [pc, #248]	@ (800f9b4 <xPortStartScheduler+0x124>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a3f      	ldr	r2, [pc, #252]	@ (800f9bc <xPortStartScheduler+0x12c>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d10b      	bne.n	800f8da <xPortStartScheduler+0x4a>
	__asm volatile
 800f8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c6:	f383 8811 	msr	BASEPRI, r3
 800f8ca:	f3bf 8f6f 	isb	sy
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	613b      	str	r3, [r7, #16]
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop
 800f8d8:	e7fd      	b.n	800f8d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8da:	4b39      	ldr	r3, [pc, #228]	@ (800f9c0 <xPortStartScheduler+0x130>)
 800f8dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	22ff      	movs	r2, #255	@ 0xff
 800f8ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8f4:	78fb      	ldrb	r3, [r7, #3]
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	4b31      	ldr	r3, [pc, #196]	@ (800f9c4 <xPortStartScheduler+0x134>)
 800f900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f902:	4b31      	ldr	r3, [pc, #196]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f904:	2207      	movs	r2, #7
 800f906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f908:	e009      	b.n	800f91e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f90a:	4b2f      	ldr	r3, [pc, #188]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	3b01      	subs	r3, #1
 800f910:	4a2d      	ldr	r2, [pc, #180]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f914:	78fb      	ldrb	r3, [r7, #3]
 800f916:	b2db      	uxtb	r3, r3
 800f918:	005b      	lsls	r3, r3, #1
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f91e:	78fb      	ldrb	r3, [r7, #3]
 800f920:	b2db      	uxtb	r3, r3
 800f922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f926:	2b80      	cmp	r3, #128	@ 0x80
 800f928:	d0ef      	beq.n	800f90a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f92a:	4b27      	ldr	r3, [pc, #156]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f1c3 0307 	rsb	r3, r3, #7
 800f932:	2b04      	cmp	r3, #4
 800f934:	d00b      	beq.n	800f94e <xPortStartScheduler+0xbe>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	60bb      	str	r3, [r7, #8]
}
 800f948:	bf00      	nop
 800f94a:	bf00      	nop
 800f94c:	e7fd      	b.n	800f94a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f94e:	4b1e      	ldr	r3, [pc, #120]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	021b      	lsls	r3, r3, #8
 800f954:	4a1c      	ldr	r2, [pc, #112]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f958:	4b1b      	ldr	r3, [pc, #108]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f960:	4a19      	ldr	r2, [pc, #100]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	b2da      	uxtb	r2, r3
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f96c:	4b17      	ldr	r3, [pc, #92]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a16      	ldr	r2, [pc, #88]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f978:	4b14      	ldr	r3, [pc, #80]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a13      	ldr	r2, [pc, #76]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f97e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f984:	f000 f8da 	bl	800fb3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f988:	4b11      	ldr	r3, [pc, #68]	@ (800f9d0 <xPortStartScheduler+0x140>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f98e:	f000 f8f9 	bl	800fb84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f992:	4b10      	ldr	r3, [pc, #64]	@ (800f9d4 <xPortStartScheduler+0x144>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a0f      	ldr	r2, [pc, #60]	@ (800f9d4 <xPortStartScheduler+0x144>)
 800f998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f99c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f99e:	f7ff ff63 	bl	800f868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9a2:	f7fe ff71 	bl	800e888 <vTaskSwitchContext>
	prvTaskExitError();
 800f9a6:	f7ff ff1d 	bl	800f7e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3718      	adds	r7, #24
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	e000ed00 	.word	0xe000ed00
 800f9b8:	410fc271 	.word	0x410fc271
 800f9bc:	410fc270 	.word	0x410fc270
 800f9c0:	e000e400 	.word	0xe000e400
 800f9c4:	20001410 	.word	0x20001410
 800f9c8:	20001414 	.word	0x20001414
 800f9cc:	e000ed20 	.word	0xe000ed20
 800f9d0:	20000098 	.word	0x20000098
 800f9d4:	e000ef34 	.word	0xe000ef34

0800f9d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	607b      	str	r3, [r7, #4]
}
 800f9f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9f2:	4b10      	ldr	r3, [pc, #64]	@ (800fa34 <vPortEnterCritical+0x5c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	4a0e      	ldr	r2, [pc, #56]	@ (800fa34 <vPortEnterCritical+0x5c>)
 800f9fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800fa34 <vPortEnterCritical+0x5c>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d110      	bne.n	800fa26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa04:	4b0c      	ldr	r3, [pc, #48]	@ (800fa38 <vPortEnterCritical+0x60>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00b      	beq.n	800fa26 <vPortEnterCritical+0x4e>
	__asm volatile
 800fa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	603b      	str	r3, [r7, #0]
}
 800fa20:	bf00      	nop
 800fa22:	bf00      	nop
 800fa24:	e7fd      	b.n	800fa22 <vPortEnterCritical+0x4a>
	}
}
 800fa26:	bf00      	nop
 800fa28:	370c      	adds	r7, #12
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	20000098 	.word	0x20000098
 800fa38:	e000ed04 	.word	0xe000ed04

0800fa3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa42:	4b12      	ldr	r3, [pc, #72]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10b      	bne.n	800fa62 <vPortExitCritical+0x26>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	607b      	str	r3, [r7, #4]
}
 800fa5c:	bf00      	nop
 800fa5e:	bf00      	nop
 800fa60:	e7fd      	b.n	800fa5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa62:	4b0a      	ldr	r3, [pc, #40]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	3b01      	subs	r3, #1
 800fa68:	4a08      	ldr	r2, [pc, #32]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa6c:	4b07      	ldr	r3, [pc, #28]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d105      	bne.n	800fa80 <vPortExitCritical+0x44>
 800fa74:	2300      	movs	r3, #0
 800fa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	f383 8811 	msr	BASEPRI, r3
}
 800fa7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa80:	bf00      	nop
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	20000098 	.word	0x20000098

0800fa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa90:	f3ef 8009 	mrs	r0, PSP
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	4b15      	ldr	r3, [pc, #84]	@ (800faf0 <pxCurrentTCBConst>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	f01e 0f10 	tst.w	lr, #16
 800faa0:	bf08      	it	eq
 800faa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800faa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faaa:	6010      	str	r0, [r2, #0]
 800faac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fab4:	f380 8811 	msr	BASEPRI, r0
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f7fe fee2 	bl	800e888 <vTaskSwitchContext>
 800fac4:	f04f 0000 	mov.w	r0, #0
 800fac8:	f380 8811 	msr	BASEPRI, r0
 800facc:	bc09      	pop	{r0, r3}
 800face:	6819      	ldr	r1, [r3, #0]
 800fad0:	6808      	ldr	r0, [r1, #0]
 800fad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad6:	f01e 0f10 	tst.w	lr, #16
 800fada:	bf08      	it	eq
 800fadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fae0:	f380 8809 	msr	PSP, r0
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	f3af 8000 	nop.w

0800faf0 <pxCurrentTCBConst>:
 800faf0:	20000de4 	.word	0x20000de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800faf4:	bf00      	nop
 800faf6:	bf00      	nop

0800faf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	607b      	str	r3, [r7, #4]
}
 800fb10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb12:	f7fe fdff 	bl	800e714 <xTaskIncrementTick>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d003      	beq.n	800fb24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb1c:	4b06      	ldr	r3, [pc, #24]	@ (800fb38 <xPortSysTickHandler+0x40>)
 800fb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	2300      	movs	r3, #0
 800fb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	f383 8811 	msr	BASEPRI, r3
}
 800fb2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb30:	bf00      	nop
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	e000ed04 	.word	0xe000ed04

0800fb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb40:	4b0b      	ldr	r3, [pc, #44]	@ (800fb70 <vPortSetupTimerInterrupt+0x34>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb46:	4b0b      	ldr	r3, [pc, #44]	@ (800fb74 <vPortSetupTimerInterrupt+0x38>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb78 <vPortSetupTimerInterrupt+0x3c>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a0a      	ldr	r2, [pc, #40]	@ (800fb7c <vPortSetupTimerInterrupt+0x40>)
 800fb52:	fba2 2303 	umull	r2, r3, r2, r3
 800fb56:	099b      	lsrs	r3, r3, #6
 800fb58:	4a09      	ldr	r2, [pc, #36]	@ (800fb80 <vPortSetupTimerInterrupt+0x44>)
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb5e:	4b04      	ldr	r3, [pc, #16]	@ (800fb70 <vPortSetupTimerInterrupt+0x34>)
 800fb60:	2207      	movs	r2, #7
 800fb62:	601a      	str	r2, [r3, #0]
}
 800fb64:	bf00      	nop
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	e000e010 	.word	0xe000e010
 800fb74:	e000e018 	.word	0xe000e018
 800fb78:	20000000 	.word	0x20000000
 800fb7c:	10624dd3 	.word	0x10624dd3
 800fb80:	e000e014 	.word	0xe000e014

0800fb84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fb94 <vPortEnableVFP+0x10>
 800fb88:	6801      	ldr	r1, [r0, #0]
 800fb8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fb8e:	6001      	str	r1, [r0, #0]
 800fb90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb92:	bf00      	nop
 800fb94:	e000ed88 	.word	0xe000ed88

0800fb98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb9e:	f3ef 8305 	mrs	r3, IPSR
 800fba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b0f      	cmp	r3, #15
 800fba8:	d915      	bls.n	800fbd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbaa:	4a18      	ldr	r2, [pc, #96]	@ (800fc0c <vPortValidateInterruptPriority+0x74>)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	4413      	add	r3, r2
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fbb4:	4b16      	ldr	r3, [pc, #88]	@ (800fc10 <vPortValidateInterruptPriority+0x78>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	7afa      	ldrb	r2, [r7, #11]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d20b      	bcs.n	800fbd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	607b      	str	r3, [r7, #4]
}
 800fbd0:	bf00      	nop
 800fbd2:	bf00      	nop
 800fbd4:	e7fd      	b.n	800fbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800fc14 <vPortValidateInterruptPriority+0x7c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fbde:	4b0e      	ldr	r3, [pc, #56]	@ (800fc18 <vPortValidateInterruptPriority+0x80>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d90b      	bls.n	800fbfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	603b      	str	r3, [r7, #0]
}
 800fbf8:	bf00      	nop
 800fbfa:	bf00      	nop
 800fbfc:	e7fd      	b.n	800fbfa <vPortValidateInterruptPriority+0x62>
	}
 800fbfe:	bf00      	nop
 800fc00:	3714      	adds	r7, #20
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	e000e3f0 	.word	0xe000e3f0
 800fc10:	20001410 	.word	0x20001410
 800fc14:	e000ed0c 	.word	0xe000ed0c
 800fc18:	20001414 	.word	0x20001414

0800fc1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08a      	sub	sp, #40	@ 0x28
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc24:	2300      	movs	r3, #0
 800fc26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc28:	f7fe fca6 	bl	800e578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc2c:	4b5c      	ldr	r3, [pc, #368]	@ (800fda0 <pvPortMalloc+0x184>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d101      	bne.n	800fc38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc34:	f000 f924 	bl	800fe80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc38:	4b5a      	ldr	r3, [pc, #360]	@ (800fda4 <pvPortMalloc+0x188>)
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4013      	ands	r3, r2
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f040 8095 	bne.w	800fd70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d01e      	beq.n	800fc8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fc4c:	2208      	movs	r2, #8
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4413      	add	r3, r2
 800fc52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f003 0307 	and.w	r3, r3, #7
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d015      	beq.n	800fc8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f023 0307 	bic.w	r3, r3, #7
 800fc64:	3308      	adds	r3, #8
 800fc66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f003 0307 	and.w	r3, r3, #7
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00b      	beq.n	800fc8a <pvPortMalloc+0x6e>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc76:	f383 8811 	msr	BASEPRI, r3
 800fc7a:	f3bf 8f6f 	isb	sy
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	617b      	str	r3, [r7, #20]
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop
 800fc88:	e7fd      	b.n	800fc86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d06f      	beq.n	800fd70 <pvPortMalloc+0x154>
 800fc90:	4b45      	ldr	r3, [pc, #276]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d86a      	bhi.n	800fd70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc9a:	4b44      	ldr	r3, [pc, #272]	@ (800fdac <pvPortMalloc+0x190>)
 800fc9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc9e:	4b43      	ldr	r3, [pc, #268]	@ (800fdac <pvPortMalloc+0x190>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fca4:	e004      	b.n	800fcb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d903      	bls.n	800fcc2 <pvPortMalloc+0xa6>
 800fcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1f1      	bne.n	800fca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fcc2:	4b37      	ldr	r3, [pc, #220]	@ (800fda0 <pvPortMalloc+0x184>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d051      	beq.n	800fd70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2208      	movs	r2, #8
 800fcd2:	4413      	add	r3, r2
 800fcd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce0:	685a      	ldr	r2, [r3, #4]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	1ad2      	subs	r2, r2, r3
 800fce6:	2308      	movs	r3, #8
 800fce8:	005b      	lsls	r3, r3, #1
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d920      	bls.n	800fd30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fcee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	f003 0307 	and.w	r3, r3, #7
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d00b      	beq.n	800fd18 <pvPortMalloc+0xfc>
	__asm volatile
 800fd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd04:	f383 8811 	msr	BASEPRI, r3
 800fd08:	f3bf 8f6f 	isb	sy
 800fd0c:	f3bf 8f4f 	dsb	sy
 800fd10:	613b      	str	r3, [r7, #16]
}
 800fd12:	bf00      	nop
 800fd14:	bf00      	nop
 800fd16:	e7fd      	b.n	800fd14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1a:	685a      	ldr	r2, [r3, #4]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	1ad2      	subs	r2, r2, r3
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd2a:	69b8      	ldr	r0, [r7, #24]
 800fd2c:	f000 f90a 	bl	800ff44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd30:	4b1d      	ldr	r3, [pc, #116]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	4a1b      	ldr	r2, [pc, #108]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd3e:	4b1a      	ldr	r3, [pc, #104]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	4b1b      	ldr	r3, [pc, #108]	@ (800fdb0 <pvPortMalloc+0x194>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d203      	bcs.n	800fd52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd4a:	4b17      	ldr	r3, [pc, #92]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4a18      	ldr	r2, [pc, #96]	@ (800fdb0 <pvPortMalloc+0x194>)
 800fd50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd54:	685a      	ldr	r2, [r3, #4]
 800fd56:	4b13      	ldr	r3, [pc, #76]	@ (800fda4 <pvPortMalloc+0x188>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	431a      	orrs	r2, r3
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd62:	2200      	movs	r2, #0
 800fd64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd66:	4b13      	ldr	r3, [pc, #76]	@ (800fdb4 <pvPortMalloc+0x198>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	4a11      	ldr	r2, [pc, #68]	@ (800fdb4 <pvPortMalloc+0x198>)
 800fd6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd70:	f7fe fc10 	bl	800e594 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	f003 0307 	and.w	r3, r3, #7
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00b      	beq.n	800fd96 <pvPortMalloc+0x17a>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	60fb      	str	r3, [r7, #12]
}
 800fd90:	bf00      	nop
 800fd92:	bf00      	nop
 800fd94:	e7fd      	b.n	800fd92 <pvPortMalloc+0x176>
	return pvReturn;
 800fd96:	69fb      	ldr	r3, [r7, #28]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3728      	adds	r7, #40	@ 0x28
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	20005020 	.word	0x20005020
 800fda4:	20005034 	.word	0x20005034
 800fda8:	20005024 	.word	0x20005024
 800fdac:	20005018 	.word	0x20005018
 800fdb0:	20005028 	.word	0x20005028
 800fdb4:	2000502c 	.word	0x2000502c

0800fdb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d04f      	beq.n	800fe6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fdca:	2308      	movs	r3, #8
 800fdcc:	425b      	negs	r3, r3
 800fdce:	697a      	ldr	r2, [r7, #20]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	4b25      	ldr	r3, [pc, #148]	@ (800fe74 <vPortFree+0xbc>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4013      	ands	r3, r2
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d10b      	bne.n	800fdfe <vPortFree+0x46>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	60fb      	str	r3, [r7, #12]
}
 800fdf8:	bf00      	nop
 800fdfa:	bf00      	nop
 800fdfc:	e7fd      	b.n	800fdfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00b      	beq.n	800fe1e <vPortFree+0x66>
	__asm volatile
 800fe06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	60bb      	str	r3, [r7, #8]
}
 800fe18:	bf00      	nop
 800fe1a:	bf00      	nop
 800fe1c:	e7fd      	b.n	800fe1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	685a      	ldr	r2, [r3, #4]
 800fe22:	4b14      	ldr	r3, [pc, #80]	@ (800fe74 <vPortFree+0xbc>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4013      	ands	r3, r2
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d01e      	beq.n	800fe6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d11a      	bne.n	800fe6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	4b0e      	ldr	r3, [pc, #56]	@ (800fe74 <vPortFree+0xbc>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	43db      	mvns	r3, r3
 800fe3e:	401a      	ands	r2, r3
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe44:	f7fe fb98 	bl	800e578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	685a      	ldr	r2, [r3, #4]
 800fe4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe78 <vPortFree+0xc0>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4413      	add	r3, r2
 800fe52:	4a09      	ldr	r2, [pc, #36]	@ (800fe78 <vPortFree+0xc0>)
 800fe54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe56:	6938      	ldr	r0, [r7, #16]
 800fe58:	f000 f874 	bl	800ff44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe5c:	4b07      	ldr	r3, [pc, #28]	@ (800fe7c <vPortFree+0xc4>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	3301      	adds	r3, #1
 800fe62:	4a06      	ldr	r2, [pc, #24]	@ (800fe7c <vPortFree+0xc4>)
 800fe64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe66:	f7fe fb95 	bl	800e594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe6a:	bf00      	nop
 800fe6c:	3718      	adds	r7, #24
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	20005034 	.word	0x20005034
 800fe78:	20005024 	.word	0x20005024
 800fe7c:	20005030 	.word	0x20005030

0800fe80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fe8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe8c:	4b27      	ldr	r3, [pc, #156]	@ (800ff2c <prvHeapInit+0xac>)
 800fe8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f003 0307 	and.w	r3, r3, #7
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00c      	beq.n	800feb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3307      	adds	r3, #7
 800fe9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f023 0307 	bic.w	r3, r3, #7
 800fea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fea8:	68ba      	ldr	r2, [r7, #8]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	4a1f      	ldr	r2, [pc, #124]	@ (800ff2c <prvHeapInit+0xac>)
 800feb0:	4413      	add	r3, r2
 800feb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800feb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ff30 <prvHeapInit+0xb0>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800febe:	4b1c      	ldr	r3, [pc, #112]	@ (800ff30 <prvHeapInit+0xb0>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	68ba      	ldr	r2, [r7, #8]
 800fec8:	4413      	add	r3, r2
 800feca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fecc:	2208      	movs	r2, #8
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	1a9b      	subs	r3, r3, r2
 800fed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f023 0307 	bic.w	r3, r3, #7
 800feda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4a15      	ldr	r2, [pc, #84]	@ (800ff34 <prvHeapInit+0xb4>)
 800fee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fee2:	4b14      	ldr	r3, [pc, #80]	@ (800ff34 <prvHeapInit+0xb4>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2200      	movs	r2, #0
 800fee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800feea:	4b12      	ldr	r3, [pc, #72]	@ (800ff34 <prvHeapInit+0xb4>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2200      	movs	r2, #0
 800fef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	1ad2      	subs	r2, r2, r3
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff00:	4b0c      	ldr	r3, [pc, #48]	@ (800ff34 <prvHeapInit+0xb4>)
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ff38 <prvHeapInit+0xb8>)
 800ff0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	4a09      	ldr	r2, [pc, #36]	@ (800ff3c <prvHeapInit+0xbc>)
 800ff16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff18:	4b09      	ldr	r3, [pc, #36]	@ (800ff40 <prvHeapInit+0xc0>)
 800ff1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ff1e:	601a      	str	r2, [r3, #0]
}
 800ff20:	bf00      	nop
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	20001418 	.word	0x20001418
 800ff30:	20005018 	.word	0x20005018
 800ff34:	20005020 	.word	0x20005020
 800ff38:	20005028 	.word	0x20005028
 800ff3c:	20005024 	.word	0x20005024
 800ff40:	20005034 	.word	0x20005034

0800ff44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff4c:	4b28      	ldr	r3, [pc, #160]	@ (800fff0 <prvInsertBlockIntoFreeList+0xac>)
 800ff4e:	60fb      	str	r3, [r7, #12]
 800ff50:	e002      	b.n	800ff58 <prvInsertBlockIntoFreeList+0x14>
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d8f7      	bhi.n	800ff52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d108      	bne.n	800ff86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	685a      	ldr	r2, [r3, #4]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	441a      	add	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	441a      	add	r2, r3
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d118      	bne.n	800ffcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	4b15      	ldr	r3, [pc, #84]	@ (800fff4 <prvInsertBlockIntoFreeList+0xb0>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d00d      	beq.n	800ffc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685a      	ldr	r2, [r3, #4]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	441a      	add	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	601a      	str	r2, [r3, #0]
 800ffc0:	e008      	b.n	800ffd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ffc2:	4b0c      	ldr	r3, [pc, #48]	@ (800fff4 <prvInsertBlockIntoFreeList+0xb0>)
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	e003      	b.n	800ffd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d002      	beq.n	800ffe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffe2:	bf00      	nop
 800ffe4:	3714      	adds	r7, #20
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	20005018 	.word	0x20005018
 800fff4:	20005020 	.word	0x20005020

0800fff8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fffc:	2200      	movs	r2, #0
 800fffe:	4912      	ldr	r1, [pc, #72]	@ (8010048 <MX_USB_DEVICE_Init+0x50>)
 8010000:	4812      	ldr	r0, [pc, #72]	@ (801004c <MX_USB_DEVICE_Init+0x54>)
 8010002:	f7fb fac9 	bl	800b598 <USBD_Init>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801000c:	f7f3 fc58 	bl	80038c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010010:	490f      	ldr	r1, [pc, #60]	@ (8010050 <MX_USB_DEVICE_Init+0x58>)
 8010012:	480e      	ldr	r0, [pc, #56]	@ (801004c <MX_USB_DEVICE_Init+0x54>)
 8010014:	f7fb faf0 	bl	800b5f8 <USBD_RegisterClass>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801001e:	f7f3 fc4f 	bl	80038c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010022:	490c      	ldr	r1, [pc, #48]	@ (8010054 <MX_USB_DEVICE_Init+0x5c>)
 8010024:	4809      	ldr	r0, [pc, #36]	@ (801004c <MX_USB_DEVICE_Init+0x54>)
 8010026:	f7fb f9e7 	bl	800b3f8 <USBD_CDC_RegisterInterface>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010030:	f7f3 fc46 	bl	80038c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010034:	4805      	ldr	r0, [pc, #20]	@ (801004c <MX_USB_DEVICE_Init+0x54>)
 8010036:	f7fb fb15 	bl	800b664 <USBD_Start>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d001      	beq.n	8010044 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010040:	f7f3 fc3e 	bl	80038c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010044:	bf00      	nop
 8010046:	bd80      	pop	{r7, pc}
 8010048:	200000b0 	.word	0x200000b0
 801004c:	20005038 	.word	0x20005038
 8010050:	20000018 	.word	0x20000018
 8010054:	2000009c 	.word	0x2000009c

08010058 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801005c:	2200      	movs	r2, #0
 801005e:	4905      	ldr	r1, [pc, #20]	@ (8010074 <CDC_Init_FS+0x1c>)
 8010060:	4805      	ldr	r0, [pc, #20]	@ (8010078 <CDC_Init_FS+0x20>)
 8010062:	f7fb f9e3 	bl	800b42c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010066:	4905      	ldr	r1, [pc, #20]	@ (801007c <CDC_Init_FS+0x24>)
 8010068:	4803      	ldr	r0, [pc, #12]	@ (8010078 <CDC_Init_FS+0x20>)
 801006a:	f7fb fa01 	bl	800b470 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801006e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010070:	4618      	mov	r0, r3
 8010072:	bd80      	pop	{r7, pc}
 8010074:	20005b14 	.word	0x20005b14
 8010078:	20005038 	.word	0x20005038
 801007c:	20005314 	.word	0x20005314

08010080 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010080:	b480      	push	{r7}
 8010082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010084:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010086:	4618      	mov	r0, r3
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	4603      	mov	r3, r0
 8010098:	6039      	str	r1, [r7, #0]
 801009a:	71fb      	strb	r3, [r7, #7]
 801009c:	4613      	mov	r3, r2
 801009e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80100a0:	79fb      	ldrb	r3, [r7, #7]
 80100a2:	2b23      	cmp	r3, #35	@ 0x23
 80100a4:	d84a      	bhi.n	801013c <CDC_Control_FS+0xac>
 80100a6:	a201      	add	r2, pc, #4	@ (adr r2, 80100ac <CDC_Control_FS+0x1c>)
 80100a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ac:	0801013d 	.word	0x0801013d
 80100b0:	0801013d 	.word	0x0801013d
 80100b4:	0801013d 	.word	0x0801013d
 80100b8:	0801013d 	.word	0x0801013d
 80100bc:	0801013d 	.word	0x0801013d
 80100c0:	0801013d 	.word	0x0801013d
 80100c4:	0801013d 	.word	0x0801013d
 80100c8:	0801013d 	.word	0x0801013d
 80100cc:	0801013d 	.word	0x0801013d
 80100d0:	0801013d 	.word	0x0801013d
 80100d4:	0801013d 	.word	0x0801013d
 80100d8:	0801013d 	.word	0x0801013d
 80100dc:	0801013d 	.word	0x0801013d
 80100e0:	0801013d 	.word	0x0801013d
 80100e4:	0801013d 	.word	0x0801013d
 80100e8:	0801013d 	.word	0x0801013d
 80100ec:	0801013d 	.word	0x0801013d
 80100f0:	0801013d 	.word	0x0801013d
 80100f4:	0801013d 	.word	0x0801013d
 80100f8:	0801013d 	.word	0x0801013d
 80100fc:	0801013d 	.word	0x0801013d
 8010100:	0801013d 	.word	0x0801013d
 8010104:	0801013d 	.word	0x0801013d
 8010108:	0801013d 	.word	0x0801013d
 801010c:	0801013d 	.word	0x0801013d
 8010110:	0801013d 	.word	0x0801013d
 8010114:	0801013d 	.word	0x0801013d
 8010118:	0801013d 	.word	0x0801013d
 801011c:	0801013d 	.word	0x0801013d
 8010120:	0801013d 	.word	0x0801013d
 8010124:	0801013d 	.word	0x0801013d
 8010128:	0801013d 	.word	0x0801013d
 801012c:	0801013d 	.word	0x0801013d
 8010130:	0801013d 	.word	0x0801013d
 8010134:	0801013d 	.word	0x0801013d
 8010138:	0801013d 	.word	0x0801013d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801013c:	bf00      	nop
  }

  return (USBD_OK);
 801013e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010140:	4618      	mov	r0, r3
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Call the VCP receive callback function
  VCP_RxCallback(Buf, *Len);
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4619      	mov	r1, r3
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7f2 fa6d 	bl	800263c <VCP_RxCallback>
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010162:	6879      	ldr	r1, [r7, #4]
 8010164:	4805      	ldr	r0, [pc, #20]	@ (801017c <CDC_Receive_FS+0x30>)
 8010166:	f7fb f983 	bl	800b470 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801016a:	4804      	ldr	r0, [pc, #16]	@ (801017c <CDC_Receive_FS+0x30>)
 801016c:	f7fb f9de 	bl	800b52c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010170:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010172:	4618      	mov	r0, r3
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	20005038 	.word	0x20005038

08010180 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	460b      	mov	r3, r1
 801018a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801018c:	2300      	movs	r3, #0
 801018e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010190:	4b0d      	ldr	r3, [pc, #52]	@ (80101c8 <CDC_Transmit_FS+0x48>)
 8010192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010196:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d001      	beq.n	80101a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80101a2:	2301      	movs	r3, #1
 80101a4:	e00b      	b.n	80101be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80101a6:	887b      	ldrh	r3, [r7, #2]
 80101a8:	461a      	mov	r2, r3
 80101aa:	6879      	ldr	r1, [r7, #4]
 80101ac:	4806      	ldr	r0, [pc, #24]	@ (80101c8 <CDC_Transmit_FS+0x48>)
 80101ae:	f7fb f93d 	bl	800b42c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80101b2:	4805      	ldr	r0, [pc, #20]	@ (80101c8 <CDC_Transmit_FS+0x48>)
 80101b4:	f7fb f97a 	bl	800b4ac <USBD_CDC_TransmitPacket>
 80101b8:	4603      	mov	r3, r0
 80101ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80101bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3710      	adds	r7, #16
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	20005038 	.word	0x20005038

080101cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b087      	sub	sp, #28
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	4613      	mov	r3, r2
 80101d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80101da:	2300      	movs	r3, #0
 80101dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80101de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	371c      	adds	r7, #28
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr
	...

080101f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	4603      	mov	r3, r0
 80101f8:	6039      	str	r1, [r7, #0]
 80101fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	2212      	movs	r2, #18
 8010200:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010202:	4b03      	ldr	r3, [pc, #12]	@ (8010210 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010204:	4618      	mov	r0, r3
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	200000cc 	.word	0x200000cc

08010214 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	4603      	mov	r3, r0
 801021c:	6039      	str	r1, [r7, #0]
 801021e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2204      	movs	r2, #4
 8010224:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010226:	4b03      	ldr	r3, [pc, #12]	@ (8010234 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010228:	4618      	mov	r0, r3
 801022a:	370c      	adds	r7, #12
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr
 8010234:	200000e0 	.word	0x200000e0

08010238 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	6039      	str	r1, [r7, #0]
 8010242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d105      	bne.n	8010256 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801024a:	683a      	ldr	r2, [r7, #0]
 801024c:	4907      	ldr	r1, [pc, #28]	@ (801026c <USBD_FS_ProductStrDescriptor+0x34>)
 801024e:	4808      	ldr	r0, [pc, #32]	@ (8010270 <USBD_FS_ProductStrDescriptor+0x38>)
 8010250:	f7fc fbb8 	bl	800c9c4 <USBD_GetString>
 8010254:	e004      	b.n	8010260 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	4904      	ldr	r1, [pc, #16]	@ (801026c <USBD_FS_ProductStrDescriptor+0x34>)
 801025a:	4805      	ldr	r0, [pc, #20]	@ (8010270 <USBD_FS_ProductStrDescriptor+0x38>)
 801025c:	f7fc fbb2 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010260:	4b02      	ldr	r3, [pc, #8]	@ (801026c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010262:	4618      	mov	r0, r3
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	20006314 	.word	0x20006314
 8010270:	080152a8 	.word	0x080152a8

08010274 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	4603      	mov	r3, r0
 801027c:	6039      	str	r1, [r7, #0]
 801027e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010280:	683a      	ldr	r2, [r7, #0]
 8010282:	4904      	ldr	r1, [pc, #16]	@ (8010294 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010284:	4804      	ldr	r0, [pc, #16]	@ (8010298 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010286:	f7fc fb9d 	bl	800c9c4 <USBD_GetString>
  return USBD_StrDesc;
 801028a:	4b02      	ldr	r3, [pc, #8]	@ (8010294 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801028c:	4618      	mov	r0, r3
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	20006314 	.word	0x20006314
 8010298:	080152c0 	.word	0x080152c0

0801029c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	6039      	str	r1, [r7, #0]
 80102a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	221a      	movs	r2, #26
 80102ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80102ae:	f000 f843 	bl	8010338 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80102b2:	4b02      	ldr	r3, [pc, #8]	@ (80102bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	200000e4 	.word	0x200000e4

080102c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	6039      	str	r1, [r7, #0]
 80102ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d105      	bne.n	80102de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102d2:	683a      	ldr	r2, [r7, #0]
 80102d4:	4907      	ldr	r1, [pc, #28]	@ (80102f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102d6:	4808      	ldr	r0, [pc, #32]	@ (80102f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102d8:	f7fc fb74 	bl	800c9c4 <USBD_GetString>
 80102dc:	e004      	b.n	80102e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102de:	683a      	ldr	r2, [r7, #0]
 80102e0:	4904      	ldr	r1, [pc, #16]	@ (80102f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102e2:	4805      	ldr	r0, [pc, #20]	@ (80102f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102e4:	f7fc fb6e 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102e8:	4b02      	ldr	r3, [pc, #8]	@ (80102f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	20006314 	.word	0x20006314
 80102f8:	080152d4 	.word	0x080152d4

080102fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	6039      	str	r1, [r7, #0]
 8010306:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010308:	79fb      	ldrb	r3, [r7, #7]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d105      	bne.n	801031a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801030e:	683a      	ldr	r2, [r7, #0]
 8010310:	4907      	ldr	r1, [pc, #28]	@ (8010330 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010312:	4808      	ldr	r0, [pc, #32]	@ (8010334 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010314:	f7fc fb56 	bl	800c9c4 <USBD_GetString>
 8010318:	e004      	b.n	8010324 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801031a:	683a      	ldr	r2, [r7, #0]
 801031c:	4904      	ldr	r1, [pc, #16]	@ (8010330 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801031e:	4805      	ldr	r0, [pc, #20]	@ (8010334 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010320:	f7fc fb50 	bl	800c9c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010324:	4b02      	ldr	r3, [pc, #8]	@ (8010330 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010326:	4618      	mov	r0, r3
 8010328:	3708      	adds	r7, #8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	20006314 	.word	0x20006314
 8010334:	080152e0 	.word	0x080152e0

08010338 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801033e:	68fa      	ldr	r2, [r7, #12]
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	4413      	add	r3, r2
 8010344:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d009      	beq.n	8010360 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801034c:	2208      	movs	r2, #8
 801034e:	4906      	ldr	r1, [pc, #24]	@ (8010368 <Get_SerialNum+0x30>)
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 f80d 	bl	8010370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010356:	2204      	movs	r2, #4
 8010358:	4904      	ldr	r1, [pc, #16]	@ (801036c <Get_SerialNum+0x34>)
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 f808 	bl	8010370 <IntToUnicode>
  }
}
 8010360:	bf00      	nop
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	200000e6 	.word	0x200000e6
 801036c:	200000f6 	.word	0x200000f6

08010370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010370:	b480      	push	{r7}
 8010372:	b087      	sub	sp, #28
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	4613      	mov	r3, r2
 801037c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801037e:	2300      	movs	r3, #0
 8010380:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010382:	2300      	movs	r3, #0
 8010384:	75fb      	strb	r3, [r7, #23]
 8010386:	e027      	b.n	80103d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	0f1b      	lsrs	r3, r3, #28
 801038c:	2b09      	cmp	r3, #9
 801038e:	d80b      	bhi.n	80103a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	0f1b      	lsrs	r3, r3, #28
 8010394:	b2da      	uxtb	r2, r3
 8010396:	7dfb      	ldrb	r3, [r7, #23]
 8010398:	005b      	lsls	r3, r3, #1
 801039a:	4619      	mov	r1, r3
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	440b      	add	r3, r1
 80103a0:	3230      	adds	r2, #48	@ 0x30
 80103a2:	b2d2      	uxtb	r2, r2
 80103a4:	701a      	strb	r2, [r3, #0]
 80103a6:	e00a      	b.n	80103be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	0f1b      	lsrs	r3, r3, #28
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	4619      	mov	r1, r3
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	440b      	add	r3, r1
 80103b8:	3237      	adds	r2, #55	@ 0x37
 80103ba:	b2d2      	uxtb	r2, r2
 80103bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	011b      	lsls	r3, r3, #4
 80103c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80103c4:	7dfb      	ldrb	r3, [r7, #23]
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	3301      	adds	r3, #1
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	4413      	add	r3, r2
 80103ce:	2200      	movs	r2, #0
 80103d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
 80103d4:	3301      	adds	r3, #1
 80103d6:	75fb      	strb	r3, [r7, #23]
 80103d8:	7dfa      	ldrb	r2, [r7, #23]
 80103da:	79fb      	ldrb	r3, [r7, #7]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d3d3      	bcc.n	8010388 <IntToUnicode+0x18>
  }
}
 80103e0:	bf00      	nop
 80103e2:	bf00      	nop
 80103e4:	371c      	adds	r7, #28
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
	...

080103f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b08a      	sub	sp, #40	@ 0x28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103f8:	f107 0314 	add.w	r3, r7, #20
 80103fc:	2200      	movs	r2, #0
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	605a      	str	r2, [r3, #4]
 8010402:	609a      	str	r2, [r3, #8]
 8010404:	60da      	str	r2, [r3, #12]
 8010406:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010410:	d13a      	bne.n	8010488 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010412:	2300      	movs	r3, #0
 8010414:	613b      	str	r3, [r7, #16]
 8010416:	4b1e      	ldr	r3, [pc, #120]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 8010418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801041a:	4a1d      	ldr	r2, [pc, #116]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 801041c:	f043 0301 	orr.w	r3, r3, #1
 8010420:	6313      	str	r3, [r2, #48]	@ 0x30
 8010422:	4b1b      	ldr	r3, [pc, #108]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 8010424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010426:	f003 0301 	and.w	r3, r3, #1
 801042a:	613b      	str	r3, [r7, #16]
 801042c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801042e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010434:	2302      	movs	r3, #2
 8010436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010438:	2300      	movs	r3, #0
 801043a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801043c:	2303      	movs	r3, #3
 801043e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010440:	230a      	movs	r3, #10
 8010442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010444:	f107 0314 	add.w	r3, r7, #20
 8010448:	4619      	mov	r1, r3
 801044a:	4812      	ldr	r0, [pc, #72]	@ (8010494 <HAL_PCD_MspInit+0xa4>)
 801044c:	f7f4 fdc8 	bl	8004fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010450:	4b0f      	ldr	r3, [pc, #60]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 8010452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010454:	4a0e      	ldr	r2, [pc, #56]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 8010456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801045a:	6353      	str	r3, [r2, #52]	@ 0x34
 801045c:	2300      	movs	r3, #0
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	4b0b      	ldr	r3, [pc, #44]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 8010462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010464:	4a0a      	ldr	r2, [pc, #40]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 8010466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801046a:	6453      	str	r3, [r2, #68]	@ 0x44
 801046c:	4b08      	ldr	r3, [pc, #32]	@ (8010490 <HAL_PCD_MspInit+0xa0>)
 801046e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010474:	60fb      	str	r3, [r7, #12]
 8010476:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010478:	2200      	movs	r2, #0
 801047a:	2105      	movs	r1, #5
 801047c:	2043      	movs	r0, #67	@ 0x43
 801047e:	f7f4 f883 	bl	8004588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010482:	2043      	movs	r0, #67	@ 0x43
 8010484:	f7f4 f8ac 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010488:	bf00      	nop
 801048a:	3728      	adds	r7, #40	@ 0x28
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	40023800 	.word	0x40023800
 8010494:	40020000 	.word	0x40020000

08010498 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80104ac:	4619      	mov	r1, r3
 80104ae:	4610      	mov	r0, r2
 80104b0:	f7fb f925 	bl	800b6fe <USBD_LL_SetupStage>
}
 80104b4:	bf00      	nop
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	460b      	mov	r3, r1
 80104c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80104ce:	78fa      	ldrb	r2, [r7, #3]
 80104d0:	6879      	ldr	r1, [r7, #4]
 80104d2:	4613      	mov	r3, r2
 80104d4:	00db      	lsls	r3, r3, #3
 80104d6:	4413      	add	r3, r2
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	440b      	add	r3, r1
 80104dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	78fb      	ldrb	r3, [r7, #3]
 80104e4:	4619      	mov	r1, r3
 80104e6:	f7fb f95f 	bl	800b7a8 <USBD_LL_DataOutStage>
}
 80104ea:	bf00      	nop
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	460b      	mov	r3, r1
 80104fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010504:	78fa      	ldrb	r2, [r7, #3]
 8010506:	6879      	ldr	r1, [r7, #4]
 8010508:	4613      	mov	r3, r2
 801050a:	00db      	lsls	r3, r3, #3
 801050c:	4413      	add	r3, r2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	440b      	add	r3, r1
 8010512:	3320      	adds	r3, #32
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	78fb      	ldrb	r3, [r7, #3]
 8010518:	4619      	mov	r1, r3
 801051a:	f7fb f9f8 	bl	800b90e <USBD_LL_DataInStage>
}
 801051e:	bf00      	nop
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010534:	4618      	mov	r0, r3
 8010536:	f7fb fb32 	bl	800bb9e <USBD_LL_SOF>
}
 801053a:	bf00      	nop
 801053c:	3708      	adds	r7, #8
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b084      	sub	sp, #16
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801054a:	2301      	movs	r3, #1
 801054c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	79db      	ldrb	r3, [r3, #7]
 8010552:	2b02      	cmp	r3, #2
 8010554:	d001      	beq.n	801055a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010556:	f7f3 f9b3 	bl	80038c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010560:	7bfa      	ldrb	r2, [r7, #15]
 8010562:	4611      	mov	r1, r2
 8010564:	4618      	mov	r0, r3
 8010566:	f7fb fad6 	bl	800bb16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010570:	4618      	mov	r0, r3
 8010572:	f7fb fa7e 	bl	800ba72 <USBD_LL_Reset>
}
 8010576:	bf00      	nop
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
	...

08010580 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801058e:	4618      	mov	r0, r3
 8010590:	f7fb fad1 	bl	800bb36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	6812      	ldr	r2, [r2, #0]
 80105a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80105a6:	f043 0301 	orr.w	r3, r3, #1
 80105aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	7adb      	ldrb	r3, [r3, #11]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d005      	beq.n	80105c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105b4:	4b04      	ldr	r3, [pc, #16]	@ (80105c8 <HAL_PCD_SuspendCallback+0x48>)
 80105b6:	691b      	ldr	r3, [r3, #16]
 80105b8:	4a03      	ldr	r2, [pc, #12]	@ (80105c8 <HAL_PCD_SuspendCallback+0x48>)
 80105ba:	f043 0306 	orr.w	r3, r3, #6
 80105be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80105c0:	bf00      	nop
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	e000ed00 	.word	0xe000ed00

080105cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fb fac7 	bl	800bb6e <USBD_LL_Resume>
}
 80105e0:	bf00      	nop
 80105e2:	3708      	adds	r7, #8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	460b      	mov	r3, r1
 80105f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80105fa:	78fa      	ldrb	r2, [r7, #3]
 80105fc:	4611      	mov	r1, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fb fb1f 	bl	800bc42 <USBD_LL_IsoOUTIncomplete>
}
 8010604:	bf00      	nop
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	460b      	mov	r3, r1
 8010616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801061e:	78fa      	ldrb	r2, [r7, #3]
 8010620:	4611      	mov	r1, r2
 8010622:	4618      	mov	r0, r3
 8010624:	f7fb fadb 	bl	800bbde <USBD_LL_IsoINIncomplete>
}
 8010628:	bf00      	nop
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801063e:	4618      	mov	r0, r3
 8010640:	f7fb fb31 	bl	800bca6 <USBD_LL_DevConnected>
}
 8010644:	bf00      	nop
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801065a:	4618      	mov	r0, r3
 801065c:	f7fb fb2e 	bl	800bcbc <USBD_LL_DevDisconnected>
}
 8010660:	bf00      	nop
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d13c      	bne.n	80106f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010678:	4a20      	ldr	r2, [pc, #128]	@ (80106fc <USBD_LL_Init+0x94>)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4a1e      	ldr	r2, [pc, #120]	@ (80106fc <USBD_LL_Init+0x94>)
 8010684:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010688:	4b1c      	ldr	r3, [pc, #112]	@ (80106fc <USBD_LL_Init+0x94>)
 801068a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801068e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010690:	4b1a      	ldr	r3, [pc, #104]	@ (80106fc <USBD_LL_Init+0x94>)
 8010692:	2204      	movs	r2, #4
 8010694:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010696:	4b19      	ldr	r3, [pc, #100]	@ (80106fc <USBD_LL_Init+0x94>)
 8010698:	2202      	movs	r2, #2
 801069a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801069c:	4b17      	ldr	r3, [pc, #92]	@ (80106fc <USBD_LL_Init+0x94>)
 801069e:	2200      	movs	r2, #0
 80106a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80106a2:	4b16      	ldr	r3, [pc, #88]	@ (80106fc <USBD_LL_Init+0x94>)
 80106a4:	2202      	movs	r2, #2
 80106a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80106a8:	4b14      	ldr	r3, [pc, #80]	@ (80106fc <USBD_LL_Init+0x94>)
 80106aa:	2200      	movs	r2, #0
 80106ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80106ae:	4b13      	ldr	r3, [pc, #76]	@ (80106fc <USBD_LL_Init+0x94>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80106b4:	4b11      	ldr	r3, [pc, #68]	@ (80106fc <USBD_LL_Init+0x94>)
 80106b6:	2200      	movs	r2, #0
 80106b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80106ba:	4b10      	ldr	r3, [pc, #64]	@ (80106fc <USBD_LL_Init+0x94>)
 80106bc:	2200      	movs	r2, #0
 80106be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80106c0:	4b0e      	ldr	r3, [pc, #56]	@ (80106fc <USBD_LL_Init+0x94>)
 80106c2:	2200      	movs	r2, #0
 80106c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80106c6:	480d      	ldr	r0, [pc, #52]	@ (80106fc <USBD_LL_Init+0x94>)
 80106c8:	f7f4 ffd6 	bl	8005678 <HAL_PCD_Init>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80106d2:	f7f3 f8f5 	bl	80038c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80106d6:	2180      	movs	r1, #128	@ 0x80
 80106d8:	4808      	ldr	r0, [pc, #32]	@ (80106fc <USBD_LL_Init+0x94>)
 80106da:	f7f6 fa0e 	bl	8006afa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80106de:	2240      	movs	r2, #64	@ 0x40
 80106e0:	2100      	movs	r1, #0
 80106e2:	4806      	ldr	r0, [pc, #24]	@ (80106fc <USBD_LL_Init+0x94>)
 80106e4:	f7f6 f9c2 	bl	8006a6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80106e8:	2280      	movs	r2, #128	@ 0x80
 80106ea:	2101      	movs	r1, #1
 80106ec:	4803      	ldr	r0, [pc, #12]	@ (80106fc <USBD_LL_Init+0x94>)
 80106ee:	f7f6 f9bd 	bl	8006a6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	20006514 	.word	0x20006514

08010700 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010708:	2300      	movs	r3, #0
 801070a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010716:	4618      	mov	r0, r3
 8010718:	f7f5 f8c8 	bl	80058ac <HAL_PCD_Start>
 801071c:	4603      	mov	r3, r0
 801071e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010720:	7bfb      	ldrb	r3, [r7, #15]
 8010722:	4618      	mov	r0, r3
 8010724:	f000 f942 	bl	80109ac <USBD_Get_USB_Status>
 8010728:	4603      	mov	r3, r0
 801072a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801072c:	7bbb      	ldrb	r3, [r7, #14]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3710      	adds	r7, #16
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b084      	sub	sp, #16
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	4608      	mov	r0, r1
 8010740:	4611      	mov	r1, r2
 8010742:	461a      	mov	r2, r3
 8010744:	4603      	mov	r3, r0
 8010746:	70fb      	strb	r3, [r7, #3]
 8010748:	460b      	mov	r3, r1
 801074a:	70bb      	strb	r3, [r7, #2]
 801074c:	4613      	mov	r3, r2
 801074e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010750:	2300      	movs	r3, #0
 8010752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010754:	2300      	movs	r3, #0
 8010756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801075e:	78bb      	ldrb	r3, [r7, #2]
 8010760:	883a      	ldrh	r2, [r7, #0]
 8010762:	78f9      	ldrb	r1, [r7, #3]
 8010764:	f7f5 fd9c 	bl	80062a0 <HAL_PCD_EP_Open>
 8010768:	4603      	mov	r3, r0
 801076a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801076c:	7bfb      	ldrb	r3, [r7, #15]
 801076e:	4618      	mov	r0, r3
 8010770:	f000 f91c 	bl	80109ac <USBD_Get_USB_Status>
 8010774:	4603      	mov	r3, r0
 8010776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010778:	7bbb      	ldrb	r3, [r7, #14]
}
 801077a:	4618      	mov	r0, r3
 801077c:	3710      	adds	r7, #16
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b084      	sub	sp, #16
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	460b      	mov	r3, r1
 801078c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010792:	2300      	movs	r3, #0
 8010794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801079c:	78fa      	ldrb	r2, [r7, #3]
 801079e:	4611      	mov	r1, r2
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7f5 fde7 	bl	8006374 <HAL_PCD_EP_Close>
 80107a6:	4603      	mov	r3, r0
 80107a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107aa:	7bfb      	ldrb	r3, [r7, #15]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f000 f8fd 	bl	80109ac <USBD_Get_USB_Status>
 80107b2:	4603      	mov	r3, r0
 80107b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	460b      	mov	r3, r1
 80107ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107d0:	2300      	movs	r3, #0
 80107d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107da:	78fa      	ldrb	r2, [r7, #3]
 80107dc:	4611      	mov	r1, r2
 80107de:	4618      	mov	r0, r3
 80107e0:	f7f5 fe9f 	bl	8006522 <HAL_PCD_EP_SetStall>
 80107e4:	4603      	mov	r3, r0
 80107e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f000 f8de 	bl	80109ac <USBD_Get_USB_Status>
 80107f0:	4603      	mov	r3, r0
 80107f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3710      	adds	r7, #16
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b084      	sub	sp, #16
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
 8010806:	460b      	mov	r3, r1
 8010808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010818:	78fa      	ldrb	r2, [r7, #3]
 801081a:	4611      	mov	r1, r2
 801081c:	4618      	mov	r0, r3
 801081e:	f7f5 fee3 	bl	80065e8 <HAL_PCD_EP_ClrStall>
 8010822:	4603      	mov	r3, r0
 8010824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010826:	7bfb      	ldrb	r3, [r7, #15]
 8010828:	4618      	mov	r0, r3
 801082a:	f000 f8bf 	bl	80109ac <USBD_Get_USB_Status>
 801082e:	4603      	mov	r3, r0
 8010830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010832:	7bbb      	ldrb	r3, [r7, #14]
}
 8010834:	4618      	mov	r0, r3
 8010836:	3710      	adds	r7, #16
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	460b      	mov	r3, r1
 8010846:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801084e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010854:	2b00      	cmp	r3, #0
 8010856:	da0b      	bge.n	8010870 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010858:	78fb      	ldrb	r3, [r7, #3]
 801085a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801085e:	68f9      	ldr	r1, [r7, #12]
 8010860:	4613      	mov	r3, r2
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	4413      	add	r3, r2
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	440b      	add	r3, r1
 801086a:	3316      	adds	r3, #22
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	e00b      	b.n	8010888 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010870:	78fb      	ldrb	r3, [r7, #3]
 8010872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010876:	68f9      	ldr	r1, [r7, #12]
 8010878:	4613      	mov	r3, r2
 801087a:	00db      	lsls	r3, r3, #3
 801087c:	4413      	add	r3, r2
 801087e:	009b      	lsls	r3, r3, #2
 8010880:	440b      	add	r3, r1
 8010882:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010888:	4618      	mov	r0, r3
 801088a:	3714      	adds	r7, #20
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr

08010894 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	460b      	mov	r3, r1
 801089e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108a0:	2300      	movs	r3, #0
 80108a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80108ae:	78fa      	ldrb	r2, [r7, #3]
 80108b0:	4611      	mov	r1, r2
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7f5 fcd0 	bl	8006258 <HAL_PCD_SetAddress>
 80108b8:	4603      	mov	r3, r0
 80108ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108bc:	7bfb      	ldrb	r3, [r7, #15]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 f874 	bl	80109ac <USBD_Get_USB_Status>
 80108c4:	4603      	mov	r3, r0
 80108c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b086      	sub	sp, #24
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	60f8      	str	r0, [r7, #12]
 80108da:	607a      	str	r2, [r7, #4]
 80108dc:	603b      	str	r3, [r7, #0]
 80108de:	460b      	mov	r3, r1
 80108e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108e2:	2300      	movs	r3, #0
 80108e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108e6:	2300      	movs	r3, #0
 80108e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108f0:	7af9      	ldrb	r1, [r7, #11]
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	f7f5 fdda 	bl	80064ae <HAL_PCD_EP_Transmit>
 80108fa:	4603      	mov	r3, r0
 80108fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108fe:	7dfb      	ldrb	r3, [r7, #23]
 8010900:	4618      	mov	r0, r3
 8010902:	f000 f853 	bl	80109ac <USBD_Get_USB_Status>
 8010906:	4603      	mov	r3, r0
 8010908:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801090a:	7dbb      	ldrb	r3, [r7, #22]
}
 801090c:	4618      	mov	r0, r3
 801090e:	3718      	adds	r7, #24
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b086      	sub	sp, #24
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	607a      	str	r2, [r7, #4]
 801091e:	603b      	str	r3, [r7, #0]
 8010920:	460b      	mov	r3, r1
 8010922:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010924:	2300      	movs	r3, #0
 8010926:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010928:	2300      	movs	r3, #0
 801092a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010932:	7af9      	ldrb	r1, [r7, #11]
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	f7f5 fd66 	bl	8006408 <HAL_PCD_EP_Receive>
 801093c:	4603      	mov	r3, r0
 801093e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010940:	7dfb      	ldrb	r3, [r7, #23]
 8010942:	4618      	mov	r0, r3
 8010944:	f000 f832 	bl	80109ac <USBD_Get_USB_Status>
 8010948:	4603      	mov	r3, r0
 801094a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801094c:	7dbb      	ldrb	r3, [r7, #22]
}
 801094e:	4618      	mov	r0, r3
 8010950:	3718      	adds	r7, #24
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}

08010956 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010956:	b580      	push	{r7, lr}
 8010958:	b082      	sub	sp, #8
 801095a:	af00      	add	r7, sp, #0
 801095c:	6078      	str	r0, [r7, #4]
 801095e:	460b      	mov	r3, r1
 8010960:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010968:	78fa      	ldrb	r2, [r7, #3]
 801096a:	4611      	mov	r1, r2
 801096c:	4618      	mov	r0, r3
 801096e:	f7f5 fd86 	bl	800647e <HAL_PCD_EP_GetRxCount>
 8010972:	4603      	mov	r3, r0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801097c:	b480      	push	{r7}
 801097e:	b083      	sub	sp, #12
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010984:	4b03      	ldr	r3, [pc, #12]	@ (8010994 <USBD_static_malloc+0x18>)
}
 8010986:	4618      	mov	r0, r3
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	200069f8 	.word	0x200069f8

08010998 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]

}
 80109a0:	bf00      	nop
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr

080109ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	4603      	mov	r3, r0
 80109b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109b6:	2300      	movs	r3, #0
 80109b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80109ba:	79fb      	ldrb	r3, [r7, #7]
 80109bc:	2b03      	cmp	r3, #3
 80109be:	d817      	bhi.n	80109f0 <USBD_Get_USB_Status+0x44>
 80109c0:	a201      	add	r2, pc, #4	@ (adr r2, 80109c8 <USBD_Get_USB_Status+0x1c>)
 80109c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c6:	bf00      	nop
 80109c8:	080109d9 	.word	0x080109d9
 80109cc:	080109df 	.word	0x080109df
 80109d0:	080109e5 	.word	0x080109e5
 80109d4:	080109eb 	.word	0x080109eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80109d8:	2300      	movs	r3, #0
 80109da:	73fb      	strb	r3, [r7, #15]
    break;
 80109dc:	e00b      	b.n	80109f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109de:	2303      	movs	r3, #3
 80109e0:	73fb      	strb	r3, [r7, #15]
    break;
 80109e2:	e008      	b.n	80109f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109e4:	2301      	movs	r3, #1
 80109e6:	73fb      	strb	r3, [r7, #15]
    break;
 80109e8:	e005      	b.n	80109f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109ea:	2303      	movs	r3, #3
 80109ec:	73fb      	strb	r3, [r7, #15]
    break;
 80109ee:	e002      	b.n	80109f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80109f0:	2303      	movs	r3, #3
 80109f2:	73fb      	strb	r3, [r7, #15]
    break;
 80109f4:	bf00      	nop
  }
  return usb_status;
 80109f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3714      	adds	r7, #20
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr

08010a04 <_Znwj>:
 8010a04:	2801      	cmp	r0, #1
 8010a06:	bf38      	it	cc
 8010a08:	2001      	movcc	r0, #1
 8010a0a:	b510      	push	{r4, lr}
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f000 ff76 	bl	8011900 <malloc>
 8010a14:	b100      	cbz	r0, 8010a18 <_Znwj+0x14>
 8010a16:	bd10      	pop	{r4, pc}
 8010a18:	f000 f806 	bl	8010a28 <_ZSt15get_new_handlerv>
 8010a1c:	b908      	cbnz	r0, 8010a22 <_Znwj+0x1e>
 8010a1e:	f000 ff67 	bl	80118f0 <abort>
 8010a22:	4780      	blx	r0
 8010a24:	e7f3      	b.n	8010a0e <_Znwj+0xa>
	...

08010a28 <_ZSt15get_new_handlerv>:
 8010a28:	4b02      	ldr	r3, [pc, #8]	@ (8010a34 <_ZSt15get_new_handlerv+0xc>)
 8010a2a:	6818      	ldr	r0, [r3, #0]
 8010a2c:	f3bf 8f5b 	dmb	ish
 8010a30:	4770      	bx	lr
 8010a32:	bf00      	nop
 8010a34:	20006c18 	.word	0x20006c18

08010a38 <pow>:
 8010a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a3a:	ed2d 8b02 	vpush	{d8}
 8010a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8010a42:	eef0 8a60 	vmov.f32	s17, s1
 8010a46:	ec55 4b11 	vmov	r4, r5, d1
 8010a4a:	f000 f871 	bl	8010b30 <__ieee754_pow>
 8010a4e:	4622      	mov	r2, r4
 8010a50:	462b      	mov	r3, r5
 8010a52:	4620      	mov	r0, r4
 8010a54:	4629      	mov	r1, r5
 8010a56:	ec57 6b10 	vmov	r6, r7, d0
 8010a5a:	f7f0 f87f 	bl	8000b5c <__aeabi_dcmpun>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d13b      	bne.n	8010ada <pow+0xa2>
 8010a62:	ec51 0b18 	vmov	r0, r1, d8
 8010a66:	2200      	movs	r2, #0
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f7f0 f845 	bl	8000af8 <__aeabi_dcmpeq>
 8010a6e:	b1b8      	cbz	r0, 8010aa0 <pow+0x68>
 8010a70:	2200      	movs	r2, #0
 8010a72:	2300      	movs	r3, #0
 8010a74:	4620      	mov	r0, r4
 8010a76:	4629      	mov	r1, r5
 8010a78:	f7f0 f83e 	bl	8000af8 <__aeabi_dcmpeq>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	d146      	bne.n	8010b0e <pow+0xd6>
 8010a80:	ec45 4b10 	vmov	d0, r4, r5
 8010a84:	f000 f848 	bl	8010b18 <finite>
 8010a88:	b338      	cbz	r0, 8010ada <pow+0xa2>
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	4620      	mov	r0, r4
 8010a90:	4629      	mov	r1, r5
 8010a92:	f7f0 f83b 	bl	8000b0c <__aeabi_dcmplt>
 8010a96:	b300      	cbz	r0, 8010ada <pow+0xa2>
 8010a98:	f002 f816 	bl	8012ac8 <__errno>
 8010a9c:	2322      	movs	r3, #34	@ 0x22
 8010a9e:	e01b      	b.n	8010ad8 <pow+0xa0>
 8010aa0:	ec47 6b10 	vmov	d0, r6, r7
 8010aa4:	f000 f838 	bl	8010b18 <finite>
 8010aa8:	b9e0      	cbnz	r0, 8010ae4 <pow+0xac>
 8010aaa:	eeb0 0a48 	vmov.f32	s0, s16
 8010aae:	eef0 0a68 	vmov.f32	s1, s17
 8010ab2:	f000 f831 	bl	8010b18 <finite>
 8010ab6:	b1a8      	cbz	r0, 8010ae4 <pow+0xac>
 8010ab8:	ec45 4b10 	vmov	d0, r4, r5
 8010abc:	f000 f82c 	bl	8010b18 <finite>
 8010ac0:	b180      	cbz	r0, 8010ae4 <pow+0xac>
 8010ac2:	4632      	mov	r2, r6
 8010ac4:	463b      	mov	r3, r7
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	4639      	mov	r1, r7
 8010aca:	f7f0 f847 	bl	8000b5c <__aeabi_dcmpun>
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d0e2      	beq.n	8010a98 <pow+0x60>
 8010ad2:	f001 fff9 	bl	8012ac8 <__errno>
 8010ad6:	2321      	movs	r3, #33	@ 0x21
 8010ad8:	6003      	str	r3, [r0, #0]
 8010ada:	ecbd 8b02 	vpop	{d8}
 8010ade:	ec47 6b10 	vmov	d0, r6, r7
 8010ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	4630      	mov	r0, r6
 8010aea:	4639      	mov	r1, r7
 8010aec:	f7f0 f804 	bl	8000af8 <__aeabi_dcmpeq>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d0f2      	beq.n	8010ada <pow+0xa2>
 8010af4:	eeb0 0a48 	vmov.f32	s0, s16
 8010af8:	eef0 0a68 	vmov.f32	s1, s17
 8010afc:	f000 f80c 	bl	8010b18 <finite>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d0ea      	beq.n	8010ada <pow+0xa2>
 8010b04:	ec45 4b10 	vmov	d0, r4, r5
 8010b08:	f000 f806 	bl	8010b18 <finite>
 8010b0c:	e7c3      	b.n	8010a96 <pow+0x5e>
 8010b0e:	4f01      	ldr	r7, [pc, #4]	@ (8010b14 <pow+0xdc>)
 8010b10:	2600      	movs	r6, #0
 8010b12:	e7e2      	b.n	8010ada <pow+0xa2>
 8010b14:	3ff00000 	.word	0x3ff00000

08010b18 <finite>:
 8010b18:	b082      	sub	sp, #8
 8010b1a:	ed8d 0b00 	vstr	d0, [sp]
 8010b1e:	9801      	ldr	r0, [sp, #4]
 8010b20:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8010b24:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8010b28:	0fc0      	lsrs	r0, r0, #31
 8010b2a:	b002      	add	sp, #8
 8010b2c:	4770      	bx	lr
	...

08010b30 <__ieee754_pow>:
 8010b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b34:	b091      	sub	sp, #68	@ 0x44
 8010b36:	ed8d 1b00 	vstr	d1, [sp]
 8010b3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010b3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010b42:	ea5a 0001 	orrs.w	r0, sl, r1
 8010b46:	ec57 6b10 	vmov	r6, r7, d0
 8010b4a:	d113      	bne.n	8010b74 <__ieee754_pow+0x44>
 8010b4c:	19b3      	adds	r3, r6, r6
 8010b4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010b52:	4152      	adcs	r2, r2
 8010b54:	4298      	cmp	r0, r3
 8010b56:	4b9a      	ldr	r3, [pc, #616]	@ (8010dc0 <__ieee754_pow+0x290>)
 8010b58:	4193      	sbcs	r3, r2
 8010b5a:	f080 84ee 	bcs.w	801153a <__ieee754_pow+0xa0a>
 8010b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b62:	4630      	mov	r0, r6
 8010b64:	4639      	mov	r1, r7
 8010b66:	f7ef fba9 	bl	80002bc <__adddf3>
 8010b6a:	ec41 0b10 	vmov	d0, r0, r1
 8010b6e:	b011      	add	sp, #68	@ 0x44
 8010b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b74:	4a93      	ldr	r2, [pc, #588]	@ (8010dc4 <__ieee754_pow+0x294>)
 8010b76:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8010b7a:	4295      	cmp	r5, r2
 8010b7c:	46b8      	mov	r8, r7
 8010b7e:	4633      	mov	r3, r6
 8010b80:	d80a      	bhi.n	8010b98 <__ieee754_pow+0x68>
 8010b82:	d104      	bne.n	8010b8e <__ieee754_pow+0x5e>
 8010b84:	2e00      	cmp	r6, #0
 8010b86:	d1ea      	bne.n	8010b5e <__ieee754_pow+0x2e>
 8010b88:	45aa      	cmp	sl, r5
 8010b8a:	d8e8      	bhi.n	8010b5e <__ieee754_pow+0x2e>
 8010b8c:	e001      	b.n	8010b92 <__ieee754_pow+0x62>
 8010b8e:	4592      	cmp	sl, r2
 8010b90:	d802      	bhi.n	8010b98 <__ieee754_pow+0x68>
 8010b92:	4592      	cmp	sl, r2
 8010b94:	d10f      	bne.n	8010bb6 <__ieee754_pow+0x86>
 8010b96:	b171      	cbz	r1, 8010bb6 <__ieee754_pow+0x86>
 8010b98:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010b9c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010ba0:	ea58 0803 	orrs.w	r8, r8, r3
 8010ba4:	d1db      	bne.n	8010b5e <__ieee754_pow+0x2e>
 8010ba6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010baa:	18db      	adds	r3, r3, r3
 8010bac:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010bb0:	4152      	adcs	r2, r2
 8010bb2:	4598      	cmp	r8, r3
 8010bb4:	e7cf      	b.n	8010b56 <__ieee754_pow+0x26>
 8010bb6:	f1b8 0f00 	cmp.w	r8, #0
 8010bba:	46ab      	mov	fp, r5
 8010bbc:	da43      	bge.n	8010c46 <__ieee754_pow+0x116>
 8010bbe:	4a82      	ldr	r2, [pc, #520]	@ (8010dc8 <__ieee754_pow+0x298>)
 8010bc0:	4592      	cmp	sl, r2
 8010bc2:	d856      	bhi.n	8010c72 <__ieee754_pow+0x142>
 8010bc4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010bc8:	4592      	cmp	sl, r2
 8010bca:	f240 84c5 	bls.w	8011558 <__ieee754_pow+0xa28>
 8010bce:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010bd2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010bd6:	2a14      	cmp	r2, #20
 8010bd8:	dd18      	ble.n	8010c0c <__ieee754_pow+0xdc>
 8010bda:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010bde:	fa21 f402 	lsr.w	r4, r1, r2
 8010be2:	fa04 f202 	lsl.w	r2, r4, r2
 8010be6:	428a      	cmp	r2, r1
 8010be8:	f040 84b6 	bne.w	8011558 <__ieee754_pow+0xa28>
 8010bec:	f004 0401 	and.w	r4, r4, #1
 8010bf0:	f1c4 0402 	rsb	r4, r4, #2
 8010bf4:	2900      	cmp	r1, #0
 8010bf6:	d159      	bne.n	8010cac <__ieee754_pow+0x17c>
 8010bf8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010bfc:	d148      	bne.n	8010c90 <__ieee754_pow+0x160>
 8010bfe:	4632      	mov	r2, r6
 8010c00:	463b      	mov	r3, r7
 8010c02:	4630      	mov	r0, r6
 8010c04:	4639      	mov	r1, r7
 8010c06:	f7ef fd0f 	bl	8000628 <__aeabi_dmul>
 8010c0a:	e7ae      	b.n	8010b6a <__ieee754_pow+0x3a>
 8010c0c:	2900      	cmp	r1, #0
 8010c0e:	d14c      	bne.n	8010caa <__ieee754_pow+0x17a>
 8010c10:	f1c2 0214 	rsb	r2, r2, #20
 8010c14:	fa4a f402 	asr.w	r4, sl, r2
 8010c18:	fa04 f202 	lsl.w	r2, r4, r2
 8010c1c:	4552      	cmp	r2, sl
 8010c1e:	f040 8498 	bne.w	8011552 <__ieee754_pow+0xa22>
 8010c22:	f004 0401 	and.w	r4, r4, #1
 8010c26:	f1c4 0402 	rsb	r4, r4, #2
 8010c2a:	4a68      	ldr	r2, [pc, #416]	@ (8010dcc <__ieee754_pow+0x29c>)
 8010c2c:	4592      	cmp	sl, r2
 8010c2e:	d1e3      	bne.n	8010bf8 <__ieee754_pow+0xc8>
 8010c30:	f1b9 0f00 	cmp.w	r9, #0
 8010c34:	f280 8489 	bge.w	801154a <__ieee754_pow+0xa1a>
 8010c38:	4964      	ldr	r1, [pc, #400]	@ (8010dcc <__ieee754_pow+0x29c>)
 8010c3a:	4632      	mov	r2, r6
 8010c3c:	463b      	mov	r3, r7
 8010c3e:	2000      	movs	r0, #0
 8010c40:	f7ef fe1c 	bl	800087c <__aeabi_ddiv>
 8010c44:	e791      	b.n	8010b6a <__ieee754_pow+0x3a>
 8010c46:	2400      	movs	r4, #0
 8010c48:	bb81      	cbnz	r1, 8010cac <__ieee754_pow+0x17c>
 8010c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8010dc4 <__ieee754_pow+0x294>)
 8010c4c:	4592      	cmp	sl, r2
 8010c4e:	d1ec      	bne.n	8010c2a <__ieee754_pow+0xfa>
 8010c50:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8010c54:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010c58:	431a      	orrs	r2, r3
 8010c5a:	f000 846e 	beq.w	801153a <__ieee754_pow+0xa0a>
 8010c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8010dd0 <__ieee754_pow+0x2a0>)
 8010c60:	429d      	cmp	r5, r3
 8010c62:	d908      	bls.n	8010c76 <__ieee754_pow+0x146>
 8010c64:	f1b9 0f00 	cmp.w	r9, #0
 8010c68:	f280 846b 	bge.w	8011542 <__ieee754_pow+0xa12>
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	2100      	movs	r1, #0
 8010c70:	e77b      	b.n	8010b6a <__ieee754_pow+0x3a>
 8010c72:	2402      	movs	r4, #2
 8010c74:	e7e8      	b.n	8010c48 <__ieee754_pow+0x118>
 8010c76:	f1b9 0f00 	cmp.w	r9, #0
 8010c7a:	f04f 0000 	mov.w	r0, #0
 8010c7e:	f04f 0100 	mov.w	r1, #0
 8010c82:	f6bf af72 	bge.w	8010b6a <__ieee754_pow+0x3a>
 8010c86:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010c8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010c8e:	e76c      	b.n	8010b6a <__ieee754_pow+0x3a>
 8010c90:	4a50      	ldr	r2, [pc, #320]	@ (8010dd4 <__ieee754_pow+0x2a4>)
 8010c92:	4591      	cmp	r9, r2
 8010c94:	d10a      	bne.n	8010cac <__ieee754_pow+0x17c>
 8010c96:	f1b8 0f00 	cmp.w	r8, #0
 8010c9a:	db07      	blt.n	8010cac <__ieee754_pow+0x17c>
 8010c9c:	ec47 6b10 	vmov	d0, r6, r7
 8010ca0:	b011      	add	sp, #68	@ 0x44
 8010ca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca6:	f000 bd4d 	b.w	8011744 <__ieee754_sqrt>
 8010caa:	2400      	movs	r4, #0
 8010cac:	ec47 6b10 	vmov	d0, r6, r7
 8010cb0:	9302      	str	r3, [sp, #8]
 8010cb2:	f000 fcc5 	bl	8011640 <fabs>
 8010cb6:	9b02      	ldr	r3, [sp, #8]
 8010cb8:	ec51 0b10 	vmov	r0, r1, d0
 8010cbc:	bb43      	cbnz	r3, 8010d10 <__ieee754_pow+0x1e0>
 8010cbe:	4b43      	ldr	r3, [pc, #268]	@ (8010dcc <__ieee754_pow+0x29c>)
 8010cc0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d000      	beq.n	8010cca <__ieee754_pow+0x19a>
 8010cc8:	bb15      	cbnz	r5, 8010d10 <__ieee754_pow+0x1e0>
 8010cca:	f1b9 0f00 	cmp.w	r9, #0
 8010cce:	da05      	bge.n	8010cdc <__ieee754_pow+0x1ac>
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	493d      	ldr	r1, [pc, #244]	@ (8010dcc <__ieee754_pow+0x29c>)
 8010cd8:	f7ef fdd0 	bl	800087c <__aeabi_ddiv>
 8010cdc:	f1b8 0f00 	cmp.w	r8, #0
 8010ce0:	f6bf af43 	bge.w	8010b6a <__ieee754_pow+0x3a>
 8010ce4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010ce8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010cec:	4325      	orrs	r5, r4
 8010cee:	d108      	bne.n	8010d02 <__ieee754_pow+0x1d2>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	f7ef fade 	bl	80002b8 <__aeabi_dsub>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	460b      	mov	r3, r1
 8010d00:	e79e      	b.n	8010c40 <__ieee754_pow+0x110>
 8010d02:	2c01      	cmp	r4, #1
 8010d04:	f47f af31 	bne.w	8010b6a <__ieee754_pow+0x3a>
 8010d08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	e72c      	b.n	8010b6a <__ieee754_pow+0x3a>
 8010d10:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8010d14:	3b01      	subs	r3, #1
 8010d16:	ea53 0204 	orrs.w	r2, r3, r4
 8010d1a:	d102      	bne.n	8010d22 <__ieee754_pow+0x1f2>
 8010d1c:	4632      	mov	r2, r6
 8010d1e:	463b      	mov	r3, r7
 8010d20:	e7e8      	b.n	8010cf4 <__ieee754_pow+0x1c4>
 8010d22:	3c01      	subs	r4, #1
 8010d24:	431c      	orrs	r4, r3
 8010d26:	d016      	beq.n	8010d56 <__ieee754_pow+0x226>
 8010d28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010db0 <__ieee754_pow+0x280>
 8010d2c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010d30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d34:	f240 8110 	bls.w	8010f58 <__ieee754_pow+0x428>
 8010d38:	4b27      	ldr	r3, [pc, #156]	@ (8010dd8 <__ieee754_pow+0x2a8>)
 8010d3a:	459a      	cmp	sl, r3
 8010d3c:	4b24      	ldr	r3, [pc, #144]	@ (8010dd0 <__ieee754_pow+0x2a0>)
 8010d3e:	d916      	bls.n	8010d6e <__ieee754_pow+0x23e>
 8010d40:	429d      	cmp	r5, r3
 8010d42:	d80b      	bhi.n	8010d5c <__ieee754_pow+0x22c>
 8010d44:	f1b9 0f00 	cmp.w	r9, #0
 8010d48:	da0b      	bge.n	8010d62 <__ieee754_pow+0x232>
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	b011      	add	sp, #68	@ 0x44
 8010d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d52:	f000 bc6d 	b.w	8011630 <__math_oflow>
 8010d56:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8010db8 <__ieee754_pow+0x288>
 8010d5a:	e7e7      	b.n	8010d2c <__ieee754_pow+0x1fc>
 8010d5c:	f1b9 0f00 	cmp.w	r9, #0
 8010d60:	dcf3      	bgt.n	8010d4a <__ieee754_pow+0x21a>
 8010d62:	2000      	movs	r0, #0
 8010d64:	b011      	add	sp, #68	@ 0x44
 8010d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d6a:	f000 bc59 	b.w	8011620 <__math_uflow>
 8010d6e:	429d      	cmp	r5, r3
 8010d70:	d20c      	bcs.n	8010d8c <__ieee754_pow+0x25c>
 8010d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d76:	2200      	movs	r2, #0
 8010d78:	2300      	movs	r3, #0
 8010d7a:	f7ef fec7 	bl	8000b0c <__aeabi_dcmplt>
 8010d7e:	3800      	subs	r0, #0
 8010d80:	bf18      	it	ne
 8010d82:	2001      	movne	r0, #1
 8010d84:	f1b9 0f00 	cmp.w	r9, #0
 8010d88:	daec      	bge.n	8010d64 <__ieee754_pow+0x234>
 8010d8a:	e7df      	b.n	8010d4c <__ieee754_pow+0x21c>
 8010d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8010dcc <__ieee754_pow+0x29c>)
 8010d8e:	429d      	cmp	r5, r3
 8010d90:	f04f 0200 	mov.w	r2, #0
 8010d94:	d922      	bls.n	8010ddc <__ieee754_pow+0x2ac>
 8010d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	f7ef feb6 	bl	8000b0c <__aeabi_dcmplt>
 8010da0:	3800      	subs	r0, #0
 8010da2:	bf18      	it	ne
 8010da4:	2001      	movne	r0, #1
 8010da6:	f1b9 0f00 	cmp.w	r9, #0
 8010daa:	dccf      	bgt.n	8010d4c <__ieee754_pow+0x21c>
 8010dac:	e7da      	b.n	8010d64 <__ieee754_pow+0x234>
 8010dae:	bf00      	nop
 8010db0:	00000000 	.word	0x00000000
 8010db4:	3ff00000 	.word	0x3ff00000
 8010db8:	00000000 	.word	0x00000000
 8010dbc:	bff00000 	.word	0xbff00000
 8010dc0:	fff00000 	.word	0xfff00000
 8010dc4:	7ff00000 	.word	0x7ff00000
 8010dc8:	433fffff 	.word	0x433fffff
 8010dcc:	3ff00000 	.word	0x3ff00000
 8010dd0:	3fefffff 	.word	0x3fefffff
 8010dd4:	3fe00000 	.word	0x3fe00000
 8010dd8:	43f00000 	.word	0x43f00000
 8010ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8010f48 <__ieee754_pow+0x418>)
 8010dde:	f7ef fa6b 	bl	80002b8 <__aeabi_dsub>
 8010de2:	a351      	add	r3, pc, #324	@ (adr r3, 8010f28 <__ieee754_pow+0x3f8>)
 8010de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de8:	4604      	mov	r4, r0
 8010dea:	460d      	mov	r5, r1
 8010dec:	f7ef fc1c 	bl	8000628 <__aeabi_dmul>
 8010df0:	a34f      	add	r3, pc, #316	@ (adr r3, 8010f30 <__ieee754_pow+0x400>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	4606      	mov	r6, r0
 8010df8:	460f      	mov	r7, r1
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	f7ef fc13 	bl	8000628 <__aeabi_dmul>
 8010e02:	4b52      	ldr	r3, [pc, #328]	@ (8010f4c <__ieee754_pow+0x41c>)
 8010e04:	4682      	mov	sl, r0
 8010e06:	468b      	mov	fp, r1
 8010e08:	2200      	movs	r2, #0
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	4629      	mov	r1, r5
 8010e0e:	f7ef fc0b 	bl	8000628 <__aeabi_dmul>
 8010e12:	4602      	mov	r2, r0
 8010e14:	460b      	mov	r3, r1
 8010e16:	a148      	add	r1, pc, #288	@ (adr r1, 8010f38 <__ieee754_pow+0x408>)
 8010e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e1c:	f7ef fa4c 	bl	80002b8 <__aeabi_dsub>
 8010e20:	4622      	mov	r2, r4
 8010e22:	462b      	mov	r3, r5
 8010e24:	f7ef fc00 	bl	8000628 <__aeabi_dmul>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	4948      	ldr	r1, [pc, #288]	@ (8010f50 <__ieee754_pow+0x420>)
 8010e30:	f7ef fa42 	bl	80002b8 <__aeabi_dsub>
 8010e34:	4622      	mov	r2, r4
 8010e36:	4680      	mov	r8, r0
 8010e38:	4689      	mov	r9, r1
 8010e3a:	462b      	mov	r3, r5
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	4629      	mov	r1, r5
 8010e40:	f7ef fbf2 	bl	8000628 <__aeabi_dmul>
 8010e44:	4602      	mov	r2, r0
 8010e46:	460b      	mov	r3, r1
 8010e48:	4640      	mov	r0, r8
 8010e4a:	4649      	mov	r1, r9
 8010e4c:	f7ef fbec 	bl	8000628 <__aeabi_dmul>
 8010e50:	a33b      	add	r3, pc, #236	@ (adr r3, 8010f40 <__ieee754_pow+0x410>)
 8010e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e56:	f7ef fbe7 	bl	8000628 <__aeabi_dmul>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	4650      	mov	r0, sl
 8010e60:	4659      	mov	r1, fp
 8010e62:	f7ef fa29 	bl	80002b8 <__aeabi_dsub>
 8010e66:	4602      	mov	r2, r0
 8010e68:	460b      	mov	r3, r1
 8010e6a:	4680      	mov	r8, r0
 8010e6c:	4689      	mov	r9, r1
 8010e6e:	4630      	mov	r0, r6
 8010e70:	4639      	mov	r1, r7
 8010e72:	f7ef fa23 	bl	80002bc <__adddf3>
 8010e76:	2400      	movs	r4, #0
 8010e78:	4632      	mov	r2, r6
 8010e7a:	463b      	mov	r3, r7
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	460d      	mov	r5, r1
 8010e80:	f7ef fa1a 	bl	80002b8 <__aeabi_dsub>
 8010e84:	4602      	mov	r2, r0
 8010e86:	460b      	mov	r3, r1
 8010e88:	4640      	mov	r0, r8
 8010e8a:	4649      	mov	r1, r9
 8010e8c:	f7ef fa14 	bl	80002b8 <__aeabi_dsub>
 8010e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e98:	2300      	movs	r3, #0
 8010e9a:	9304      	str	r3, [sp, #16]
 8010e9c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	460f      	mov	r7, r1
 8010ea4:	465b      	mov	r3, fp
 8010ea6:	4652      	mov	r2, sl
 8010ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010eac:	f7ef fa04 	bl	80002b8 <__aeabi_dsub>
 8010eb0:	4622      	mov	r2, r4
 8010eb2:	462b      	mov	r3, r5
 8010eb4:	f7ef fbb8 	bl	8000628 <__aeabi_dmul>
 8010eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ebc:	4680      	mov	r8, r0
 8010ebe:	4689      	mov	r9, r1
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	4639      	mov	r1, r7
 8010ec4:	f7ef fbb0 	bl	8000628 <__aeabi_dmul>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4640      	mov	r0, r8
 8010ece:	4649      	mov	r1, r9
 8010ed0:	f7ef f9f4 	bl	80002bc <__adddf3>
 8010ed4:	465b      	mov	r3, fp
 8010ed6:	4606      	mov	r6, r0
 8010ed8:	460f      	mov	r7, r1
 8010eda:	4652      	mov	r2, sl
 8010edc:	4620      	mov	r0, r4
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ef fba2 	bl	8000628 <__aeabi_dmul>
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	4680      	mov	r8, r0
 8010eea:	4689      	mov	r9, r1
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef f9e4 	bl	80002bc <__adddf3>
 8010ef4:	4b17      	ldr	r3, [pc, #92]	@ (8010f54 <__ieee754_pow+0x424>)
 8010ef6:	4299      	cmp	r1, r3
 8010ef8:	4604      	mov	r4, r0
 8010efa:	460d      	mov	r5, r1
 8010efc:	468b      	mov	fp, r1
 8010efe:	f340 820b 	ble.w	8011318 <__ieee754_pow+0x7e8>
 8010f02:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010f06:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010f0a:	4303      	orrs	r3, r0
 8010f0c:	f000 81ea 	beq.w	80112e4 <__ieee754_pow+0x7b4>
 8010f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f14:	2200      	movs	r2, #0
 8010f16:	2300      	movs	r3, #0
 8010f18:	f7ef fdf8 	bl	8000b0c <__aeabi_dcmplt>
 8010f1c:	3800      	subs	r0, #0
 8010f1e:	bf18      	it	ne
 8010f20:	2001      	movne	r0, #1
 8010f22:	e713      	b.n	8010d4c <__ieee754_pow+0x21c>
 8010f24:	f3af 8000 	nop.w
 8010f28:	60000000 	.word	0x60000000
 8010f2c:	3ff71547 	.word	0x3ff71547
 8010f30:	f85ddf44 	.word	0xf85ddf44
 8010f34:	3e54ae0b 	.word	0x3e54ae0b
 8010f38:	55555555 	.word	0x55555555
 8010f3c:	3fd55555 	.word	0x3fd55555
 8010f40:	652b82fe 	.word	0x652b82fe
 8010f44:	3ff71547 	.word	0x3ff71547
 8010f48:	3ff00000 	.word	0x3ff00000
 8010f4c:	3fd00000 	.word	0x3fd00000
 8010f50:	3fe00000 	.word	0x3fe00000
 8010f54:	408fffff 	.word	0x408fffff
 8010f58:	4bd5      	ldr	r3, [pc, #852]	@ (80112b0 <__ieee754_pow+0x780>)
 8010f5a:	ea08 0303 	and.w	r3, r8, r3
 8010f5e:	2200      	movs	r2, #0
 8010f60:	b92b      	cbnz	r3, 8010f6e <__ieee754_pow+0x43e>
 8010f62:	4bd4      	ldr	r3, [pc, #848]	@ (80112b4 <__ieee754_pow+0x784>)
 8010f64:	f7ef fb60 	bl	8000628 <__aeabi_dmul>
 8010f68:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010f6c:	468b      	mov	fp, r1
 8010f6e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010f72:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010f76:	4413      	add	r3, r2
 8010f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f7a:	4bcf      	ldr	r3, [pc, #828]	@ (80112b8 <__ieee754_pow+0x788>)
 8010f7c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010f80:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010f84:	459b      	cmp	fp, r3
 8010f86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010f8a:	dd08      	ble.n	8010f9e <__ieee754_pow+0x46e>
 8010f8c:	4bcb      	ldr	r3, [pc, #812]	@ (80112bc <__ieee754_pow+0x78c>)
 8010f8e:	459b      	cmp	fp, r3
 8010f90:	f340 81a5 	ble.w	80112de <__ieee754_pow+0x7ae>
 8010f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f96:	3301      	adds	r3, #1
 8010f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f9a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010f9e:	f04f 0a00 	mov.w	sl, #0
 8010fa2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fa8:	4bc5      	ldr	r3, [pc, #788]	@ (80112c0 <__ieee754_pow+0x790>)
 8010faa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010fae:	ed93 7b00 	vldr	d7, [r3]
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	ec53 2b17 	vmov	r2, r3, d7
 8010fb8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010fbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010fc0:	f7ef f97a 	bl	80002b8 <__aeabi_dsub>
 8010fc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010fc8:	4606      	mov	r6, r0
 8010fca:	460f      	mov	r7, r1
 8010fcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fd0:	f7ef f974 	bl	80002bc <__adddf3>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	2000      	movs	r0, #0
 8010fda:	49ba      	ldr	r1, [pc, #744]	@ (80112c4 <__ieee754_pow+0x794>)
 8010fdc:	f7ef fc4e 	bl	800087c <__aeabi_ddiv>
 8010fe0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	4630      	mov	r0, r6
 8010fea:	4639      	mov	r1, r7
 8010fec:	f7ef fb1c 	bl	8000628 <__aeabi_dmul>
 8010ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ff4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010ff8:	106d      	asrs	r5, r5, #1
 8010ffa:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010ffe:	f04f 0b00 	mov.w	fp, #0
 8011002:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8011006:	4661      	mov	r1, ip
 8011008:	2200      	movs	r2, #0
 801100a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801100e:	4658      	mov	r0, fp
 8011010:	46e1      	mov	r9, ip
 8011012:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8011016:	4614      	mov	r4, r2
 8011018:	461d      	mov	r5, r3
 801101a:	f7ef fb05 	bl	8000628 <__aeabi_dmul>
 801101e:	4602      	mov	r2, r0
 8011020:	460b      	mov	r3, r1
 8011022:	4630      	mov	r0, r6
 8011024:	4639      	mov	r1, r7
 8011026:	f7ef f947 	bl	80002b8 <__aeabi_dsub>
 801102a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801102e:	4606      	mov	r6, r0
 8011030:	460f      	mov	r7, r1
 8011032:	4620      	mov	r0, r4
 8011034:	4629      	mov	r1, r5
 8011036:	f7ef f93f 	bl	80002b8 <__aeabi_dsub>
 801103a:	4602      	mov	r2, r0
 801103c:	460b      	mov	r3, r1
 801103e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011042:	f7ef f939 	bl	80002b8 <__aeabi_dsub>
 8011046:	465a      	mov	r2, fp
 8011048:	464b      	mov	r3, r9
 801104a:	f7ef faed 	bl	8000628 <__aeabi_dmul>
 801104e:	4602      	mov	r2, r0
 8011050:	460b      	mov	r3, r1
 8011052:	4630      	mov	r0, r6
 8011054:	4639      	mov	r1, r7
 8011056:	f7ef f92f 	bl	80002b8 <__aeabi_dsub>
 801105a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801105e:	f7ef fae3 	bl	8000628 <__aeabi_dmul>
 8011062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011066:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801106a:	4610      	mov	r0, r2
 801106c:	4619      	mov	r1, r3
 801106e:	f7ef fadb 	bl	8000628 <__aeabi_dmul>
 8011072:	a37d      	add	r3, pc, #500	@ (adr r3, 8011268 <__ieee754_pow+0x738>)
 8011074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011078:	4604      	mov	r4, r0
 801107a:	460d      	mov	r5, r1
 801107c:	f7ef fad4 	bl	8000628 <__aeabi_dmul>
 8011080:	a37b      	add	r3, pc, #492	@ (adr r3, 8011270 <__ieee754_pow+0x740>)
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	f7ef f919 	bl	80002bc <__adddf3>
 801108a:	4622      	mov	r2, r4
 801108c:	462b      	mov	r3, r5
 801108e:	f7ef facb 	bl	8000628 <__aeabi_dmul>
 8011092:	a379      	add	r3, pc, #484	@ (adr r3, 8011278 <__ieee754_pow+0x748>)
 8011094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011098:	f7ef f910 	bl	80002bc <__adddf3>
 801109c:	4622      	mov	r2, r4
 801109e:	462b      	mov	r3, r5
 80110a0:	f7ef fac2 	bl	8000628 <__aeabi_dmul>
 80110a4:	a376      	add	r3, pc, #472	@ (adr r3, 8011280 <__ieee754_pow+0x750>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	f7ef f907 	bl	80002bc <__adddf3>
 80110ae:	4622      	mov	r2, r4
 80110b0:	462b      	mov	r3, r5
 80110b2:	f7ef fab9 	bl	8000628 <__aeabi_dmul>
 80110b6:	a374      	add	r3, pc, #464	@ (adr r3, 8011288 <__ieee754_pow+0x758>)
 80110b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110bc:	f7ef f8fe 	bl	80002bc <__adddf3>
 80110c0:	4622      	mov	r2, r4
 80110c2:	462b      	mov	r3, r5
 80110c4:	f7ef fab0 	bl	8000628 <__aeabi_dmul>
 80110c8:	a371      	add	r3, pc, #452	@ (adr r3, 8011290 <__ieee754_pow+0x760>)
 80110ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ce:	f7ef f8f5 	bl	80002bc <__adddf3>
 80110d2:	4622      	mov	r2, r4
 80110d4:	4606      	mov	r6, r0
 80110d6:	460f      	mov	r7, r1
 80110d8:	462b      	mov	r3, r5
 80110da:	4620      	mov	r0, r4
 80110dc:	4629      	mov	r1, r5
 80110de:	f7ef faa3 	bl	8000628 <__aeabi_dmul>
 80110e2:	4602      	mov	r2, r0
 80110e4:	460b      	mov	r3, r1
 80110e6:	4630      	mov	r0, r6
 80110e8:	4639      	mov	r1, r7
 80110ea:	f7ef fa9d 	bl	8000628 <__aeabi_dmul>
 80110ee:	465a      	mov	r2, fp
 80110f0:	4604      	mov	r4, r0
 80110f2:	460d      	mov	r5, r1
 80110f4:	464b      	mov	r3, r9
 80110f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110fa:	f7ef f8df 	bl	80002bc <__adddf3>
 80110fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011102:	f7ef fa91 	bl	8000628 <__aeabi_dmul>
 8011106:	4622      	mov	r2, r4
 8011108:	462b      	mov	r3, r5
 801110a:	f7ef f8d7 	bl	80002bc <__adddf3>
 801110e:	465a      	mov	r2, fp
 8011110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011114:	464b      	mov	r3, r9
 8011116:	4658      	mov	r0, fp
 8011118:	4649      	mov	r1, r9
 801111a:	f7ef fa85 	bl	8000628 <__aeabi_dmul>
 801111e:	4b6a      	ldr	r3, [pc, #424]	@ (80112c8 <__ieee754_pow+0x798>)
 8011120:	2200      	movs	r2, #0
 8011122:	4606      	mov	r6, r0
 8011124:	460f      	mov	r7, r1
 8011126:	f7ef f8c9 	bl	80002bc <__adddf3>
 801112a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801112e:	f7ef f8c5 	bl	80002bc <__adddf3>
 8011132:	46d8      	mov	r8, fp
 8011134:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8011138:	460d      	mov	r5, r1
 801113a:	465a      	mov	r2, fp
 801113c:	460b      	mov	r3, r1
 801113e:	4640      	mov	r0, r8
 8011140:	4649      	mov	r1, r9
 8011142:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8011146:	f7ef fa6f 	bl	8000628 <__aeabi_dmul>
 801114a:	465c      	mov	r4, fp
 801114c:	4680      	mov	r8, r0
 801114e:	4689      	mov	r9, r1
 8011150:	4b5d      	ldr	r3, [pc, #372]	@ (80112c8 <__ieee754_pow+0x798>)
 8011152:	2200      	movs	r2, #0
 8011154:	4620      	mov	r0, r4
 8011156:	4629      	mov	r1, r5
 8011158:	f7ef f8ae 	bl	80002b8 <__aeabi_dsub>
 801115c:	4632      	mov	r2, r6
 801115e:	463b      	mov	r3, r7
 8011160:	f7ef f8aa 	bl	80002b8 <__aeabi_dsub>
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801116c:	f7ef f8a4 	bl	80002b8 <__aeabi_dsub>
 8011170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011174:	f7ef fa58 	bl	8000628 <__aeabi_dmul>
 8011178:	4622      	mov	r2, r4
 801117a:	4606      	mov	r6, r0
 801117c:	460f      	mov	r7, r1
 801117e:	462b      	mov	r3, r5
 8011180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011184:	f7ef fa50 	bl	8000628 <__aeabi_dmul>
 8011188:	4602      	mov	r2, r0
 801118a:	460b      	mov	r3, r1
 801118c:	4630      	mov	r0, r6
 801118e:	4639      	mov	r1, r7
 8011190:	f7ef f894 	bl	80002bc <__adddf3>
 8011194:	4606      	mov	r6, r0
 8011196:	460f      	mov	r7, r1
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4640      	mov	r0, r8
 801119e:	4649      	mov	r1, r9
 80111a0:	f7ef f88c 	bl	80002bc <__adddf3>
 80111a4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80111a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8011298 <__ieee754_pow+0x768>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	4658      	mov	r0, fp
 80111b0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80111b4:	460d      	mov	r5, r1
 80111b6:	f7ef fa37 	bl	8000628 <__aeabi_dmul>
 80111ba:	465c      	mov	r4, fp
 80111bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111c0:	4642      	mov	r2, r8
 80111c2:	464b      	mov	r3, r9
 80111c4:	4620      	mov	r0, r4
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7ef f876 	bl	80002b8 <__aeabi_dsub>
 80111cc:	4602      	mov	r2, r0
 80111ce:	460b      	mov	r3, r1
 80111d0:	4630      	mov	r0, r6
 80111d2:	4639      	mov	r1, r7
 80111d4:	f7ef f870 	bl	80002b8 <__aeabi_dsub>
 80111d8:	a331      	add	r3, pc, #196	@ (adr r3, 80112a0 <__ieee754_pow+0x770>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	f7ef fa23 	bl	8000628 <__aeabi_dmul>
 80111e2:	a331      	add	r3, pc, #196	@ (adr r3, 80112a8 <__ieee754_pow+0x778>)
 80111e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e8:	4606      	mov	r6, r0
 80111ea:	460f      	mov	r7, r1
 80111ec:	4620      	mov	r0, r4
 80111ee:	4629      	mov	r1, r5
 80111f0:	f7ef fa1a 	bl	8000628 <__aeabi_dmul>
 80111f4:	4602      	mov	r2, r0
 80111f6:	460b      	mov	r3, r1
 80111f8:	4630      	mov	r0, r6
 80111fa:	4639      	mov	r1, r7
 80111fc:	f7ef f85e 	bl	80002bc <__adddf3>
 8011200:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011202:	4b32      	ldr	r3, [pc, #200]	@ (80112cc <__ieee754_pow+0x79c>)
 8011204:	4413      	add	r3, r2
 8011206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120a:	f7ef f857 	bl	80002bc <__adddf3>
 801120e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011212:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011214:	f7ef f99e 	bl	8000554 <__aeabi_i2d>
 8011218:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801121a:	4b2d      	ldr	r3, [pc, #180]	@ (80112d0 <__ieee754_pow+0x7a0>)
 801121c:	4413      	add	r3, r2
 801121e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011222:	4606      	mov	r6, r0
 8011224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011228:	460f      	mov	r7, r1
 801122a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801122e:	f7ef f845 	bl	80002bc <__adddf3>
 8011232:	4642      	mov	r2, r8
 8011234:	464b      	mov	r3, r9
 8011236:	f7ef f841 	bl	80002bc <__adddf3>
 801123a:	4632      	mov	r2, r6
 801123c:	463b      	mov	r3, r7
 801123e:	f7ef f83d 	bl	80002bc <__adddf3>
 8011242:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8011246:	4632      	mov	r2, r6
 8011248:	463b      	mov	r3, r7
 801124a:	4658      	mov	r0, fp
 801124c:	460d      	mov	r5, r1
 801124e:	f7ef f833 	bl	80002b8 <__aeabi_dsub>
 8011252:	4642      	mov	r2, r8
 8011254:	464b      	mov	r3, r9
 8011256:	f7ef f82f 	bl	80002b8 <__aeabi_dsub>
 801125a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801125e:	f7ef f82b 	bl	80002b8 <__aeabi_dsub>
 8011262:	465c      	mov	r4, fp
 8011264:	e036      	b.n	80112d4 <__ieee754_pow+0x7a4>
 8011266:	bf00      	nop
 8011268:	4a454eef 	.word	0x4a454eef
 801126c:	3fca7e28 	.word	0x3fca7e28
 8011270:	93c9db65 	.word	0x93c9db65
 8011274:	3fcd864a 	.word	0x3fcd864a
 8011278:	a91d4101 	.word	0xa91d4101
 801127c:	3fd17460 	.word	0x3fd17460
 8011280:	518f264d 	.word	0x518f264d
 8011284:	3fd55555 	.word	0x3fd55555
 8011288:	db6fabff 	.word	0xdb6fabff
 801128c:	3fdb6db6 	.word	0x3fdb6db6
 8011290:	33333303 	.word	0x33333303
 8011294:	3fe33333 	.word	0x3fe33333
 8011298:	e0000000 	.word	0xe0000000
 801129c:	3feec709 	.word	0x3feec709
 80112a0:	dc3a03fd 	.word	0xdc3a03fd
 80112a4:	3feec709 	.word	0x3feec709
 80112a8:	145b01f5 	.word	0x145b01f5
 80112ac:	be3e2fe0 	.word	0xbe3e2fe0
 80112b0:	7ff00000 	.word	0x7ff00000
 80112b4:	43400000 	.word	0x43400000
 80112b8:	0003988e 	.word	0x0003988e
 80112bc:	000bb679 	.word	0x000bb679
 80112c0:	08015440 	.word	0x08015440
 80112c4:	3ff00000 	.word	0x3ff00000
 80112c8:	40080000 	.word	0x40080000
 80112cc:	08015420 	.word	0x08015420
 80112d0:	08015430 	.word	0x08015430
 80112d4:	4602      	mov	r2, r0
 80112d6:	460b      	mov	r3, r1
 80112d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112dc:	e5d6      	b.n	8010e8c <__ieee754_pow+0x35c>
 80112de:	f04f 0a01 	mov.w	sl, #1
 80112e2:	e65e      	b.n	8010fa2 <__ieee754_pow+0x472>
 80112e4:	a3b5      	add	r3, pc, #724	@ (adr r3, 80115bc <__ieee754_pow+0xa8c>)
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	4630      	mov	r0, r6
 80112ec:	4639      	mov	r1, r7
 80112ee:	f7ee ffe5 	bl	80002bc <__adddf3>
 80112f2:	4642      	mov	r2, r8
 80112f4:	e9cd 0100 	strd	r0, r1, [sp]
 80112f8:	464b      	mov	r3, r9
 80112fa:	4620      	mov	r0, r4
 80112fc:	4629      	mov	r1, r5
 80112fe:	f7ee ffdb 	bl	80002b8 <__aeabi_dsub>
 8011302:	4602      	mov	r2, r0
 8011304:	460b      	mov	r3, r1
 8011306:	e9dd 0100 	ldrd	r0, r1, [sp]
 801130a:	f7ef fc1d 	bl	8000b48 <__aeabi_dcmpgt>
 801130e:	2800      	cmp	r0, #0
 8011310:	f47f adfe 	bne.w	8010f10 <__ieee754_pow+0x3e0>
 8011314:	4ba2      	ldr	r3, [pc, #648]	@ (80115a0 <__ieee754_pow+0xa70>)
 8011316:	e022      	b.n	801135e <__ieee754_pow+0x82e>
 8011318:	4ca2      	ldr	r4, [pc, #648]	@ (80115a4 <__ieee754_pow+0xa74>)
 801131a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801131e:	42a3      	cmp	r3, r4
 8011320:	d919      	bls.n	8011356 <__ieee754_pow+0x826>
 8011322:	4ba1      	ldr	r3, [pc, #644]	@ (80115a8 <__ieee754_pow+0xa78>)
 8011324:	440b      	add	r3, r1
 8011326:	4303      	orrs	r3, r0
 8011328:	d009      	beq.n	801133e <__ieee754_pow+0x80e>
 801132a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801132e:	2200      	movs	r2, #0
 8011330:	2300      	movs	r3, #0
 8011332:	f7ef fbeb 	bl	8000b0c <__aeabi_dcmplt>
 8011336:	3800      	subs	r0, #0
 8011338:	bf18      	it	ne
 801133a:	2001      	movne	r0, #1
 801133c:	e512      	b.n	8010d64 <__ieee754_pow+0x234>
 801133e:	4642      	mov	r2, r8
 8011340:	464b      	mov	r3, r9
 8011342:	f7ee ffb9 	bl	80002b8 <__aeabi_dsub>
 8011346:	4632      	mov	r2, r6
 8011348:	463b      	mov	r3, r7
 801134a:	f7ef fbf3 	bl	8000b34 <__aeabi_dcmpge>
 801134e:	2800      	cmp	r0, #0
 8011350:	d1eb      	bne.n	801132a <__ieee754_pow+0x7fa>
 8011352:	4b96      	ldr	r3, [pc, #600]	@ (80115ac <__ieee754_pow+0xa7c>)
 8011354:	e003      	b.n	801135e <__ieee754_pow+0x82e>
 8011356:	4a96      	ldr	r2, [pc, #600]	@ (80115b0 <__ieee754_pow+0xa80>)
 8011358:	4293      	cmp	r3, r2
 801135a:	f240 80e7 	bls.w	801152c <__ieee754_pow+0x9fc>
 801135e:	151b      	asrs	r3, r3, #20
 8011360:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8011364:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8011368:	fa4a fa03 	asr.w	sl, sl, r3
 801136c:	44da      	add	sl, fp
 801136e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011372:	4890      	ldr	r0, [pc, #576]	@ (80115b4 <__ieee754_pow+0xa84>)
 8011374:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011378:	4108      	asrs	r0, r1
 801137a:	ea00 030a 	and.w	r3, r0, sl
 801137e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011382:	f1c1 0114 	rsb	r1, r1, #20
 8011386:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801138a:	fa4a fa01 	asr.w	sl, sl, r1
 801138e:	f1bb 0f00 	cmp.w	fp, #0
 8011392:	4640      	mov	r0, r8
 8011394:	4649      	mov	r1, r9
 8011396:	f04f 0200 	mov.w	r2, #0
 801139a:	bfb8      	it	lt
 801139c:	f1ca 0a00 	rsblt	sl, sl, #0
 80113a0:	f7ee ff8a 	bl	80002b8 <__aeabi_dsub>
 80113a4:	4680      	mov	r8, r0
 80113a6:	4689      	mov	r9, r1
 80113a8:	4632      	mov	r2, r6
 80113aa:	463b      	mov	r3, r7
 80113ac:	4640      	mov	r0, r8
 80113ae:	4649      	mov	r1, r9
 80113b0:	f7ee ff84 	bl	80002bc <__adddf3>
 80113b4:	2400      	movs	r4, #0
 80113b6:	a36a      	add	r3, pc, #424	@ (adr r3, 8011560 <__ieee754_pow+0xa30>)
 80113b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113bc:	4620      	mov	r0, r4
 80113be:	460d      	mov	r5, r1
 80113c0:	f7ef f932 	bl	8000628 <__aeabi_dmul>
 80113c4:	4642      	mov	r2, r8
 80113c6:	e9cd 0100 	strd	r0, r1, [sp]
 80113ca:	464b      	mov	r3, r9
 80113cc:	4620      	mov	r0, r4
 80113ce:	4629      	mov	r1, r5
 80113d0:	f7ee ff72 	bl	80002b8 <__aeabi_dsub>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	4630      	mov	r0, r6
 80113da:	4639      	mov	r1, r7
 80113dc:	f7ee ff6c 	bl	80002b8 <__aeabi_dsub>
 80113e0:	a361      	add	r3, pc, #388	@ (adr r3, 8011568 <__ieee754_pow+0xa38>)
 80113e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e6:	f7ef f91f 	bl	8000628 <__aeabi_dmul>
 80113ea:	a361      	add	r3, pc, #388	@ (adr r3, 8011570 <__ieee754_pow+0xa40>)
 80113ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f0:	4680      	mov	r8, r0
 80113f2:	4689      	mov	r9, r1
 80113f4:	4620      	mov	r0, r4
 80113f6:	4629      	mov	r1, r5
 80113f8:	f7ef f916 	bl	8000628 <__aeabi_dmul>
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	4640      	mov	r0, r8
 8011402:	4649      	mov	r1, r9
 8011404:	f7ee ff5a 	bl	80002bc <__adddf3>
 8011408:	4604      	mov	r4, r0
 801140a:	460d      	mov	r5, r1
 801140c:	4602      	mov	r2, r0
 801140e:	460b      	mov	r3, r1
 8011410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011414:	f7ee ff52 	bl	80002bc <__adddf3>
 8011418:	e9dd 2300 	ldrd	r2, r3, [sp]
 801141c:	4680      	mov	r8, r0
 801141e:	4689      	mov	r9, r1
 8011420:	f7ee ff4a 	bl	80002b8 <__aeabi_dsub>
 8011424:	4602      	mov	r2, r0
 8011426:	460b      	mov	r3, r1
 8011428:	4620      	mov	r0, r4
 801142a:	4629      	mov	r1, r5
 801142c:	f7ee ff44 	bl	80002b8 <__aeabi_dsub>
 8011430:	4642      	mov	r2, r8
 8011432:	4606      	mov	r6, r0
 8011434:	460f      	mov	r7, r1
 8011436:	464b      	mov	r3, r9
 8011438:	4640      	mov	r0, r8
 801143a:	4649      	mov	r1, r9
 801143c:	f7ef f8f4 	bl	8000628 <__aeabi_dmul>
 8011440:	a34d      	add	r3, pc, #308	@ (adr r3, 8011578 <__ieee754_pow+0xa48>)
 8011442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011446:	4604      	mov	r4, r0
 8011448:	460d      	mov	r5, r1
 801144a:	f7ef f8ed 	bl	8000628 <__aeabi_dmul>
 801144e:	a34c      	add	r3, pc, #304	@ (adr r3, 8011580 <__ieee754_pow+0xa50>)
 8011450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011454:	f7ee ff30 	bl	80002b8 <__aeabi_dsub>
 8011458:	4622      	mov	r2, r4
 801145a:	462b      	mov	r3, r5
 801145c:	f7ef f8e4 	bl	8000628 <__aeabi_dmul>
 8011460:	a349      	add	r3, pc, #292	@ (adr r3, 8011588 <__ieee754_pow+0xa58>)
 8011462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011466:	f7ee ff29 	bl	80002bc <__adddf3>
 801146a:	4622      	mov	r2, r4
 801146c:	462b      	mov	r3, r5
 801146e:	f7ef f8db 	bl	8000628 <__aeabi_dmul>
 8011472:	a347      	add	r3, pc, #284	@ (adr r3, 8011590 <__ieee754_pow+0xa60>)
 8011474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011478:	f7ee ff1e 	bl	80002b8 <__aeabi_dsub>
 801147c:	4622      	mov	r2, r4
 801147e:	462b      	mov	r3, r5
 8011480:	f7ef f8d2 	bl	8000628 <__aeabi_dmul>
 8011484:	a344      	add	r3, pc, #272	@ (adr r3, 8011598 <__ieee754_pow+0xa68>)
 8011486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148a:	f7ee ff17 	bl	80002bc <__adddf3>
 801148e:	4622      	mov	r2, r4
 8011490:	462b      	mov	r3, r5
 8011492:	f7ef f8c9 	bl	8000628 <__aeabi_dmul>
 8011496:	4602      	mov	r2, r0
 8011498:	460b      	mov	r3, r1
 801149a:	4640      	mov	r0, r8
 801149c:	4649      	mov	r1, r9
 801149e:	f7ee ff0b 	bl	80002b8 <__aeabi_dsub>
 80114a2:	4604      	mov	r4, r0
 80114a4:	460d      	mov	r5, r1
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	4640      	mov	r0, r8
 80114ac:	4649      	mov	r1, r9
 80114ae:	f7ef f8bb 	bl	8000628 <__aeabi_dmul>
 80114b2:	2200      	movs	r2, #0
 80114b4:	e9cd 0100 	strd	r0, r1, [sp]
 80114b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80114bc:	4620      	mov	r0, r4
 80114be:	4629      	mov	r1, r5
 80114c0:	f7ee fefa 	bl	80002b8 <__aeabi_dsub>
 80114c4:	4602      	mov	r2, r0
 80114c6:	460b      	mov	r3, r1
 80114c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114cc:	f7ef f9d6 	bl	800087c <__aeabi_ddiv>
 80114d0:	4632      	mov	r2, r6
 80114d2:	4604      	mov	r4, r0
 80114d4:	460d      	mov	r5, r1
 80114d6:	463b      	mov	r3, r7
 80114d8:	4640      	mov	r0, r8
 80114da:	4649      	mov	r1, r9
 80114dc:	f7ef f8a4 	bl	8000628 <__aeabi_dmul>
 80114e0:	4632      	mov	r2, r6
 80114e2:	463b      	mov	r3, r7
 80114e4:	f7ee feea 	bl	80002bc <__adddf3>
 80114e8:	4602      	mov	r2, r0
 80114ea:	460b      	mov	r3, r1
 80114ec:	4620      	mov	r0, r4
 80114ee:	4629      	mov	r1, r5
 80114f0:	f7ee fee2 	bl	80002b8 <__aeabi_dsub>
 80114f4:	4642      	mov	r2, r8
 80114f6:	464b      	mov	r3, r9
 80114f8:	f7ee fede 	bl	80002b8 <__aeabi_dsub>
 80114fc:	460b      	mov	r3, r1
 80114fe:	4602      	mov	r2, r0
 8011500:	492d      	ldr	r1, [pc, #180]	@ (80115b8 <__ieee754_pow+0xa88>)
 8011502:	2000      	movs	r0, #0
 8011504:	f7ee fed8 	bl	80002b8 <__aeabi_dsub>
 8011508:	ec41 0b10 	vmov	d0, r0, r1
 801150c:	ee10 3a90 	vmov	r3, s1
 8011510:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011518:	da0b      	bge.n	8011532 <__ieee754_pow+0xa02>
 801151a:	4650      	mov	r0, sl
 801151c:	f000 f898 	bl	8011650 <scalbn>
 8011520:	ec51 0b10 	vmov	r0, r1, d0
 8011524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011528:	f7ff bb6d 	b.w	8010c06 <__ieee754_pow+0xd6>
 801152c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011530:	e73a      	b.n	80113a8 <__ieee754_pow+0x878>
 8011532:	ec51 0b10 	vmov	r0, r1, d0
 8011536:	4619      	mov	r1, r3
 8011538:	e7f4      	b.n	8011524 <__ieee754_pow+0x9f4>
 801153a:	491f      	ldr	r1, [pc, #124]	@ (80115b8 <__ieee754_pow+0xa88>)
 801153c:	2000      	movs	r0, #0
 801153e:	f7ff bb14 	b.w	8010b6a <__ieee754_pow+0x3a>
 8011542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011546:	f7ff bb10 	b.w	8010b6a <__ieee754_pow+0x3a>
 801154a:	4630      	mov	r0, r6
 801154c:	4639      	mov	r1, r7
 801154e:	f7ff bb0c 	b.w	8010b6a <__ieee754_pow+0x3a>
 8011552:	460c      	mov	r4, r1
 8011554:	f7ff bb69 	b.w	8010c2a <__ieee754_pow+0xfa>
 8011558:	2400      	movs	r4, #0
 801155a:	f7ff bb4b 	b.w	8010bf4 <__ieee754_pow+0xc4>
 801155e:	bf00      	nop
 8011560:	00000000 	.word	0x00000000
 8011564:	3fe62e43 	.word	0x3fe62e43
 8011568:	fefa39ef 	.word	0xfefa39ef
 801156c:	3fe62e42 	.word	0x3fe62e42
 8011570:	0ca86c39 	.word	0x0ca86c39
 8011574:	be205c61 	.word	0xbe205c61
 8011578:	72bea4d0 	.word	0x72bea4d0
 801157c:	3e663769 	.word	0x3e663769
 8011580:	c5d26bf1 	.word	0xc5d26bf1
 8011584:	3ebbbd41 	.word	0x3ebbbd41
 8011588:	af25de2c 	.word	0xaf25de2c
 801158c:	3f11566a 	.word	0x3f11566a
 8011590:	16bebd93 	.word	0x16bebd93
 8011594:	3f66c16c 	.word	0x3f66c16c
 8011598:	5555553e 	.word	0x5555553e
 801159c:	3fc55555 	.word	0x3fc55555
 80115a0:	40900000 	.word	0x40900000
 80115a4:	4090cbff 	.word	0x4090cbff
 80115a8:	3f6f3400 	.word	0x3f6f3400
 80115ac:	4090cc00 	.word	0x4090cc00
 80115b0:	3fe00000 	.word	0x3fe00000
 80115b4:	fff00000 	.word	0xfff00000
 80115b8:	3ff00000 	.word	0x3ff00000
 80115bc:	652b82fe 	.word	0x652b82fe
 80115c0:	3c971547 	.word	0x3c971547

080115c4 <with_errno>:
 80115c4:	b510      	push	{r4, lr}
 80115c6:	ed2d 8b02 	vpush	{d8}
 80115ca:	eeb0 8a40 	vmov.f32	s16, s0
 80115ce:	eef0 8a60 	vmov.f32	s17, s1
 80115d2:	4604      	mov	r4, r0
 80115d4:	f001 fa78 	bl	8012ac8 <__errno>
 80115d8:	eeb0 0a48 	vmov.f32	s0, s16
 80115dc:	eef0 0a68 	vmov.f32	s1, s17
 80115e0:	ecbd 8b02 	vpop	{d8}
 80115e4:	6004      	str	r4, [r0, #0]
 80115e6:	bd10      	pop	{r4, pc}

080115e8 <xflow>:
 80115e8:	4603      	mov	r3, r0
 80115ea:	b507      	push	{r0, r1, r2, lr}
 80115ec:	ec51 0b10 	vmov	r0, r1, d0
 80115f0:	b183      	cbz	r3, 8011614 <xflow+0x2c>
 80115f2:	4602      	mov	r2, r0
 80115f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80115f8:	e9cd 2300 	strd	r2, r3, [sp]
 80115fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011600:	f7ef f812 	bl	8000628 <__aeabi_dmul>
 8011604:	ec41 0b10 	vmov	d0, r0, r1
 8011608:	2022      	movs	r0, #34	@ 0x22
 801160a:	b003      	add	sp, #12
 801160c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011610:	f7ff bfd8 	b.w	80115c4 <with_errno>
 8011614:	4602      	mov	r2, r0
 8011616:	460b      	mov	r3, r1
 8011618:	e7ee      	b.n	80115f8 <xflow+0x10>
 801161a:	0000      	movs	r0, r0
 801161c:	0000      	movs	r0, r0
	...

08011620 <__math_uflow>:
 8011620:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011628 <__math_uflow+0x8>
 8011624:	f7ff bfe0 	b.w	80115e8 <xflow>
 8011628:	00000000 	.word	0x00000000
 801162c:	10000000 	.word	0x10000000

08011630 <__math_oflow>:
 8011630:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011638 <__math_oflow+0x8>
 8011634:	f7ff bfd8 	b.w	80115e8 <xflow>
 8011638:	00000000 	.word	0x00000000
 801163c:	70000000 	.word	0x70000000

08011640 <fabs>:
 8011640:	ec51 0b10 	vmov	r0, r1, d0
 8011644:	4602      	mov	r2, r0
 8011646:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801164a:	ec43 2b10 	vmov	d0, r2, r3
 801164e:	4770      	bx	lr

08011650 <scalbn>:
 8011650:	b570      	push	{r4, r5, r6, lr}
 8011652:	ec55 4b10 	vmov	r4, r5, d0
 8011656:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801165a:	4606      	mov	r6, r0
 801165c:	462b      	mov	r3, r5
 801165e:	b991      	cbnz	r1, 8011686 <scalbn+0x36>
 8011660:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011664:	4323      	orrs	r3, r4
 8011666:	d03b      	beq.n	80116e0 <scalbn+0x90>
 8011668:	4b33      	ldr	r3, [pc, #204]	@ (8011738 <scalbn+0xe8>)
 801166a:	4620      	mov	r0, r4
 801166c:	4629      	mov	r1, r5
 801166e:	2200      	movs	r2, #0
 8011670:	f7ee ffda 	bl	8000628 <__aeabi_dmul>
 8011674:	4b31      	ldr	r3, [pc, #196]	@ (801173c <scalbn+0xec>)
 8011676:	429e      	cmp	r6, r3
 8011678:	4604      	mov	r4, r0
 801167a:	460d      	mov	r5, r1
 801167c:	da0f      	bge.n	801169e <scalbn+0x4e>
 801167e:	a326      	add	r3, pc, #152	@ (adr r3, 8011718 <scalbn+0xc8>)
 8011680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011684:	e01e      	b.n	80116c4 <scalbn+0x74>
 8011686:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801168a:	4291      	cmp	r1, r2
 801168c:	d10b      	bne.n	80116a6 <scalbn+0x56>
 801168e:	4622      	mov	r2, r4
 8011690:	4620      	mov	r0, r4
 8011692:	4629      	mov	r1, r5
 8011694:	f7ee fe12 	bl	80002bc <__adddf3>
 8011698:	4604      	mov	r4, r0
 801169a:	460d      	mov	r5, r1
 801169c:	e020      	b.n	80116e0 <scalbn+0x90>
 801169e:	460b      	mov	r3, r1
 80116a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80116a4:	3936      	subs	r1, #54	@ 0x36
 80116a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80116aa:	4296      	cmp	r6, r2
 80116ac:	dd0d      	ble.n	80116ca <scalbn+0x7a>
 80116ae:	2d00      	cmp	r5, #0
 80116b0:	a11b      	add	r1, pc, #108	@ (adr r1, 8011720 <scalbn+0xd0>)
 80116b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116b6:	da02      	bge.n	80116be <scalbn+0x6e>
 80116b8:	a11b      	add	r1, pc, #108	@ (adr r1, 8011728 <scalbn+0xd8>)
 80116ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116be:	a318      	add	r3, pc, #96	@ (adr r3, 8011720 <scalbn+0xd0>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	f7ee ffb0 	bl	8000628 <__aeabi_dmul>
 80116c8:	e7e6      	b.n	8011698 <scalbn+0x48>
 80116ca:	1872      	adds	r2, r6, r1
 80116cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80116d0:	428a      	cmp	r2, r1
 80116d2:	dcec      	bgt.n	80116ae <scalbn+0x5e>
 80116d4:	2a00      	cmp	r2, #0
 80116d6:	dd06      	ble.n	80116e6 <scalbn+0x96>
 80116d8:	f36f 531e 	bfc	r3, #20, #11
 80116dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80116e0:	ec45 4b10 	vmov	d0, r4, r5
 80116e4:	bd70      	pop	{r4, r5, r6, pc}
 80116e6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80116ea:	da08      	bge.n	80116fe <scalbn+0xae>
 80116ec:	2d00      	cmp	r5, #0
 80116ee:	a10a      	add	r1, pc, #40	@ (adr r1, 8011718 <scalbn+0xc8>)
 80116f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116f4:	dac3      	bge.n	801167e <scalbn+0x2e>
 80116f6:	a10e      	add	r1, pc, #56	@ (adr r1, 8011730 <scalbn+0xe0>)
 80116f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116fc:	e7bf      	b.n	801167e <scalbn+0x2e>
 80116fe:	3236      	adds	r2, #54	@ 0x36
 8011700:	f36f 531e 	bfc	r3, #20, #11
 8011704:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011708:	4620      	mov	r0, r4
 801170a:	4b0d      	ldr	r3, [pc, #52]	@ (8011740 <scalbn+0xf0>)
 801170c:	4629      	mov	r1, r5
 801170e:	2200      	movs	r2, #0
 8011710:	e7d8      	b.n	80116c4 <scalbn+0x74>
 8011712:	bf00      	nop
 8011714:	f3af 8000 	nop.w
 8011718:	c2f8f359 	.word	0xc2f8f359
 801171c:	01a56e1f 	.word	0x01a56e1f
 8011720:	8800759c 	.word	0x8800759c
 8011724:	7e37e43c 	.word	0x7e37e43c
 8011728:	8800759c 	.word	0x8800759c
 801172c:	fe37e43c 	.word	0xfe37e43c
 8011730:	c2f8f359 	.word	0xc2f8f359
 8011734:	81a56e1f 	.word	0x81a56e1f
 8011738:	43500000 	.word	0x43500000
 801173c:	ffff3cb0 	.word	0xffff3cb0
 8011740:	3c900000 	.word	0x3c900000

08011744 <__ieee754_sqrt>:
 8011744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011748:	4a66      	ldr	r2, [pc, #408]	@ (80118e4 <__ieee754_sqrt+0x1a0>)
 801174a:	ec55 4b10 	vmov	r4, r5, d0
 801174e:	43aa      	bics	r2, r5
 8011750:	462b      	mov	r3, r5
 8011752:	4621      	mov	r1, r4
 8011754:	d110      	bne.n	8011778 <__ieee754_sqrt+0x34>
 8011756:	4622      	mov	r2, r4
 8011758:	4620      	mov	r0, r4
 801175a:	4629      	mov	r1, r5
 801175c:	f7ee ff64 	bl	8000628 <__aeabi_dmul>
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	4620      	mov	r0, r4
 8011766:	4629      	mov	r1, r5
 8011768:	f7ee fda8 	bl	80002bc <__adddf3>
 801176c:	4604      	mov	r4, r0
 801176e:	460d      	mov	r5, r1
 8011770:	ec45 4b10 	vmov	d0, r4, r5
 8011774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011778:	2d00      	cmp	r5, #0
 801177a:	dc0e      	bgt.n	801179a <__ieee754_sqrt+0x56>
 801177c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011780:	4322      	orrs	r2, r4
 8011782:	d0f5      	beq.n	8011770 <__ieee754_sqrt+0x2c>
 8011784:	b19d      	cbz	r5, 80117ae <__ieee754_sqrt+0x6a>
 8011786:	4622      	mov	r2, r4
 8011788:	4620      	mov	r0, r4
 801178a:	4629      	mov	r1, r5
 801178c:	f7ee fd94 	bl	80002b8 <__aeabi_dsub>
 8011790:	4602      	mov	r2, r0
 8011792:	460b      	mov	r3, r1
 8011794:	f7ef f872 	bl	800087c <__aeabi_ddiv>
 8011798:	e7e8      	b.n	801176c <__ieee754_sqrt+0x28>
 801179a:	152a      	asrs	r2, r5, #20
 801179c:	d115      	bne.n	80117ca <__ieee754_sqrt+0x86>
 801179e:	2000      	movs	r0, #0
 80117a0:	e009      	b.n	80117b6 <__ieee754_sqrt+0x72>
 80117a2:	0acb      	lsrs	r3, r1, #11
 80117a4:	3a15      	subs	r2, #21
 80117a6:	0549      	lsls	r1, r1, #21
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d0fa      	beq.n	80117a2 <__ieee754_sqrt+0x5e>
 80117ac:	e7f7      	b.n	801179e <__ieee754_sqrt+0x5a>
 80117ae:	462a      	mov	r2, r5
 80117b0:	e7fa      	b.n	80117a8 <__ieee754_sqrt+0x64>
 80117b2:	005b      	lsls	r3, r3, #1
 80117b4:	3001      	adds	r0, #1
 80117b6:	02dc      	lsls	r4, r3, #11
 80117b8:	d5fb      	bpl.n	80117b2 <__ieee754_sqrt+0x6e>
 80117ba:	1e44      	subs	r4, r0, #1
 80117bc:	1b12      	subs	r2, r2, r4
 80117be:	f1c0 0420 	rsb	r4, r0, #32
 80117c2:	fa21 f404 	lsr.w	r4, r1, r4
 80117c6:	4323      	orrs	r3, r4
 80117c8:	4081      	lsls	r1, r0
 80117ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117ce:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80117d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80117d6:	07d2      	lsls	r2, r2, #31
 80117d8:	bf5c      	itt	pl
 80117da:	005b      	lslpl	r3, r3, #1
 80117dc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80117e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80117e4:	bf58      	it	pl
 80117e6:	0049      	lslpl	r1, r1, #1
 80117e8:	2600      	movs	r6, #0
 80117ea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80117ee:	107f      	asrs	r7, r7, #1
 80117f0:	0049      	lsls	r1, r1, #1
 80117f2:	2016      	movs	r0, #22
 80117f4:	4632      	mov	r2, r6
 80117f6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80117fa:	1915      	adds	r5, r2, r4
 80117fc:	429d      	cmp	r5, r3
 80117fe:	bfde      	ittt	le
 8011800:	192a      	addle	r2, r5, r4
 8011802:	1b5b      	suble	r3, r3, r5
 8011804:	1936      	addle	r6, r6, r4
 8011806:	0fcd      	lsrs	r5, r1, #31
 8011808:	3801      	subs	r0, #1
 801180a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801180e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011812:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011816:	d1f0      	bne.n	80117fa <__ieee754_sqrt+0xb6>
 8011818:	4605      	mov	r5, r0
 801181a:	2420      	movs	r4, #32
 801181c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011820:	4293      	cmp	r3, r2
 8011822:	eb0c 0e00 	add.w	lr, ip, r0
 8011826:	dc02      	bgt.n	801182e <__ieee754_sqrt+0xea>
 8011828:	d113      	bne.n	8011852 <__ieee754_sqrt+0x10e>
 801182a:	458e      	cmp	lr, r1
 801182c:	d811      	bhi.n	8011852 <__ieee754_sqrt+0x10e>
 801182e:	f1be 0f00 	cmp.w	lr, #0
 8011832:	eb0e 000c 	add.w	r0, lr, ip
 8011836:	da3f      	bge.n	80118b8 <__ieee754_sqrt+0x174>
 8011838:	2800      	cmp	r0, #0
 801183a:	db3d      	blt.n	80118b8 <__ieee754_sqrt+0x174>
 801183c:	f102 0801 	add.w	r8, r2, #1
 8011840:	1a9b      	subs	r3, r3, r2
 8011842:	458e      	cmp	lr, r1
 8011844:	bf88      	it	hi
 8011846:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801184a:	eba1 010e 	sub.w	r1, r1, lr
 801184e:	4465      	add	r5, ip
 8011850:	4642      	mov	r2, r8
 8011852:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011856:	3c01      	subs	r4, #1
 8011858:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801185c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011860:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011864:	d1dc      	bne.n	8011820 <__ieee754_sqrt+0xdc>
 8011866:	4319      	orrs	r1, r3
 8011868:	d01b      	beq.n	80118a2 <__ieee754_sqrt+0x15e>
 801186a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80118e8 <__ieee754_sqrt+0x1a4>
 801186e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80118ec <__ieee754_sqrt+0x1a8>
 8011872:	e9da 0100 	ldrd	r0, r1, [sl]
 8011876:	e9db 2300 	ldrd	r2, r3, [fp]
 801187a:	f7ee fd1d 	bl	80002b8 <__aeabi_dsub>
 801187e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011882:	4602      	mov	r2, r0
 8011884:	460b      	mov	r3, r1
 8011886:	4640      	mov	r0, r8
 8011888:	4649      	mov	r1, r9
 801188a:	f7ef f949 	bl	8000b20 <__aeabi_dcmple>
 801188e:	b140      	cbz	r0, 80118a2 <__ieee754_sqrt+0x15e>
 8011890:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8011894:	e9da 0100 	ldrd	r0, r1, [sl]
 8011898:	e9db 2300 	ldrd	r2, r3, [fp]
 801189c:	d10e      	bne.n	80118bc <__ieee754_sqrt+0x178>
 801189e:	3601      	adds	r6, #1
 80118a0:	4625      	mov	r5, r4
 80118a2:	1073      	asrs	r3, r6, #1
 80118a4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80118a8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80118ac:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80118b0:	086b      	lsrs	r3, r5, #1
 80118b2:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80118b6:	e759      	b.n	801176c <__ieee754_sqrt+0x28>
 80118b8:	4690      	mov	r8, r2
 80118ba:	e7c1      	b.n	8011840 <__ieee754_sqrt+0xfc>
 80118bc:	f7ee fcfe 	bl	80002bc <__adddf3>
 80118c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	4640      	mov	r0, r8
 80118ca:	4649      	mov	r1, r9
 80118cc:	f7ef f91e 	bl	8000b0c <__aeabi_dcmplt>
 80118d0:	b120      	cbz	r0, 80118dc <__ieee754_sqrt+0x198>
 80118d2:	1cab      	adds	r3, r5, #2
 80118d4:	bf08      	it	eq
 80118d6:	3601      	addeq	r6, #1
 80118d8:	3502      	adds	r5, #2
 80118da:	e7e2      	b.n	80118a2 <__ieee754_sqrt+0x15e>
 80118dc:	1c6b      	adds	r3, r5, #1
 80118de:	f023 0501 	bic.w	r5, r3, #1
 80118e2:	e7de      	b.n	80118a2 <__ieee754_sqrt+0x15e>
 80118e4:	7ff00000 	.word	0x7ff00000
 80118e8:	08015458 	.word	0x08015458
 80118ec:	08015450 	.word	0x08015450

080118f0 <abort>:
 80118f0:	b508      	push	{r3, lr}
 80118f2:	2006      	movs	r0, #6
 80118f4:	f001 f8bc 	bl	8012a70 <raise>
 80118f8:	2001      	movs	r0, #1
 80118fa:	f7f2 f9f1 	bl	8003ce0 <_exit>
	...

08011900 <malloc>:
 8011900:	4b02      	ldr	r3, [pc, #8]	@ (801190c <malloc+0xc>)
 8011902:	4601      	mov	r1, r0
 8011904:	6818      	ldr	r0, [r3, #0]
 8011906:	f000 b825 	b.w	8011954 <_malloc_r>
 801190a:	bf00      	nop
 801190c:	20000278 	.word	0x20000278

08011910 <sbrk_aligned>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	4e0f      	ldr	r6, [pc, #60]	@ (8011950 <sbrk_aligned+0x40>)
 8011914:	460c      	mov	r4, r1
 8011916:	6831      	ldr	r1, [r6, #0]
 8011918:	4605      	mov	r5, r0
 801191a:	b911      	cbnz	r1, 8011922 <sbrk_aligned+0x12>
 801191c:	f001 f8c4 	bl	8012aa8 <_sbrk_r>
 8011920:	6030      	str	r0, [r6, #0]
 8011922:	4621      	mov	r1, r4
 8011924:	4628      	mov	r0, r5
 8011926:	f001 f8bf 	bl	8012aa8 <_sbrk_r>
 801192a:	1c43      	adds	r3, r0, #1
 801192c:	d103      	bne.n	8011936 <sbrk_aligned+0x26>
 801192e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011932:	4620      	mov	r0, r4
 8011934:	bd70      	pop	{r4, r5, r6, pc}
 8011936:	1cc4      	adds	r4, r0, #3
 8011938:	f024 0403 	bic.w	r4, r4, #3
 801193c:	42a0      	cmp	r0, r4
 801193e:	d0f8      	beq.n	8011932 <sbrk_aligned+0x22>
 8011940:	1a21      	subs	r1, r4, r0
 8011942:	4628      	mov	r0, r5
 8011944:	f001 f8b0 	bl	8012aa8 <_sbrk_r>
 8011948:	3001      	adds	r0, #1
 801194a:	d1f2      	bne.n	8011932 <sbrk_aligned+0x22>
 801194c:	e7ef      	b.n	801192e <sbrk_aligned+0x1e>
 801194e:	bf00      	nop
 8011950:	20006c1c 	.word	0x20006c1c

08011954 <_malloc_r>:
 8011954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011958:	1ccd      	adds	r5, r1, #3
 801195a:	f025 0503 	bic.w	r5, r5, #3
 801195e:	3508      	adds	r5, #8
 8011960:	2d0c      	cmp	r5, #12
 8011962:	bf38      	it	cc
 8011964:	250c      	movcc	r5, #12
 8011966:	2d00      	cmp	r5, #0
 8011968:	4606      	mov	r6, r0
 801196a:	db01      	blt.n	8011970 <_malloc_r+0x1c>
 801196c:	42a9      	cmp	r1, r5
 801196e:	d904      	bls.n	801197a <_malloc_r+0x26>
 8011970:	230c      	movs	r3, #12
 8011972:	6033      	str	r3, [r6, #0]
 8011974:	2000      	movs	r0, #0
 8011976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801197a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a50 <_malloc_r+0xfc>
 801197e:	f000 f869 	bl	8011a54 <__malloc_lock>
 8011982:	f8d8 3000 	ldr.w	r3, [r8]
 8011986:	461c      	mov	r4, r3
 8011988:	bb44      	cbnz	r4, 80119dc <_malloc_r+0x88>
 801198a:	4629      	mov	r1, r5
 801198c:	4630      	mov	r0, r6
 801198e:	f7ff ffbf 	bl	8011910 <sbrk_aligned>
 8011992:	1c43      	adds	r3, r0, #1
 8011994:	4604      	mov	r4, r0
 8011996:	d158      	bne.n	8011a4a <_malloc_r+0xf6>
 8011998:	f8d8 4000 	ldr.w	r4, [r8]
 801199c:	4627      	mov	r7, r4
 801199e:	2f00      	cmp	r7, #0
 80119a0:	d143      	bne.n	8011a2a <_malloc_r+0xd6>
 80119a2:	2c00      	cmp	r4, #0
 80119a4:	d04b      	beq.n	8011a3e <_malloc_r+0xea>
 80119a6:	6823      	ldr	r3, [r4, #0]
 80119a8:	4639      	mov	r1, r7
 80119aa:	4630      	mov	r0, r6
 80119ac:	eb04 0903 	add.w	r9, r4, r3
 80119b0:	f001 f87a 	bl	8012aa8 <_sbrk_r>
 80119b4:	4581      	cmp	r9, r0
 80119b6:	d142      	bne.n	8011a3e <_malloc_r+0xea>
 80119b8:	6821      	ldr	r1, [r4, #0]
 80119ba:	1a6d      	subs	r5, r5, r1
 80119bc:	4629      	mov	r1, r5
 80119be:	4630      	mov	r0, r6
 80119c0:	f7ff ffa6 	bl	8011910 <sbrk_aligned>
 80119c4:	3001      	adds	r0, #1
 80119c6:	d03a      	beq.n	8011a3e <_malloc_r+0xea>
 80119c8:	6823      	ldr	r3, [r4, #0]
 80119ca:	442b      	add	r3, r5
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	f8d8 3000 	ldr.w	r3, [r8]
 80119d2:	685a      	ldr	r2, [r3, #4]
 80119d4:	bb62      	cbnz	r2, 8011a30 <_malloc_r+0xdc>
 80119d6:	f8c8 7000 	str.w	r7, [r8]
 80119da:	e00f      	b.n	80119fc <_malloc_r+0xa8>
 80119dc:	6822      	ldr	r2, [r4, #0]
 80119de:	1b52      	subs	r2, r2, r5
 80119e0:	d420      	bmi.n	8011a24 <_malloc_r+0xd0>
 80119e2:	2a0b      	cmp	r2, #11
 80119e4:	d917      	bls.n	8011a16 <_malloc_r+0xc2>
 80119e6:	1961      	adds	r1, r4, r5
 80119e8:	42a3      	cmp	r3, r4
 80119ea:	6025      	str	r5, [r4, #0]
 80119ec:	bf18      	it	ne
 80119ee:	6059      	strne	r1, [r3, #4]
 80119f0:	6863      	ldr	r3, [r4, #4]
 80119f2:	bf08      	it	eq
 80119f4:	f8c8 1000 	streq.w	r1, [r8]
 80119f8:	5162      	str	r2, [r4, r5]
 80119fa:	604b      	str	r3, [r1, #4]
 80119fc:	4630      	mov	r0, r6
 80119fe:	f000 f82f 	bl	8011a60 <__malloc_unlock>
 8011a02:	f104 000b 	add.w	r0, r4, #11
 8011a06:	1d23      	adds	r3, r4, #4
 8011a08:	f020 0007 	bic.w	r0, r0, #7
 8011a0c:	1ac2      	subs	r2, r0, r3
 8011a0e:	bf1c      	itt	ne
 8011a10:	1a1b      	subne	r3, r3, r0
 8011a12:	50a3      	strne	r3, [r4, r2]
 8011a14:	e7af      	b.n	8011976 <_malloc_r+0x22>
 8011a16:	6862      	ldr	r2, [r4, #4]
 8011a18:	42a3      	cmp	r3, r4
 8011a1a:	bf0c      	ite	eq
 8011a1c:	f8c8 2000 	streq.w	r2, [r8]
 8011a20:	605a      	strne	r2, [r3, #4]
 8011a22:	e7eb      	b.n	80119fc <_malloc_r+0xa8>
 8011a24:	4623      	mov	r3, r4
 8011a26:	6864      	ldr	r4, [r4, #4]
 8011a28:	e7ae      	b.n	8011988 <_malloc_r+0x34>
 8011a2a:	463c      	mov	r4, r7
 8011a2c:	687f      	ldr	r7, [r7, #4]
 8011a2e:	e7b6      	b.n	801199e <_malloc_r+0x4a>
 8011a30:	461a      	mov	r2, r3
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	42a3      	cmp	r3, r4
 8011a36:	d1fb      	bne.n	8011a30 <_malloc_r+0xdc>
 8011a38:	2300      	movs	r3, #0
 8011a3a:	6053      	str	r3, [r2, #4]
 8011a3c:	e7de      	b.n	80119fc <_malloc_r+0xa8>
 8011a3e:	230c      	movs	r3, #12
 8011a40:	6033      	str	r3, [r6, #0]
 8011a42:	4630      	mov	r0, r6
 8011a44:	f000 f80c 	bl	8011a60 <__malloc_unlock>
 8011a48:	e794      	b.n	8011974 <_malloc_r+0x20>
 8011a4a:	6005      	str	r5, [r0, #0]
 8011a4c:	e7d6      	b.n	80119fc <_malloc_r+0xa8>
 8011a4e:	bf00      	nop
 8011a50:	20006c20 	.word	0x20006c20

08011a54 <__malloc_lock>:
 8011a54:	4801      	ldr	r0, [pc, #4]	@ (8011a5c <__malloc_lock+0x8>)
 8011a56:	f7f2 bc39 	b.w	80042cc <__retarget_lock_acquire_recursive>
 8011a5a:	bf00      	nop
 8011a5c:	2000063c 	.word	0x2000063c

08011a60 <__malloc_unlock>:
 8011a60:	4801      	ldr	r0, [pc, #4]	@ (8011a68 <__malloc_unlock+0x8>)
 8011a62:	f7f2 bc48 	b.w	80042f6 <__retarget_lock_release_recursive>
 8011a66:	bf00      	nop
 8011a68:	2000063c 	.word	0x2000063c

08011a6c <std>:
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	4604      	mov	r4, r0
 8011a72:	e9c0 3300 	strd	r3, r3, [r0]
 8011a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a7a:	6083      	str	r3, [r0, #8]
 8011a7c:	8181      	strh	r1, [r0, #12]
 8011a7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a80:	81c2      	strh	r2, [r0, #14]
 8011a82:	6183      	str	r3, [r0, #24]
 8011a84:	4619      	mov	r1, r3
 8011a86:	2208      	movs	r2, #8
 8011a88:	305c      	adds	r0, #92	@ 0x5c
 8011a8a:	f000 ff53 	bl	8012934 <memset>
 8011a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8011ac4 <std+0x58>)
 8011a90:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a92:	4b0d      	ldr	r3, [pc, #52]	@ (8011ac8 <std+0x5c>)
 8011a94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a96:	4b0d      	ldr	r3, [pc, #52]	@ (8011acc <std+0x60>)
 8011a98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ad0 <std+0x64>)
 8011a9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8011ad4 <std+0x68>)
 8011aa0:	6224      	str	r4, [r4, #32]
 8011aa2:	429c      	cmp	r4, r3
 8011aa4:	d006      	beq.n	8011ab4 <std+0x48>
 8011aa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011aaa:	4294      	cmp	r4, r2
 8011aac:	d002      	beq.n	8011ab4 <std+0x48>
 8011aae:	33d0      	adds	r3, #208	@ 0xd0
 8011ab0:	429c      	cmp	r4, r3
 8011ab2:	d105      	bne.n	8011ac0 <std+0x54>
 8011ab4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011abc:	f7f2 bbdf 	b.w	800427e <__retarget_lock_init_recursive>
 8011ac0:	bd10      	pop	{r4, pc}
 8011ac2:	bf00      	nop
 8011ac4:	080143fd 	.word	0x080143fd
 8011ac8:	0801441f 	.word	0x0801441f
 8011acc:	08014457 	.word	0x08014457
 8011ad0:	0801447b 	.word	0x0801447b
 8011ad4:	20006c24 	.word	0x20006c24

08011ad8 <stdio_exit_handler>:
 8011ad8:	4a02      	ldr	r2, [pc, #8]	@ (8011ae4 <stdio_exit_handler+0xc>)
 8011ada:	4903      	ldr	r1, [pc, #12]	@ (8011ae8 <stdio_exit_handler+0x10>)
 8011adc:	4803      	ldr	r0, [pc, #12]	@ (8011aec <stdio_exit_handler+0x14>)
 8011ade:	f000 bf0b 	b.w	80128f8 <_fwalk_sglue>
 8011ae2:	bf00      	nop
 8011ae4:	20000100 	.word	0x20000100
 8011ae8:	08013a59 	.word	0x08013a59
 8011aec:	2000027c 	.word	0x2000027c

08011af0 <cleanup_stdio>:
 8011af0:	6841      	ldr	r1, [r0, #4]
 8011af2:	4b0c      	ldr	r3, [pc, #48]	@ (8011b24 <cleanup_stdio+0x34>)
 8011af4:	4299      	cmp	r1, r3
 8011af6:	b510      	push	{r4, lr}
 8011af8:	4604      	mov	r4, r0
 8011afa:	d001      	beq.n	8011b00 <cleanup_stdio+0x10>
 8011afc:	f001 ffac 	bl	8013a58 <_fflush_r>
 8011b00:	68a1      	ldr	r1, [r4, #8]
 8011b02:	4b09      	ldr	r3, [pc, #36]	@ (8011b28 <cleanup_stdio+0x38>)
 8011b04:	4299      	cmp	r1, r3
 8011b06:	d002      	beq.n	8011b0e <cleanup_stdio+0x1e>
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f001 ffa5 	bl	8013a58 <_fflush_r>
 8011b0e:	68e1      	ldr	r1, [r4, #12]
 8011b10:	4b06      	ldr	r3, [pc, #24]	@ (8011b2c <cleanup_stdio+0x3c>)
 8011b12:	4299      	cmp	r1, r3
 8011b14:	d004      	beq.n	8011b20 <cleanup_stdio+0x30>
 8011b16:	4620      	mov	r0, r4
 8011b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b1c:	f001 bf9c 	b.w	8013a58 <_fflush_r>
 8011b20:	bd10      	pop	{r4, pc}
 8011b22:	bf00      	nop
 8011b24:	20006c24 	.word	0x20006c24
 8011b28:	20006c8c 	.word	0x20006c8c
 8011b2c:	20006cf4 	.word	0x20006cf4

08011b30 <global_stdio_init.part.0>:
 8011b30:	b510      	push	{r4, lr}
 8011b32:	4b0b      	ldr	r3, [pc, #44]	@ (8011b60 <global_stdio_init.part.0+0x30>)
 8011b34:	4c0b      	ldr	r4, [pc, #44]	@ (8011b64 <global_stdio_init.part.0+0x34>)
 8011b36:	4a0c      	ldr	r2, [pc, #48]	@ (8011b68 <global_stdio_init.part.0+0x38>)
 8011b38:	601a      	str	r2, [r3, #0]
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	2104      	movs	r1, #4
 8011b40:	f7ff ff94 	bl	8011a6c <std>
 8011b44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b48:	2201      	movs	r2, #1
 8011b4a:	2109      	movs	r1, #9
 8011b4c:	f7ff ff8e 	bl	8011a6c <std>
 8011b50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b54:	2202      	movs	r2, #2
 8011b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b5a:	2112      	movs	r1, #18
 8011b5c:	f7ff bf86 	b.w	8011a6c <std>
 8011b60:	20006d5c 	.word	0x20006d5c
 8011b64:	20006c24 	.word	0x20006c24
 8011b68:	08011ad9 	.word	0x08011ad9

08011b6c <__sfp_lock_acquire>:
 8011b6c:	4801      	ldr	r0, [pc, #4]	@ (8011b74 <__sfp_lock_acquire+0x8>)
 8011b6e:	f7f2 bbad 	b.w	80042cc <__retarget_lock_acquire_recursive>
 8011b72:	bf00      	nop
 8011b74:	20000630 	.word	0x20000630

08011b78 <__sfp_lock_release>:
 8011b78:	4801      	ldr	r0, [pc, #4]	@ (8011b80 <__sfp_lock_release+0x8>)
 8011b7a:	f7f2 bbbc 	b.w	80042f6 <__retarget_lock_release_recursive>
 8011b7e:	bf00      	nop
 8011b80:	20000630 	.word	0x20000630

08011b84 <__sinit>:
 8011b84:	b510      	push	{r4, lr}
 8011b86:	4604      	mov	r4, r0
 8011b88:	f7ff fff0 	bl	8011b6c <__sfp_lock_acquire>
 8011b8c:	6a23      	ldr	r3, [r4, #32]
 8011b8e:	b11b      	cbz	r3, 8011b98 <__sinit+0x14>
 8011b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b94:	f7ff bff0 	b.w	8011b78 <__sfp_lock_release>
 8011b98:	4b04      	ldr	r3, [pc, #16]	@ (8011bac <__sinit+0x28>)
 8011b9a:	6223      	str	r3, [r4, #32]
 8011b9c:	4b04      	ldr	r3, [pc, #16]	@ (8011bb0 <__sinit+0x2c>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d1f5      	bne.n	8011b90 <__sinit+0xc>
 8011ba4:	f7ff ffc4 	bl	8011b30 <global_stdio_init.part.0>
 8011ba8:	e7f2      	b.n	8011b90 <__sinit+0xc>
 8011baa:	bf00      	nop
 8011bac:	08011af1 	.word	0x08011af1
 8011bb0:	20006d5c 	.word	0x20006d5c

08011bb4 <_vsniprintf_r>:
 8011bb4:	b530      	push	{r4, r5, lr}
 8011bb6:	4614      	mov	r4, r2
 8011bb8:	2c00      	cmp	r4, #0
 8011bba:	b09b      	sub	sp, #108	@ 0x6c
 8011bbc:	4605      	mov	r5, r0
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	da05      	bge.n	8011bce <_vsniprintf_r+0x1a>
 8011bc2:	238b      	movs	r3, #139	@ 0x8b
 8011bc4:	6003      	str	r3, [r0, #0]
 8011bc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011bca:	b01b      	add	sp, #108	@ 0x6c
 8011bcc:	bd30      	pop	{r4, r5, pc}
 8011bce:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011bd2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011bd6:	f04f 0300 	mov.w	r3, #0
 8011bda:	9319      	str	r3, [sp, #100]	@ 0x64
 8011bdc:	bf14      	ite	ne
 8011bde:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8011be2:	4623      	moveq	r3, r4
 8011be4:	9302      	str	r3, [sp, #8]
 8011be6:	9305      	str	r3, [sp, #20]
 8011be8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011bec:	9100      	str	r1, [sp, #0]
 8011bee:	9104      	str	r1, [sp, #16]
 8011bf0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011bf4:	4669      	mov	r1, sp
 8011bf6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011bf8:	f001 fc10 	bl	801341c <_svfiprintf_r>
 8011bfc:	1c43      	adds	r3, r0, #1
 8011bfe:	bfbc      	itt	lt
 8011c00:	238b      	movlt	r3, #139	@ 0x8b
 8011c02:	602b      	strlt	r3, [r5, #0]
 8011c04:	2c00      	cmp	r4, #0
 8011c06:	d0e0      	beq.n	8011bca <_vsniprintf_r+0x16>
 8011c08:	9b00      	ldr	r3, [sp, #0]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	701a      	strb	r2, [r3, #0]
 8011c0e:	e7dc      	b.n	8011bca <_vsniprintf_r+0x16>

08011c10 <vsniprintf>:
 8011c10:	b507      	push	{r0, r1, r2, lr}
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	4613      	mov	r3, r2
 8011c16:	460a      	mov	r2, r1
 8011c18:	4601      	mov	r1, r0
 8011c1a:	4803      	ldr	r0, [pc, #12]	@ (8011c28 <vsniprintf+0x18>)
 8011c1c:	6800      	ldr	r0, [r0, #0]
 8011c1e:	f7ff ffc9 	bl	8011bb4 <_vsniprintf_r>
 8011c22:	b003      	add	sp, #12
 8011c24:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c28:	20000278 	.word	0x20000278

08011c2c <sulp>:
 8011c2c:	b570      	push	{r4, r5, r6, lr}
 8011c2e:	4604      	mov	r4, r0
 8011c30:	460d      	mov	r5, r1
 8011c32:	ec45 4b10 	vmov	d0, r4, r5
 8011c36:	4616      	mov	r6, r2
 8011c38:	f002 faa2 	bl	8014180 <__ulp>
 8011c3c:	ec51 0b10 	vmov	r0, r1, d0
 8011c40:	b17e      	cbz	r6, 8011c62 <sulp+0x36>
 8011c42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011c46:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	dd09      	ble.n	8011c62 <sulp+0x36>
 8011c4e:	051b      	lsls	r3, r3, #20
 8011c50:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011c54:	2400      	movs	r4, #0
 8011c56:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011c5a:	4622      	mov	r2, r4
 8011c5c:	462b      	mov	r3, r5
 8011c5e:	f7ee fce3 	bl	8000628 <__aeabi_dmul>
 8011c62:	ec41 0b10 	vmov	d0, r0, r1
 8011c66:	bd70      	pop	{r4, r5, r6, pc}

08011c68 <_strtod_l>:
 8011c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6c:	b09f      	sub	sp, #124	@ 0x7c
 8011c6e:	460c      	mov	r4, r1
 8011c70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011c72:	2200      	movs	r2, #0
 8011c74:	921a      	str	r2, [sp, #104]	@ 0x68
 8011c76:	9005      	str	r0, [sp, #20]
 8011c78:	f04f 0a00 	mov.w	sl, #0
 8011c7c:	f04f 0b00 	mov.w	fp, #0
 8011c80:	460a      	mov	r2, r1
 8011c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c84:	7811      	ldrb	r1, [r2, #0]
 8011c86:	292b      	cmp	r1, #43	@ 0x2b
 8011c88:	d04a      	beq.n	8011d20 <_strtod_l+0xb8>
 8011c8a:	d838      	bhi.n	8011cfe <_strtod_l+0x96>
 8011c8c:	290d      	cmp	r1, #13
 8011c8e:	d832      	bhi.n	8011cf6 <_strtod_l+0x8e>
 8011c90:	2908      	cmp	r1, #8
 8011c92:	d832      	bhi.n	8011cfa <_strtod_l+0x92>
 8011c94:	2900      	cmp	r1, #0
 8011c96:	d03b      	beq.n	8011d10 <_strtod_l+0xa8>
 8011c98:	2200      	movs	r2, #0
 8011c9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011c9e:	782a      	ldrb	r2, [r5, #0]
 8011ca0:	2a30      	cmp	r2, #48	@ 0x30
 8011ca2:	f040 80b2 	bne.w	8011e0a <_strtod_l+0x1a2>
 8011ca6:	786a      	ldrb	r2, [r5, #1]
 8011ca8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011cac:	2a58      	cmp	r2, #88	@ 0x58
 8011cae:	d16e      	bne.n	8011d8e <_strtod_l+0x126>
 8011cb0:	9302      	str	r3, [sp, #8]
 8011cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cb4:	9301      	str	r3, [sp, #4]
 8011cb6:	ab1a      	add	r3, sp, #104	@ 0x68
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	4a8f      	ldr	r2, [pc, #572]	@ (8011ef8 <_strtod_l+0x290>)
 8011cbc:	9805      	ldr	r0, [sp, #20]
 8011cbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011cc0:	a919      	add	r1, sp, #100	@ 0x64
 8011cc2:	f001 f87f 	bl	8012dc4 <__gethex>
 8011cc6:	f010 060f 	ands.w	r6, r0, #15
 8011cca:	4604      	mov	r4, r0
 8011ccc:	d005      	beq.n	8011cda <_strtod_l+0x72>
 8011cce:	2e06      	cmp	r6, #6
 8011cd0:	d128      	bne.n	8011d24 <_strtod_l+0xbc>
 8011cd2:	3501      	adds	r5, #1
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	9519      	str	r5, [sp, #100]	@ 0x64
 8011cd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8011cda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f040 858e 	bne.w	80127fe <_strtod_l+0xb96>
 8011ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ce4:	b1cb      	cbz	r3, 8011d1a <_strtod_l+0xb2>
 8011ce6:	4652      	mov	r2, sl
 8011ce8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011cec:	ec43 2b10 	vmov	d0, r2, r3
 8011cf0:	b01f      	add	sp, #124	@ 0x7c
 8011cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf6:	2920      	cmp	r1, #32
 8011cf8:	d1ce      	bne.n	8011c98 <_strtod_l+0x30>
 8011cfa:	3201      	adds	r2, #1
 8011cfc:	e7c1      	b.n	8011c82 <_strtod_l+0x1a>
 8011cfe:	292d      	cmp	r1, #45	@ 0x2d
 8011d00:	d1ca      	bne.n	8011c98 <_strtod_l+0x30>
 8011d02:	2101      	movs	r1, #1
 8011d04:	910e      	str	r1, [sp, #56]	@ 0x38
 8011d06:	1c51      	adds	r1, r2, #1
 8011d08:	9119      	str	r1, [sp, #100]	@ 0x64
 8011d0a:	7852      	ldrb	r2, [r2, #1]
 8011d0c:	2a00      	cmp	r2, #0
 8011d0e:	d1c5      	bne.n	8011c9c <_strtod_l+0x34>
 8011d10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011d12:	9419      	str	r4, [sp, #100]	@ 0x64
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f040 8570 	bne.w	80127fa <_strtod_l+0xb92>
 8011d1a:	4652      	mov	r2, sl
 8011d1c:	465b      	mov	r3, fp
 8011d1e:	e7e5      	b.n	8011cec <_strtod_l+0x84>
 8011d20:	2100      	movs	r1, #0
 8011d22:	e7ef      	b.n	8011d04 <_strtod_l+0x9c>
 8011d24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011d26:	b13a      	cbz	r2, 8011d38 <_strtod_l+0xd0>
 8011d28:	2135      	movs	r1, #53	@ 0x35
 8011d2a:	a81c      	add	r0, sp, #112	@ 0x70
 8011d2c:	f002 fb22 	bl	8014374 <__copybits>
 8011d30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d32:	9805      	ldr	r0, [sp, #20]
 8011d34:	f001 fef8 	bl	8013b28 <_Bfree>
 8011d38:	3e01      	subs	r6, #1
 8011d3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011d3c:	2e04      	cmp	r6, #4
 8011d3e:	d806      	bhi.n	8011d4e <_strtod_l+0xe6>
 8011d40:	e8df f006 	tbb	[pc, r6]
 8011d44:	201d0314 	.word	0x201d0314
 8011d48:	14          	.byte	0x14
 8011d49:	00          	.byte	0x00
 8011d4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011d4e:	05e1      	lsls	r1, r4, #23
 8011d50:	bf48      	it	mi
 8011d52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011d5a:	0d1b      	lsrs	r3, r3, #20
 8011d5c:	051b      	lsls	r3, r3, #20
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d1bb      	bne.n	8011cda <_strtod_l+0x72>
 8011d62:	f000 feb1 	bl	8012ac8 <__errno>
 8011d66:	2322      	movs	r3, #34	@ 0x22
 8011d68:	6003      	str	r3, [r0, #0]
 8011d6a:	e7b6      	b.n	8011cda <_strtod_l+0x72>
 8011d6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011d70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011d74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011d78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011d7c:	e7e7      	b.n	8011d4e <_strtod_l+0xe6>
 8011d7e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011f00 <_strtod_l+0x298>
 8011d82:	e7e4      	b.n	8011d4e <_strtod_l+0xe6>
 8011d84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011d88:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8011d8c:	e7df      	b.n	8011d4e <_strtod_l+0xe6>
 8011d8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d90:	1c5a      	adds	r2, r3, #1
 8011d92:	9219      	str	r2, [sp, #100]	@ 0x64
 8011d94:	785b      	ldrb	r3, [r3, #1]
 8011d96:	2b30      	cmp	r3, #48	@ 0x30
 8011d98:	d0f9      	beq.n	8011d8e <_strtod_l+0x126>
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d09d      	beq.n	8011cda <_strtod_l+0x72>
 8011d9e:	2301      	movs	r3, #1
 8011da0:	2700      	movs	r7, #0
 8011da2:	9308      	str	r3, [sp, #32]
 8011da4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011da6:	930c      	str	r3, [sp, #48]	@ 0x30
 8011da8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011daa:	46b9      	mov	r9, r7
 8011dac:	220a      	movs	r2, #10
 8011dae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011db0:	7805      	ldrb	r5, [r0, #0]
 8011db2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011db6:	b2d9      	uxtb	r1, r3
 8011db8:	2909      	cmp	r1, #9
 8011dba:	d928      	bls.n	8011e0e <_strtod_l+0x1a6>
 8011dbc:	494f      	ldr	r1, [pc, #316]	@ (8011efc <_strtod_l+0x294>)
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	f000 fdc0 	bl	8012944 <strncmp>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d032      	beq.n	8011e2e <_strtod_l+0x1c6>
 8011dc8:	2000      	movs	r0, #0
 8011dca:	462a      	mov	r2, r5
 8011dcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011dce:	464d      	mov	r5, r9
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2a65      	cmp	r2, #101	@ 0x65
 8011dd4:	d001      	beq.n	8011dda <_strtod_l+0x172>
 8011dd6:	2a45      	cmp	r2, #69	@ 0x45
 8011dd8:	d114      	bne.n	8011e04 <_strtod_l+0x19c>
 8011dda:	b91d      	cbnz	r5, 8011de4 <_strtod_l+0x17c>
 8011ddc:	9a08      	ldr	r2, [sp, #32]
 8011dde:	4302      	orrs	r2, r0
 8011de0:	d096      	beq.n	8011d10 <_strtod_l+0xa8>
 8011de2:	2500      	movs	r5, #0
 8011de4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011de6:	1c62      	adds	r2, r4, #1
 8011de8:	9219      	str	r2, [sp, #100]	@ 0x64
 8011dea:	7862      	ldrb	r2, [r4, #1]
 8011dec:	2a2b      	cmp	r2, #43	@ 0x2b
 8011dee:	d07a      	beq.n	8011ee6 <_strtod_l+0x27e>
 8011df0:	2a2d      	cmp	r2, #45	@ 0x2d
 8011df2:	d07e      	beq.n	8011ef2 <_strtod_l+0x28a>
 8011df4:	f04f 0c00 	mov.w	ip, #0
 8011df8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011dfc:	2909      	cmp	r1, #9
 8011dfe:	f240 8085 	bls.w	8011f0c <_strtod_l+0x2a4>
 8011e02:	9419      	str	r4, [sp, #100]	@ 0x64
 8011e04:	f04f 0800 	mov.w	r8, #0
 8011e08:	e0a5      	b.n	8011f56 <_strtod_l+0x2ee>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	e7c8      	b.n	8011da0 <_strtod_l+0x138>
 8011e0e:	f1b9 0f08 	cmp.w	r9, #8
 8011e12:	bfd8      	it	le
 8011e14:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011e16:	f100 0001 	add.w	r0, r0, #1
 8011e1a:	bfda      	itte	le
 8011e1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011e20:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011e22:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011e26:	f109 0901 	add.w	r9, r9, #1
 8011e2a:	9019      	str	r0, [sp, #100]	@ 0x64
 8011e2c:	e7bf      	b.n	8011dae <_strtod_l+0x146>
 8011e2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e30:	1c5a      	adds	r2, r3, #1
 8011e32:	9219      	str	r2, [sp, #100]	@ 0x64
 8011e34:	785a      	ldrb	r2, [r3, #1]
 8011e36:	f1b9 0f00 	cmp.w	r9, #0
 8011e3a:	d03b      	beq.n	8011eb4 <_strtod_l+0x24c>
 8011e3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e3e:	464d      	mov	r5, r9
 8011e40:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011e44:	2b09      	cmp	r3, #9
 8011e46:	d912      	bls.n	8011e6e <_strtod_l+0x206>
 8011e48:	2301      	movs	r3, #1
 8011e4a:	e7c2      	b.n	8011dd2 <_strtod_l+0x16a>
 8011e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e4e:	1c5a      	adds	r2, r3, #1
 8011e50:	9219      	str	r2, [sp, #100]	@ 0x64
 8011e52:	785a      	ldrb	r2, [r3, #1]
 8011e54:	3001      	adds	r0, #1
 8011e56:	2a30      	cmp	r2, #48	@ 0x30
 8011e58:	d0f8      	beq.n	8011e4c <_strtod_l+0x1e4>
 8011e5a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011e5e:	2b08      	cmp	r3, #8
 8011e60:	f200 84d2 	bhi.w	8012808 <_strtod_l+0xba0>
 8011e64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e66:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e68:	2000      	movs	r0, #0
 8011e6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	3a30      	subs	r2, #48	@ 0x30
 8011e70:	f100 0301 	add.w	r3, r0, #1
 8011e74:	d018      	beq.n	8011ea8 <_strtod_l+0x240>
 8011e76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011e78:	4419      	add	r1, r3
 8011e7a:	910a      	str	r1, [sp, #40]	@ 0x28
 8011e7c:	462e      	mov	r6, r5
 8011e7e:	f04f 0e0a 	mov.w	lr, #10
 8011e82:	1c71      	adds	r1, r6, #1
 8011e84:	eba1 0c05 	sub.w	ip, r1, r5
 8011e88:	4563      	cmp	r3, ip
 8011e8a:	dc15      	bgt.n	8011eb8 <_strtod_l+0x250>
 8011e8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011e90:	182b      	adds	r3, r5, r0
 8011e92:	2b08      	cmp	r3, #8
 8011e94:	f105 0501 	add.w	r5, r5, #1
 8011e98:	4405      	add	r5, r0
 8011e9a:	dc1a      	bgt.n	8011ed2 <_strtod_l+0x26a>
 8011e9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011e9e:	230a      	movs	r3, #10
 8011ea0:	fb03 2301 	mla	r3, r3, r1, r2
 8011ea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011eaa:	1c51      	adds	r1, r2, #1
 8011eac:	9119      	str	r1, [sp, #100]	@ 0x64
 8011eae:	7852      	ldrb	r2, [r2, #1]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	e7c5      	b.n	8011e40 <_strtod_l+0x1d8>
 8011eb4:	4648      	mov	r0, r9
 8011eb6:	e7ce      	b.n	8011e56 <_strtod_l+0x1ee>
 8011eb8:	2e08      	cmp	r6, #8
 8011eba:	dc05      	bgt.n	8011ec8 <_strtod_l+0x260>
 8011ebc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011ebe:	fb0e f606 	mul.w	r6, lr, r6
 8011ec2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011ec4:	460e      	mov	r6, r1
 8011ec6:	e7dc      	b.n	8011e82 <_strtod_l+0x21a>
 8011ec8:	2910      	cmp	r1, #16
 8011eca:	bfd8      	it	le
 8011ecc:	fb0e f707 	mulle.w	r7, lr, r7
 8011ed0:	e7f8      	b.n	8011ec4 <_strtod_l+0x25c>
 8011ed2:	2b0f      	cmp	r3, #15
 8011ed4:	bfdc      	itt	le
 8011ed6:	230a      	movle	r3, #10
 8011ed8:	fb03 2707 	mlale	r7, r3, r7, r2
 8011edc:	e7e3      	b.n	8011ea6 <_strtod_l+0x23e>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e77a      	b.n	8011ddc <_strtod_l+0x174>
 8011ee6:	f04f 0c00 	mov.w	ip, #0
 8011eea:	1ca2      	adds	r2, r4, #2
 8011eec:	9219      	str	r2, [sp, #100]	@ 0x64
 8011eee:	78a2      	ldrb	r2, [r4, #2]
 8011ef0:	e782      	b.n	8011df8 <_strtod_l+0x190>
 8011ef2:	f04f 0c01 	mov.w	ip, #1
 8011ef6:	e7f8      	b.n	8011eea <_strtod_l+0x282>
 8011ef8:	08015634 	.word	0x08015634
 8011efc:	08015460 	.word	0x08015460
 8011f00:	7ff00000 	.word	0x7ff00000
 8011f04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011f06:	1c51      	adds	r1, r2, #1
 8011f08:	9119      	str	r1, [sp, #100]	@ 0x64
 8011f0a:	7852      	ldrb	r2, [r2, #1]
 8011f0c:	2a30      	cmp	r2, #48	@ 0x30
 8011f0e:	d0f9      	beq.n	8011f04 <_strtod_l+0x29c>
 8011f10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011f14:	2908      	cmp	r1, #8
 8011f16:	f63f af75 	bhi.w	8011e04 <_strtod_l+0x19c>
 8011f1a:	3a30      	subs	r2, #48	@ 0x30
 8011f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011f20:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011f22:	f04f 080a 	mov.w	r8, #10
 8011f26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011f28:	1c56      	adds	r6, r2, #1
 8011f2a:	9619      	str	r6, [sp, #100]	@ 0x64
 8011f2c:	7852      	ldrb	r2, [r2, #1]
 8011f2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011f32:	f1be 0f09 	cmp.w	lr, #9
 8011f36:	d939      	bls.n	8011fac <_strtod_l+0x344>
 8011f38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011f3a:	1a76      	subs	r6, r6, r1
 8011f3c:	2e08      	cmp	r6, #8
 8011f3e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011f42:	dc03      	bgt.n	8011f4c <_strtod_l+0x2e4>
 8011f44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011f46:	4588      	cmp	r8, r1
 8011f48:	bfa8      	it	ge
 8011f4a:	4688      	movge	r8, r1
 8011f4c:	f1bc 0f00 	cmp.w	ip, #0
 8011f50:	d001      	beq.n	8011f56 <_strtod_l+0x2ee>
 8011f52:	f1c8 0800 	rsb	r8, r8, #0
 8011f56:	2d00      	cmp	r5, #0
 8011f58:	d14e      	bne.n	8011ff8 <_strtod_l+0x390>
 8011f5a:	9908      	ldr	r1, [sp, #32]
 8011f5c:	4308      	orrs	r0, r1
 8011f5e:	f47f aebc 	bne.w	8011cda <_strtod_l+0x72>
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	f47f aed4 	bne.w	8011d10 <_strtod_l+0xa8>
 8011f68:	2a69      	cmp	r2, #105	@ 0x69
 8011f6a:	d028      	beq.n	8011fbe <_strtod_l+0x356>
 8011f6c:	dc25      	bgt.n	8011fba <_strtod_l+0x352>
 8011f6e:	2a49      	cmp	r2, #73	@ 0x49
 8011f70:	d025      	beq.n	8011fbe <_strtod_l+0x356>
 8011f72:	2a4e      	cmp	r2, #78	@ 0x4e
 8011f74:	f47f aecc 	bne.w	8011d10 <_strtod_l+0xa8>
 8011f78:	499a      	ldr	r1, [pc, #616]	@ (80121e4 <_strtod_l+0x57c>)
 8011f7a:	a819      	add	r0, sp, #100	@ 0x64
 8011f7c:	f001 f944 	bl	8013208 <__match>
 8011f80:	2800      	cmp	r0, #0
 8011f82:	f43f aec5 	beq.w	8011d10 <_strtod_l+0xa8>
 8011f86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	2b28      	cmp	r3, #40	@ 0x28
 8011f8c:	d12e      	bne.n	8011fec <_strtod_l+0x384>
 8011f8e:	4996      	ldr	r1, [pc, #600]	@ (80121e8 <_strtod_l+0x580>)
 8011f90:	aa1c      	add	r2, sp, #112	@ 0x70
 8011f92:	a819      	add	r0, sp, #100	@ 0x64
 8011f94:	f001 f94c 	bl	8013230 <__hexnan>
 8011f98:	2805      	cmp	r0, #5
 8011f9a:	d127      	bne.n	8011fec <_strtod_l+0x384>
 8011f9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011f9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011fa2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011fa6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011faa:	e696      	b.n	8011cda <_strtod_l+0x72>
 8011fac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fae:	fb08 2101 	mla	r1, r8, r1, r2
 8011fb2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011fb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fb8:	e7b5      	b.n	8011f26 <_strtod_l+0x2be>
 8011fba:	2a6e      	cmp	r2, #110	@ 0x6e
 8011fbc:	e7da      	b.n	8011f74 <_strtod_l+0x30c>
 8011fbe:	498b      	ldr	r1, [pc, #556]	@ (80121ec <_strtod_l+0x584>)
 8011fc0:	a819      	add	r0, sp, #100	@ 0x64
 8011fc2:	f001 f921 	bl	8013208 <__match>
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	f43f aea2 	beq.w	8011d10 <_strtod_l+0xa8>
 8011fcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011fce:	4988      	ldr	r1, [pc, #544]	@ (80121f0 <_strtod_l+0x588>)
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	a819      	add	r0, sp, #100	@ 0x64
 8011fd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8011fd6:	f001 f917 	bl	8013208 <__match>
 8011fda:	b910      	cbnz	r0, 8011fe2 <_strtod_l+0x37a>
 8011fdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011fde:	3301      	adds	r3, #1
 8011fe0:	9319      	str	r3, [sp, #100]	@ 0x64
 8011fe2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8012200 <_strtod_l+0x598>
 8011fe6:	f04f 0a00 	mov.w	sl, #0
 8011fea:	e676      	b.n	8011cda <_strtod_l+0x72>
 8011fec:	4881      	ldr	r0, [pc, #516]	@ (80121f4 <_strtod_l+0x58c>)
 8011fee:	f000 fe0b 	bl	8012c08 <nan>
 8011ff2:	ec5b ab10 	vmov	sl, fp, d0
 8011ff6:	e670      	b.n	8011cda <_strtod_l+0x72>
 8011ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ffa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011ffc:	eba8 0303 	sub.w	r3, r8, r3
 8012000:	f1b9 0f00 	cmp.w	r9, #0
 8012004:	bf08      	it	eq
 8012006:	46a9      	moveq	r9, r5
 8012008:	2d10      	cmp	r5, #16
 801200a:	9309      	str	r3, [sp, #36]	@ 0x24
 801200c:	462c      	mov	r4, r5
 801200e:	bfa8      	it	ge
 8012010:	2410      	movge	r4, #16
 8012012:	f7ee fa8f 	bl	8000534 <__aeabi_ui2d>
 8012016:	2d09      	cmp	r5, #9
 8012018:	4682      	mov	sl, r0
 801201a:	468b      	mov	fp, r1
 801201c:	dc13      	bgt.n	8012046 <_strtod_l+0x3de>
 801201e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012020:	2b00      	cmp	r3, #0
 8012022:	f43f ae5a 	beq.w	8011cda <_strtod_l+0x72>
 8012026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012028:	dd78      	ble.n	801211c <_strtod_l+0x4b4>
 801202a:	2b16      	cmp	r3, #22
 801202c:	dc5f      	bgt.n	80120ee <_strtod_l+0x486>
 801202e:	4972      	ldr	r1, [pc, #456]	@ (80121f8 <_strtod_l+0x590>)
 8012030:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012038:	4652      	mov	r2, sl
 801203a:	465b      	mov	r3, fp
 801203c:	f7ee faf4 	bl	8000628 <__aeabi_dmul>
 8012040:	4682      	mov	sl, r0
 8012042:	468b      	mov	fp, r1
 8012044:	e649      	b.n	8011cda <_strtod_l+0x72>
 8012046:	4b6c      	ldr	r3, [pc, #432]	@ (80121f8 <_strtod_l+0x590>)
 8012048:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801204c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012050:	f7ee faea 	bl	8000628 <__aeabi_dmul>
 8012054:	4682      	mov	sl, r0
 8012056:	4638      	mov	r0, r7
 8012058:	468b      	mov	fp, r1
 801205a:	f7ee fa6b 	bl	8000534 <__aeabi_ui2d>
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	4650      	mov	r0, sl
 8012064:	4659      	mov	r1, fp
 8012066:	f7ee f929 	bl	80002bc <__adddf3>
 801206a:	2d0f      	cmp	r5, #15
 801206c:	4682      	mov	sl, r0
 801206e:	468b      	mov	fp, r1
 8012070:	ddd5      	ble.n	801201e <_strtod_l+0x3b6>
 8012072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012074:	1b2c      	subs	r4, r5, r4
 8012076:	441c      	add	r4, r3
 8012078:	2c00      	cmp	r4, #0
 801207a:	f340 8093 	ble.w	80121a4 <_strtod_l+0x53c>
 801207e:	f014 030f 	ands.w	r3, r4, #15
 8012082:	d00a      	beq.n	801209a <_strtod_l+0x432>
 8012084:	495c      	ldr	r1, [pc, #368]	@ (80121f8 <_strtod_l+0x590>)
 8012086:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801208a:	4652      	mov	r2, sl
 801208c:	465b      	mov	r3, fp
 801208e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012092:	f7ee fac9 	bl	8000628 <__aeabi_dmul>
 8012096:	4682      	mov	sl, r0
 8012098:	468b      	mov	fp, r1
 801209a:	f034 040f 	bics.w	r4, r4, #15
 801209e:	d073      	beq.n	8012188 <_strtod_l+0x520>
 80120a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80120a4:	dd49      	ble.n	801213a <_strtod_l+0x4d2>
 80120a6:	2400      	movs	r4, #0
 80120a8:	46a0      	mov	r8, r4
 80120aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80120ac:	46a1      	mov	r9, r4
 80120ae:	9a05      	ldr	r2, [sp, #20]
 80120b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8012200 <_strtod_l+0x598>
 80120b4:	2322      	movs	r3, #34	@ 0x22
 80120b6:	6013      	str	r3, [r2, #0]
 80120b8:	f04f 0a00 	mov.w	sl, #0
 80120bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120be:	2b00      	cmp	r3, #0
 80120c0:	f43f ae0b 	beq.w	8011cda <_strtod_l+0x72>
 80120c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80120c6:	9805      	ldr	r0, [sp, #20]
 80120c8:	f001 fd2e 	bl	8013b28 <_Bfree>
 80120cc:	9805      	ldr	r0, [sp, #20]
 80120ce:	4649      	mov	r1, r9
 80120d0:	f001 fd2a 	bl	8013b28 <_Bfree>
 80120d4:	9805      	ldr	r0, [sp, #20]
 80120d6:	4641      	mov	r1, r8
 80120d8:	f001 fd26 	bl	8013b28 <_Bfree>
 80120dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80120de:	9805      	ldr	r0, [sp, #20]
 80120e0:	f001 fd22 	bl	8013b28 <_Bfree>
 80120e4:	9805      	ldr	r0, [sp, #20]
 80120e6:	4621      	mov	r1, r4
 80120e8:	f001 fd1e 	bl	8013b28 <_Bfree>
 80120ec:	e5f5      	b.n	8011cda <_strtod_l+0x72>
 80120ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80120f4:	4293      	cmp	r3, r2
 80120f6:	dbbc      	blt.n	8012072 <_strtod_l+0x40a>
 80120f8:	4c3f      	ldr	r4, [pc, #252]	@ (80121f8 <_strtod_l+0x590>)
 80120fa:	f1c5 050f 	rsb	r5, r5, #15
 80120fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012102:	4652      	mov	r2, sl
 8012104:	465b      	mov	r3, fp
 8012106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801210a:	f7ee fa8d 	bl	8000628 <__aeabi_dmul>
 801210e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012110:	1b5d      	subs	r5, r3, r5
 8012112:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012116:	e9d4 2300 	ldrd	r2, r3, [r4]
 801211a:	e78f      	b.n	801203c <_strtod_l+0x3d4>
 801211c:	3316      	adds	r3, #22
 801211e:	dba8      	blt.n	8012072 <_strtod_l+0x40a>
 8012120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012122:	eba3 0808 	sub.w	r8, r3, r8
 8012126:	4b34      	ldr	r3, [pc, #208]	@ (80121f8 <_strtod_l+0x590>)
 8012128:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801212c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012130:	4650      	mov	r0, sl
 8012132:	4659      	mov	r1, fp
 8012134:	f7ee fba2 	bl	800087c <__aeabi_ddiv>
 8012138:	e782      	b.n	8012040 <_strtod_l+0x3d8>
 801213a:	2300      	movs	r3, #0
 801213c:	4f2f      	ldr	r7, [pc, #188]	@ (80121fc <_strtod_l+0x594>)
 801213e:	1124      	asrs	r4, r4, #4
 8012140:	4650      	mov	r0, sl
 8012142:	4659      	mov	r1, fp
 8012144:	461e      	mov	r6, r3
 8012146:	2c01      	cmp	r4, #1
 8012148:	dc21      	bgt.n	801218e <_strtod_l+0x526>
 801214a:	b10b      	cbz	r3, 8012150 <_strtod_l+0x4e8>
 801214c:	4682      	mov	sl, r0
 801214e:	468b      	mov	fp, r1
 8012150:	492a      	ldr	r1, [pc, #168]	@ (80121fc <_strtod_l+0x594>)
 8012152:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012156:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801215a:	4652      	mov	r2, sl
 801215c:	465b      	mov	r3, fp
 801215e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012162:	f7ee fa61 	bl	8000628 <__aeabi_dmul>
 8012166:	4b26      	ldr	r3, [pc, #152]	@ (8012200 <_strtod_l+0x598>)
 8012168:	460a      	mov	r2, r1
 801216a:	400b      	ands	r3, r1
 801216c:	4925      	ldr	r1, [pc, #148]	@ (8012204 <_strtod_l+0x59c>)
 801216e:	428b      	cmp	r3, r1
 8012170:	4682      	mov	sl, r0
 8012172:	d898      	bhi.n	80120a6 <_strtod_l+0x43e>
 8012174:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012178:	428b      	cmp	r3, r1
 801217a:	bf86      	itte	hi
 801217c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012208 <_strtod_l+0x5a0>
 8012180:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8012184:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012188:	2300      	movs	r3, #0
 801218a:	9308      	str	r3, [sp, #32]
 801218c:	e076      	b.n	801227c <_strtod_l+0x614>
 801218e:	07e2      	lsls	r2, r4, #31
 8012190:	d504      	bpl.n	801219c <_strtod_l+0x534>
 8012192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012196:	f7ee fa47 	bl	8000628 <__aeabi_dmul>
 801219a:	2301      	movs	r3, #1
 801219c:	3601      	adds	r6, #1
 801219e:	1064      	asrs	r4, r4, #1
 80121a0:	3708      	adds	r7, #8
 80121a2:	e7d0      	b.n	8012146 <_strtod_l+0x4de>
 80121a4:	d0f0      	beq.n	8012188 <_strtod_l+0x520>
 80121a6:	4264      	negs	r4, r4
 80121a8:	f014 020f 	ands.w	r2, r4, #15
 80121ac:	d00a      	beq.n	80121c4 <_strtod_l+0x55c>
 80121ae:	4b12      	ldr	r3, [pc, #72]	@ (80121f8 <_strtod_l+0x590>)
 80121b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121b4:	4650      	mov	r0, sl
 80121b6:	4659      	mov	r1, fp
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	f7ee fb5e 	bl	800087c <__aeabi_ddiv>
 80121c0:	4682      	mov	sl, r0
 80121c2:	468b      	mov	fp, r1
 80121c4:	1124      	asrs	r4, r4, #4
 80121c6:	d0df      	beq.n	8012188 <_strtod_l+0x520>
 80121c8:	2c1f      	cmp	r4, #31
 80121ca:	dd1f      	ble.n	801220c <_strtod_l+0x5a4>
 80121cc:	2400      	movs	r4, #0
 80121ce:	46a0      	mov	r8, r4
 80121d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80121d2:	46a1      	mov	r9, r4
 80121d4:	9a05      	ldr	r2, [sp, #20]
 80121d6:	2322      	movs	r3, #34	@ 0x22
 80121d8:	f04f 0a00 	mov.w	sl, #0
 80121dc:	f04f 0b00 	mov.w	fp, #0
 80121e0:	6013      	str	r3, [r2, #0]
 80121e2:	e76b      	b.n	80120bc <_strtod_l+0x454>
 80121e4:	0801546b 	.word	0x0801546b
 80121e8:	08015620 	.word	0x08015620
 80121ec:	08015462 	.word	0x08015462
 80121f0:	08015465 	.word	0x08015465
 80121f4:	08015522 	.word	0x08015522
 80121f8:	080157a8 	.word	0x080157a8
 80121fc:	08015780 	.word	0x08015780
 8012200:	7ff00000 	.word	0x7ff00000
 8012204:	7ca00000 	.word	0x7ca00000
 8012208:	7fefffff 	.word	0x7fefffff
 801220c:	f014 0310 	ands.w	r3, r4, #16
 8012210:	bf18      	it	ne
 8012212:	236a      	movne	r3, #106	@ 0x6a
 8012214:	4ea9      	ldr	r6, [pc, #676]	@ (80124bc <_strtod_l+0x854>)
 8012216:	9308      	str	r3, [sp, #32]
 8012218:	4650      	mov	r0, sl
 801221a:	4659      	mov	r1, fp
 801221c:	2300      	movs	r3, #0
 801221e:	07e7      	lsls	r7, r4, #31
 8012220:	d504      	bpl.n	801222c <_strtod_l+0x5c4>
 8012222:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012226:	f7ee f9ff 	bl	8000628 <__aeabi_dmul>
 801222a:	2301      	movs	r3, #1
 801222c:	1064      	asrs	r4, r4, #1
 801222e:	f106 0608 	add.w	r6, r6, #8
 8012232:	d1f4      	bne.n	801221e <_strtod_l+0x5b6>
 8012234:	b10b      	cbz	r3, 801223a <_strtod_l+0x5d2>
 8012236:	4682      	mov	sl, r0
 8012238:	468b      	mov	fp, r1
 801223a:	9b08      	ldr	r3, [sp, #32]
 801223c:	b1b3      	cbz	r3, 801226c <_strtod_l+0x604>
 801223e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012242:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012246:	2b00      	cmp	r3, #0
 8012248:	4659      	mov	r1, fp
 801224a:	dd0f      	ble.n	801226c <_strtod_l+0x604>
 801224c:	2b1f      	cmp	r3, #31
 801224e:	dd56      	ble.n	80122fe <_strtod_l+0x696>
 8012250:	2b34      	cmp	r3, #52	@ 0x34
 8012252:	bfde      	ittt	le
 8012254:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8012258:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801225c:	4093      	lslle	r3, r2
 801225e:	f04f 0a00 	mov.w	sl, #0
 8012262:	bfcc      	ite	gt
 8012264:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012268:	ea03 0b01 	andle.w	fp, r3, r1
 801226c:	2200      	movs	r2, #0
 801226e:	2300      	movs	r3, #0
 8012270:	4650      	mov	r0, sl
 8012272:	4659      	mov	r1, fp
 8012274:	f7ee fc40 	bl	8000af8 <__aeabi_dcmpeq>
 8012278:	2800      	cmp	r0, #0
 801227a:	d1a7      	bne.n	80121cc <_strtod_l+0x564>
 801227c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012282:	9805      	ldr	r0, [sp, #20]
 8012284:	462b      	mov	r3, r5
 8012286:	464a      	mov	r2, r9
 8012288:	f001 fcb6 	bl	8013bf8 <__s2b>
 801228c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801228e:	2800      	cmp	r0, #0
 8012290:	f43f af09 	beq.w	80120a6 <_strtod_l+0x43e>
 8012294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012296:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012298:	2a00      	cmp	r2, #0
 801229a:	eba3 0308 	sub.w	r3, r3, r8
 801229e:	bfa8      	it	ge
 80122a0:	2300      	movge	r3, #0
 80122a2:	9312      	str	r3, [sp, #72]	@ 0x48
 80122a4:	2400      	movs	r4, #0
 80122a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80122aa:	9316      	str	r3, [sp, #88]	@ 0x58
 80122ac:	46a0      	mov	r8, r4
 80122ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122b0:	9805      	ldr	r0, [sp, #20]
 80122b2:	6859      	ldr	r1, [r3, #4]
 80122b4:	f001 fbf8 	bl	8013aa8 <_Balloc>
 80122b8:	4681      	mov	r9, r0
 80122ba:	2800      	cmp	r0, #0
 80122bc:	f43f aef7 	beq.w	80120ae <_strtod_l+0x446>
 80122c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122c2:	691a      	ldr	r2, [r3, #16]
 80122c4:	3202      	adds	r2, #2
 80122c6:	f103 010c 	add.w	r1, r3, #12
 80122ca:	0092      	lsls	r2, r2, #2
 80122cc:	300c      	adds	r0, #12
 80122ce:	f000 fc8b 	bl	8012be8 <memcpy>
 80122d2:	ec4b ab10 	vmov	d0, sl, fp
 80122d6:	9805      	ldr	r0, [sp, #20]
 80122d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80122da:	a91b      	add	r1, sp, #108	@ 0x6c
 80122dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80122e0:	f001 ffbe 	bl	8014260 <__d2b>
 80122e4:	901a      	str	r0, [sp, #104]	@ 0x68
 80122e6:	2800      	cmp	r0, #0
 80122e8:	f43f aee1 	beq.w	80120ae <_strtod_l+0x446>
 80122ec:	9805      	ldr	r0, [sp, #20]
 80122ee:	2101      	movs	r1, #1
 80122f0:	f001 fd18 	bl	8013d24 <__i2b>
 80122f4:	4680      	mov	r8, r0
 80122f6:	b948      	cbnz	r0, 801230c <_strtod_l+0x6a4>
 80122f8:	f04f 0800 	mov.w	r8, #0
 80122fc:	e6d7      	b.n	80120ae <_strtod_l+0x446>
 80122fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012302:	fa02 f303 	lsl.w	r3, r2, r3
 8012306:	ea03 0a0a 	and.w	sl, r3, sl
 801230a:	e7af      	b.n	801226c <_strtod_l+0x604>
 801230c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801230e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012310:	2d00      	cmp	r5, #0
 8012312:	bfab      	itete	ge
 8012314:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012316:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012318:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801231a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801231c:	bfac      	ite	ge
 801231e:	18ef      	addge	r7, r5, r3
 8012320:	1b5e      	sublt	r6, r3, r5
 8012322:	9b08      	ldr	r3, [sp, #32]
 8012324:	1aed      	subs	r5, r5, r3
 8012326:	4415      	add	r5, r2
 8012328:	4b65      	ldr	r3, [pc, #404]	@ (80124c0 <_strtod_l+0x858>)
 801232a:	3d01      	subs	r5, #1
 801232c:	429d      	cmp	r5, r3
 801232e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012332:	da50      	bge.n	80123d6 <_strtod_l+0x76e>
 8012334:	1b5b      	subs	r3, r3, r5
 8012336:	2b1f      	cmp	r3, #31
 8012338:	eba2 0203 	sub.w	r2, r2, r3
 801233c:	f04f 0101 	mov.w	r1, #1
 8012340:	dc3d      	bgt.n	80123be <_strtod_l+0x756>
 8012342:	fa01 f303 	lsl.w	r3, r1, r3
 8012346:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012348:	2300      	movs	r3, #0
 801234a:	9310      	str	r3, [sp, #64]	@ 0x40
 801234c:	18bd      	adds	r5, r7, r2
 801234e:	9b08      	ldr	r3, [sp, #32]
 8012350:	42af      	cmp	r7, r5
 8012352:	4416      	add	r6, r2
 8012354:	441e      	add	r6, r3
 8012356:	463b      	mov	r3, r7
 8012358:	bfa8      	it	ge
 801235a:	462b      	movge	r3, r5
 801235c:	42b3      	cmp	r3, r6
 801235e:	bfa8      	it	ge
 8012360:	4633      	movge	r3, r6
 8012362:	2b00      	cmp	r3, #0
 8012364:	bfc2      	ittt	gt
 8012366:	1aed      	subgt	r5, r5, r3
 8012368:	1af6      	subgt	r6, r6, r3
 801236a:	1aff      	subgt	r7, r7, r3
 801236c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801236e:	2b00      	cmp	r3, #0
 8012370:	dd16      	ble.n	80123a0 <_strtod_l+0x738>
 8012372:	4641      	mov	r1, r8
 8012374:	9805      	ldr	r0, [sp, #20]
 8012376:	461a      	mov	r2, r3
 8012378:	f001 fd8c 	bl	8013e94 <__pow5mult>
 801237c:	4680      	mov	r8, r0
 801237e:	2800      	cmp	r0, #0
 8012380:	d0ba      	beq.n	80122f8 <_strtod_l+0x690>
 8012382:	4601      	mov	r1, r0
 8012384:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012386:	9805      	ldr	r0, [sp, #20]
 8012388:	f001 fce2 	bl	8013d50 <__multiply>
 801238c:	900a      	str	r0, [sp, #40]	@ 0x28
 801238e:	2800      	cmp	r0, #0
 8012390:	f43f ae8d 	beq.w	80120ae <_strtod_l+0x446>
 8012394:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012396:	9805      	ldr	r0, [sp, #20]
 8012398:	f001 fbc6 	bl	8013b28 <_Bfree>
 801239c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801239e:	931a      	str	r3, [sp, #104]	@ 0x68
 80123a0:	2d00      	cmp	r5, #0
 80123a2:	dc1d      	bgt.n	80123e0 <_strtod_l+0x778>
 80123a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	dd23      	ble.n	80123f2 <_strtod_l+0x78a>
 80123aa:	4649      	mov	r1, r9
 80123ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80123ae:	9805      	ldr	r0, [sp, #20]
 80123b0:	f001 fd70 	bl	8013e94 <__pow5mult>
 80123b4:	4681      	mov	r9, r0
 80123b6:	b9e0      	cbnz	r0, 80123f2 <_strtod_l+0x78a>
 80123b8:	f04f 0900 	mov.w	r9, #0
 80123bc:	e677      	b.n	80120ae <_strtod_l+0x446>
 80123be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80123c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80123c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80123ca:	35e2      	adds	r5, #226	@ 0xe2
 80123cc:	fa01 f305 	lsl.w	r3, r1, r5
 80123d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80123d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80123d4:	e7ba      	b.n	801234c <_strtod_l+0x6e4>
 80123d6:	2300      	movs	r3, #0
 80123d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80123da:	2301      	movs	r3, #1
 80123dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80123de:	e7b5      	b.n	801234c <_strtod_l+0x6e4>
 80123e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80123e2:	9805      	ldr	r0, [sp, #20]
 80123e4:	462a      	mov	r2, r5
 80123e6:	f001 fdaf 	bl	8013f48 <__lshift>
 80123ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d1d9      	bne.n	80123a4 <_strtod_l+0x73c>
 80123f0:	e65d      	b.n	80120ae <_strtod_l+0x446>
 80123f2:	2e00      	cmp	r6, #0
 80123f4:	dd07      	ble.n	8012406 <_strtod_l+0x79e>
 80123f6:	4649      	mov	r1, r9
 80123f8:	9805      	ldr	r0, [sp, #20]
 80123fa:	4632      	mov	r2, r6
 80123fc:	f001 fda4 	bl	8013f48 <__lshift>
 8012400:	4681      	mov	r9, r0
 8012402:	2800      	cmp	r0, #0
 8012404:	d0d8      	beq.n	80123b8 <_strtod_l+0x750>
 8012406:	2f00      	cmp	r7, #0
 8012408:	dd08      	ble.n	801241c <_strtod_l+0x7b4>
 801240a:	4641      	mov	r1, r8
 801240c:	9805      	ldr	r0, [sp, #20]
 801240e:	463a      	mov	r2, r7
 8012410:	f001 fd9a 	bl	8013f48 <__lshift>
 8012414:	4680      	mov	r8, r0
 8012416:	2800      	cmp	r0, #0
 8012418:	f43f ae49 	beq.w	80120ae <_strtod_l+0x446>
 801241c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801241e:	9805      	ldr	r0, [sp, #20]
 8012420:	464a      	mov	r2, r9
 8012422:	f001 fe19 	bl	8014058 <__mdiff>
 8012426:	4604      	mov	r4, r0
 8012428:	2800      	cmp	r0, #0
 801242a:	f43f ae40 	beq.w	80120ae <_strtod_l+0x446>
 801242e:	68c3      	ldr	r3, [r0, #12]
 8012430:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012432:	2300      	movs	r3, #0
 8012434:	60c3      	str	r3, [r0, #12]
 8012436:	4641      	mov	r1, r8
 8012438:	f001 fdf2 	bl	8014020 <__mcmp>
 801243c:	2800      	cmp	r0, #0
 801243e:	da45      	bge.n	80124cc <_strtod_l+0x864>
 8012440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012442:	ea53 030a 	orrs.w	r3, r3, sl
 8012446:	d16b      	bne.n	8012520 <_strtod_l+0x8b8>
 8012448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801244c:	2b00      	cmp	r3, #0
 801244e:	d167      	bne.n	8012520 <_strtod_l+0x8b8>
 8012450:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012454:	0d1b      	lsrs	r3, r3, #20
 8012456:	051b      	lsls	r3, r3, #20
 8012458:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801245c:	d960      	bls.n	8012520 <_strtod_l+0x8b8>
 801245e:	6963      	ldr	r3, [r4, #20]
 8012460:	b913      	cbnz	r3, 8012468 <_strtod_l+0x800>
 8012462:	6923      	ldr	r3, [r4, #16]
 8012464:	2b01      	cmp	r3, #1
 8012466:	dd5b      	ble.n	8012520 <_strtod_l+0x8b8>
 8012468:	4621      	mov	r1, r4
 801246a:	2201      	movs	r2, #1
 801246c:	9805      	ldr	r0, [sp, #20]
 801246e:	f001 fd6b 	bl	8013f48 <__lshift>
 8012472:	4641      	mov	r1, r8
 8012474:	4604      	mov	r4, r0
 8012476:	f001 fdd3 	bl	8014020 <__mcmp>
 801247a:	2800      	cmp	r0, #0
 801247c:	dd50      	ble.n	8012520 <_strtod_l+0x8b8>
 801247e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012482:	9a08      	ldr	r2, [sp, #32]
 8012484:	0d1b      	lsrs	r3, r3, #20
 8012486:	051b      	lsls	r3, r3, #20
 8012488:	2a00      	cmp	r2, #0
 801248a:	d06a      	beq.n	8012562 <_strtod_l+0x8fa>
 801248c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012490:	d867      	bhi.n	8012562 <_strtod_l+0x8fa>
 8012492:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012496:	f67f ae9d 	bls.w	80121d4 <_strtod_l+0x56c>
 801249a:	4b0a      	ldr	r3, [pc, #40]	@ (80124c4 <_strtod_l+0x85c>)
 801249c:	4650      	mov	r0, sl
 801249e:	4659      	mov	r1, fp
 80124a0:	2200      	movs	r2, #0
 80124a2:	f7ee f8c1 	bl	8000628 <__aeabi_dmul>
 80124a6:	4b08      	ldr	r3, [pc, #32]	@ (80124c8 <_strtod_l+0x860>)
 80124a8:	400b      	ands	r3, r1
 80124aa:	4682      	mov	sl, r0
 80124ac:	468b      	mov	fp, r1
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f47f ae08 	bne.w	80120c4 <_strtod_l+0x45c>
 80124b4:	9a05      	ldr	r2, [sp, #20]
 80124b6:	2322      	movs	r3, #34	@ 0x22
 80124b8:	6013      	str	r3, [r2, #0]
 80124ba:	e603      	b.n	80120c4 <_strtod_l+0x45c>
 80124bc:	08015648 	.word	0x08015648
 80124c0:	fffffc02 	.word	0xfffffc02
 80124c4:	39500000 	.word	0x39500000
 80124c8:	7ff00000 	.word	0x7ff00000
 80124cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80124d0:	d165      	bne.n	801259e <_strtod_l+0x936>
 80124d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80124d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80124d8:	b35a      	cbz	r2, 8012532 <_strtod_l+0x8ca>
 80124da:	4a9f      	ldr	r2, [pc, #636]	@ (8012758 <_strtod_l+0xaf0>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	d12b      	bne.n	8012538 <_strtod_l+0x8d0>
 80124e0:	9b08      	ldr	r3, [sp, #32]
 80124e2:	4651      	mov	r1, sl
 80124e4:	b303      	cbz	r3, 8012528 <_strtod_l+0x8c0>
 80124e6:	4b9d      	ldr	r3, [pc, #628]	@ (801275c <_strtod_l+0xaf4>)
 80124e8:	465a      	mov	r2, fp
 80124ea:	4013      	ands	r3, r2
 80124ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80124f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80124f4:	d81b      	bhi.n	801252e <_strtod_l+0x8c6>
 80124f6:	0d1b      	lsrs	r3, r3, #20
 80124f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80124fc:	fa02 f303 	lsl.w	r3, r2, r3
 8012500:	4299      	cmp	r1, r3
 8012502:	d119      	bne.n	8012538 <_strtod_l+0x8d0>
 8012504:	4b96      	ldr	r3, [pc, #600]	@ (8012760 <_strtod_l+0xaf8>)
 8012506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012508:	429a      	cmp	r2, r3
 801250a:	d102      	bne.n	8012512 <_strtod_l+0x8aa>
 801250c:	3101      	adds	r1, #1
 801250e:	f43f adce 	beq.w	80120ae <_strtod_l+0x446>
 8012512:	4b92      	ldr	r3, [pc, #584]	@ (801275c <_strtod_l+0xaf4>)
 8012514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012516:	401a      	ands	r2, r3
 8012518:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801251c:	f04f 0a00 	mov.w	sl, #0
 8012520:	9b08      	ldr	r3, [sp, #32]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d1b9      	bne.n	801249a <_strtod_l+0x832>
 8012526:	e5cd      	b.n	80120c4 <_strtod_l+0x45c>
 8012528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801252c:	e7e8      	b.n	8012500 <_strtod_l+0x898>
 801252e:	4613      	mov	r3, r2
 8012530:	e7e6      	b.n	8012500 <_strtod_l+0x898>
 8012532:	ea53 030a 	orrs.w	r3, r3, sl
 8012536:	d0a2      	beq.n	801247e <_strtod_l+0x816>
 8012538:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801253a:	b1db      	cbz	r3, 8012574 <_strtod_l+0x90c>
 801253c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801253e:	4213      	tst	r3, r2
 8012540:	d0ee      	beq.n	8012520 <_strtod_l+0x8b8>
 8012542:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012544:	9a08      	ldr	r2, [sp, #32]
 8012546:	4650      	mov	r0, sl
 8012548:	4659      	mov	r1, fp
 801254a:	b1bb      	cbz	r3, 801257c <_strtod_l+0x914>
 801254c:	f7ff fb6e 	bl	8011c2c <sulp>
 8012550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012554:	ec53 2b10 	vmov	r2, r3, d0
 8012558:	f7ed feb0 	bl	80002bc <__adddf3>
 801255c:	4682      	mov	sl, r0
 801255e:	468b      	mov	fp, r1
 8012560:	e7de      	b.n	8012520 <_strtod_l+0x8b8>
 8012562:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012566:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801256a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801256e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8012572:	e7d5      	b.n	8012520 <_strtod_l+0x8b8>
 8012574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012576:	ea13 0f0a 	tst.w	r3, sl
 801257a:	e7e1      	b.n	8012540 <_strtod_l+0x8d8>
 801257c:	f7ff fb56 	bl	8011c2c <sulp>
 8012580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012584:	ec53 2b10 	vmov	r2, r3, d0
 8012588:	f7ed fe96 	bl	80002b8 <__aeabi_dsub>
 801258c:	2200      	movs	r2, #0
 801258e:	2300      	movs	r3, #0
 8012590:	4682      	mov	sl, r0
 8012592:	468b      	mov	fp, r1
 8012594:	f7ee fab0 	bl	8000af8 <__aeabi_dcmpeq>
 8012598:	2800      	cmp	r0, #0
 801259a:	d0c1      	beq.n	8012520 <_strtod_l+0x8b8>
 801259c:	e61a      	b.n	80121d4 <_strtod_l+0x56c>
 801259e:	4641      	mov	r1, r8
 80125a0:	4620      	mov	r0, r4
 80125a2:	f001 feb5 	bl	8014310 <__ratio>
 80125a6:	ec57 6b10 	vmov	r6, r7, d0
 80125aa:	2200      	movs	r2, #0
 80125ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80125b0:	4630      	mov	r0, r6
 80125b2:	4639      	mov	r1, r7
 80125b4:	f7ee fab4 	bl	8000b20 <__aeabi_dcmple>
 80125b8:	2800      	cmp	r0, #0
 80125ba:	d06f      	beq.n	801269c <_strtod_l+0xa34>
 80125bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d17a      	bne.n	80126b8 <_strtod_l+0xa50>
 80125c2:	f1ba 0f00 	cmp.w	sl, #0
 80125c6:	d158      	bne.n	801267a <_strtod_l+0xa12>
 80125c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d15a      	bne.n	8012688 <_strtod_l+0xa20>
 80125d2:	4b64      	ldr	r3, [pc, #400]	@ (8012764 <_strtod_l+0xafc>)
 80125d4:	2200      	movs	r2, #0
 80125d6:	4630      	mov	r0, r6
 80125d8:	4639      	mov	r1, r7
 80125da:	f7ee fa97 	bl	8000b0c <__aeabi_dcmplt>
 80125de:	2800      	cmp	r0, #0
 80125e0:	d159      	bne.n	8012696 <_strtod_l+0xa2e>
 80125e2:	4630      	mov	r0, r6
 80125e4:	4639      	mov	r1, r7
 80125e6:	4b60      	ldr	r3, [pc, #384]	@ (8012768 <_strtod_l+0xb00>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	f7ee f81d 	bl	8000628 <__aeabi_dmul>
 80125ee:	4606      	mov	r6, r0
 80125f0:	460f      	mov	r7, r1
 80125f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80125f6:	9606      	str	r6, [sp, #24]
 80125f8:	9307      	str	r3, [sp, #28]
 80125fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80125fe:	4d57      	ldr	r5, [pc, #348]	@ (801275c <_strtod_l+0xaf4>)
 8012600:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012606:	401d      	ands	r5, r3
 8012608:	4b58      	ldr	r3, [pc, #352]	@ (801276c <_strtod_l+0xb04>)
 801260a:	429d      	cmp	r5, r3
 801260c:	f040 80b2 	bne.w	8012774 <_strtod_l+0xb0c>
 8012610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012612:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012616:	ec4b ab10 	vmov	d0, sl, fp
 801261a:	f001 fdb1 	bl	8014180 <__ulp>
 801261e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012622:	ec51 0b10 	vmov	r0, r1, d0
 8012626:	f7ed ffff 	bl	8000628 <__aeabi_dmul>
 801262a:	4652      	mov	r2, sl
 801262c:	465b      	mov	r3, fp
 801262e:	f7ed fe45 	bl	80002bc <__adddf3>
 8012632:	460b      	mov	r3, r1
 8012634:	4949      	ldr	r1, [pc, #292]	@ (801275c <_strtod_l+0xaf4>)
 8012636:	4a4e      	ldr	r2, [pc, #312]	@ (8012770 <_strtod_l+0xb08>)
 8012638:	4019      	ands	r1, r3
 801263a:	4291      	cmp	r1, r2
 801263c:	4682      	mov	sl, r0
 801263e:	d942      	bls.n	80126c6 <_strtod_l+0xa5e>
 8012640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012642:	4b47      	ldr	r3, [pc, #284]	@ (8012760 <_strtod_l+0xaf8>)
 8012644:	429a      	cmp	r2, r3
 8012646:	d103      	bne.n	8012650 <_strtod_l+0x9e8>
 8012648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801264a:	3301      	adds	r3, #1
 801264c:	f43f ad2f 	beq.w	80120ae <_strtod_l+0x446>
 8012650:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012760 <_strtod_l+0xaf8>
 8012654:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8012658:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801265a:	9805      	ldr	r0, [sp, #20]
 801265c:	f001 fa64 	bl	8013b28 <_Bfree>
 8012660:	9805      	ldr	r0, [sp, #20]
 8012662:	4649      	mov	r1, r9
 8012664:	f001 fa60 	bl	8013b28 <_Bfree>
 8012668:	9805      	ldr	r0, [sp, #20]
 801266a:	4641      	mov	r1, r8
 801266c:	f001 fa5c 	bl	8013b28 <_Bfree>
 8012670:	9805      	ldr	r0, [sp, #20]
 8012672:	4621      	mov	r1, r4
 8012674:	f001 fa58 	bl	8013b28 <_Bfree>
 8012678:	e619      	b.n	80122ae <_strtod_l+0x646>
 801267a:	f1ba 0f01 	cmp.w	sl, #1
 801267e:	d103      	bne.n	8012688 <_strtod_l+0xa20>
 8012680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012682:	2b00      	cmp	r3, #0
 8012684:	f43f ada6 	beq.w	80121d4 <_strtod_l+0x56c>
 8012688:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012738 <_strtod_l+0xad0>
 801268c:	4f35      	ldr	r7, [pc, #212]	@ (8012764 <_strtod_l+0xafc>)
 801268e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012692:	2600      	movs	r6, #0
 8012694:	e7b1      	b.n	80125fa <_strtod_l+0x992>
 8012696:	4f34      	ldr	r7, [pc, #208]	@ (8012768 <_strtod_l+0xb00>)
 8012698:	2600      	movs	r6, #0
 801269a:	e7aa      	b.n	80125f2 <_strtod_l+0x98a>
 801269c:	4b32      	ldr	r3, [pc, #200]	@ (8012768 <_strtod_l+0xb00>)
 801269e:	4630      	mov	r0, r6
 80126a0:	4639      	mov	r1, r7
 80126a2:	2200      	movs	r2, #0
 80126a4:	f7ed ffc0 	bl	8000628 <__aeabi_dmul>
 80126a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126aa:	4606      	mov	r6, r0
 80126ac:	460f      	mov	r7, r1
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d09f      	beq.n	80125f2 <_strtod_l+0x98a>
 80126b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80126b6:	e7a0      	b.n	80125fa <_strtod_l+0x992>
 80126b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012740 <_strtod_l+0xad8>
 80126bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80126c0:	ec57 6b17 	vmov	r6, r7, d7
 80126c4:	e799      	b.n	80125fa <_strtod_l+0x992>
 80126c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80126ca:	9b08      	ldr	r3, [sp, #32]
 80126cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1c1      	bne.n	8012658 <_strtod_l+0x9f0>
 80126d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80126d8:	0d1b      	lsrs	r3, r3, #20
 80126da:	051b      	lsls	r3, r3, #20
 80126dc:	429d      	cmp	r5, r3
 80126de:	d1bb      	bne.n	8012658 <_strtod_l+0x9f0>
 80126e0:	4630      	mov	r0, r6
 80126e2:	4639      	mov	r1, r7
 80126e4:	f7ee fad8 	bl	8000c98 <__aeabi_d2lz>
 80126e8:	f7ed ff70 	bl	80005cc <__aeabi_l2d>
 80126ec:	4602      	mov	r2, r0
 80126ee:	460b      	mov	r3, r1
 80126f0:	4630      	mov	r0, r6
 80126f2:	4639      	mov	r1, r7
 80126f4:	f7ed fde0 	bl	80002b8 <__aeabi_dsub>
 80126f8:	460b      	mov	r3, r1
 80126fa:	4602      	mov	r2, r0
 80126fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012700:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012706:	ea46 060a 	orr.w	r6, r6, sl
 801270a:	431e      	orrs	r6, r3
 801270c:	d06f      	beq.n	80127ee <_strtod_l+0xb86>
 801270e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012748 <_strtod_l+0xae0>)
 8012710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012714:	f7ee f9fa 	bl	8000b0c <__aeabi_dcmplt>
 8012718:	2800      	cmp	r0, #0
 801271a:	f47f acd3 	bne.w	80120c4 <_strtod_l+0x45c>
 801271e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012750 <_strtod_l+0xae8>)
 8012720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012728:	f7ee fa0e 	bl	8000b48 <__aeabi_dcmpgt>
 801272c:	2800      	cmp	r0, #0
 801272e:	d093      	beq.n	8012658 <_strtod_l+0x9f0>
 8012730:	e4c8      	b.n	80120c4 <_strtod_l+0x45c>
 8012732:	bf00      	nop
 8012734:	f3af 8000 	nop.w
 8012738:	00000000 	.word	0x00000000
 801273c:	bff00000 	.word	0xbff00000
 8012740:	00000000 	.word	0x00000000
 8012744:	3ff00000 	.word	0x3ff00000
 8012748:	94a03595 	.word	0x94a03595
 801274c:	3fdfffff 	.word	0x3fdfffff
 8012750:	35afe535 	.word	0x35afe535
 8012754:	3fe00000 	.word	0x3fe00000
 8012758:	000fffff 	.word	0x000fffff
 801275c:	7ff00000 	.word	0x7ff00000
 8012760:	7fefffff 	.word	0x7fefffff
 8012764:	3ff00000 	.word	0x3ff00000
 8012768:	3fe00000 	.word	0x3fe00000
 801276c:	7fe00000 	.word	0x7fe00000
 8012770:	7c9fffff 	.word	0x7c9fffff
 8012774:	9b08      	ldr	r3, [sp, #32]
 8012776:	b323      	cbz	r3, 80127c2 <_strtod_l+0xb5a>
 8012778:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801277c:	d821      	bhi.n	80127c2 <_strtod_l+0xb5a>
 801277e:	a328      	add	r3, pc, #160	@ (adr r3, 8012820 <_strtod_l+0xbb8>)
 8012780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012784:	4630      	mov	r0, r6
 8012786:	4639      	mov	r1, r7
 8012788:	f7ee f9ca 	bl	8000b20 <__aeabi_dcmple>
 801278c:	b1a0      	cbz	r0, 80127b8 <_strtod_l+0xb50>
 801278e:	4639      	mov	r1, r7
 8012790:	4630      	mov	r0, r6
 8012792:	f7ee f9f9 	bl	8000b88 <__aeabi_d2uiz>
 8012796:	2801      	cmp	r0, #1
 8012798:	bf38      	it	cc
 801279a:	2001      	movcc	r0, #1
 801279c:	f7ed feca 	bl	8000534 <__aeabi_ui2d>
 80127a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127a2:	4606      	mov	r6, r0
 80127a4:	460f      	mov	r7, r1
 80127a6:	b9fb      	cbnz	r3, 80127e8 <_strtod_l+0xb80>
 80127a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80127ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80127ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80127b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80127b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80127b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80127ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80127be:	1b5b      	subs	r3, r3, r5
 80127c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80127c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80127c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80127ca:	f001 fcd9 	bl	8014180 <__ulp>
 80127ce:	4650      	mov	r0, sl
 80127d0:	ec53 2b10 	vmov	r2, r3, d0
 80127d4:	4659      	mov	r1, fp
 80127d6:	f7ed ff27 	bl	8000628 <__aeabi_dmul>
 80127da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80127de:	f7ed fd6d 	bl	80002bc <__adddf3>
 80127e2:	4682      	mov	sl, r0
 80127e4:	468b      	mov	fp, r1
 80127e6:	e770      	b.n	80126ca <_strtod_l+0xa62>
 80127e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80127ec:	e7e0      	b.n	80127b0 <_strtod_l+0xb48>
 80127ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8012828 <_strtod_l+0xbc0>)
 80127f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f4:	f7ee f98a 	bl	8000b0c <__aeabi_dcmplt>
 80127f8:	e798      	b.n	801272c <_strtod_l+0xac4>
 80127fa:	2300      	movs	r3, #0
 80127fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80127fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012802:	6013      	str	r3, [r2, #0]
 8012804:	f7ff ba6d 	b.w	8011ce2 <_strtod_l+0x7a>
 8012808:	2a65      	cmp	r2, #101	@ 0x65
 801280a:	f43f ab68 	beq.w	8011ede <_strtod_l+0x276>
 801280e:	2a45      	cmp	r2, #69	@ 0x45
 8012810:	f43f ab65 	beq.w	8011ede <_strtod_l+0x276>
 8012814:	2301      	movs	r3, #1
 8012816:	f7ff bba0 	b.w	8011f5a <_strtod_l+0x2f2>
 801281a:	bf00      	nop
 801281c:	f3af 8000 	nop.w
 8012820:	ffc00000 	.word	0xffc00000
 8012824:	41dfffff 	.word	0x41dfffff
 8012828:	94a03595 	.word	0x94a03595
 801282c:	3fcfffff 	.word	0x3fcfffff

08012830 <strtof>:
 8012830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012834:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80128f4 <strtof+0xc4>
 8012838:	4b29      	ldr	r3, [pc, #164]	@ (80128e0 <strtof+0xb0>)
 801283a:	460a      	mov	r2, r1
 801283c:	ed2d 8b02 	vpush	{d8}
 8012840:	4601      	mov	r1, r0
 8012842:	f8d8 0000 	ldr.w	r0, [r8]
 8012846:	f7ff fa0f 	bl	8011c68 <_strtod_l>
 801284a:	ec55 4b10 	vmov	r4, r5, d0
 801284e:	4622      	mov	r2, r4
 8012850:	462b      	mov	r3, r5
 8012852:	4620      	mov	r0, r4
 8012854:	4629      	mov	r1, r5
 8012856:	f7ee f981 	bl	8000b5c <__aeabi_dcmpun>
 801285a:	b190      	cbz	r0, 8012882 <strtof+0x52>
 801285c:	2d00      	cmp	r5, #0
 801285e:	4821      	ldr	r0, [pc, #132]	@ (80128e4 <strtof+0xb4>)
 8012860:	da09      	bge.n	8012876 <strtof+0x46>
 8012862:	f000 f9d9 	bl	8012c18 <nanf>
 8012866:	eeb1 8a40 	vneg.f32	s16, s0
 801286a:	eeb0 0a48 	vmov.f32	s0, s16
 801286e:	ecbd 8b02 	vpop	{d8}
 8012872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012876:	ecbd 8b02 	vpop	{d8}
 801287a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801287e:	f000 b9cb 	b.w	8012c18 <nanf>
 8012882:	4620      	mov	r0, r4
 8012884:	4629      	mov	r1, r5
 8012886:	f7ee f99f 	bl	8000bc8 <__aeabi_d2f>
 801288a:	ee08 0a10 	vmov	s16, r0
 801288e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80128e8 <strtof+0xb8>
 8012892:	eeb0 7ac8 	vabs.f32	s14, s16
 8012896:	eeb4 7a67 	vcmp.f32	s14, s15
 801289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289e:	dd11      	ble.n	80128c4 <strtof+0x94>
 80128a0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80128a4:	4b11      	ldr	r3, [pc, #68]	@ (80128ec <strtof+0xbc>)
 80128a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80128aa:	4620      	mov	r0, r4
 80128ac:	4639      	mov	r1, r7
 80128ae:	f7ee f955 	bl	8000b5c <__aeabi_dcmpun>
 80128b2:	b980      	cbnz	r0, 80128d6 <strtof+0xa6>
 80128b4:	4b0d      	ldr	r3, [pc, #52]	@ (80128ec <strtof+0xbc>)
 80128b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80128ba:	4620      	mov	r0, r4
 80128bc:	4639      	mov	r1, r7
 80128be:	f7ee f92f 	bl	8000b20 <__aeabi_dcmple>
 80128c2:	b940      	cbnz	r0, 80128d6 <strtof+0xa6>
 80128c4:	ee18 3a10 	vmov	r3, s16
 80128c8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80128cc:	d1cd      	bne.n	801286a <strtof+0x3a>
 80128ce:	4b08      	ldr	r3, [pc, #32]	@ (80128f0 <strtof+0xc0>)
 80128d0:	402b      	ands	r3, r5
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d0c9      	beq.n	801286a <strtof+0x3a>
 80128d6:	f8d8 3000 	ldr.w	r3, [r8]
 80128da:	2222      	movs	r2, #34	@ 0x22
 80128dc:	601a      	str	r2, [r3, #0]
 80128de:	e7c4      	b.n	801286a <strtof+0x3a>
 80128e0:	2000010c 	.word	0x2000010c
 80128e4:	08015522 	.word	0x08015522
 80128e8:	7f7fffff 	.word	0x7f7fffff
 80128ec:	7fefffff 	.word	0x7fefffff
 80128f0:	7ff00000 	.word	0x7ff00000
 80128f4:	20000278 	.word	0x20000278

080128f8 <_fwalk_sglue>:
 80128f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128fc:	4607      	mov	r7, r0
 80128fe:	4688      	mov	r8, r1
 8012900:	4614      	mov	r4, r2
 8012902:	2600      	movs	r6, #0
 8012904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012908:	f1b9 0901 	subs.w	r9, r9, #1
 801290c:	d505      	bpl.n	801291a <_fwalk_sglue+0x22>
 801290e:	6824      	ldr	r4, [r4, #0]
 8012910:	2c00      	cmp	r4, #0
 8012912:	d1f7      	bne.n	8012904 <_fwalk_sglue+0xc>
 8012914:	4630      	mov	r0, r6
 8012916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801291a:	89ab      	ldrh	r3, [r5, #12]
 801291c:	2b01      	cmp	r3, #1
 801291e:	d907      	bls.n	8012930 <_fwalk_sglue+0x38>
 8012920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012924:	3301      	adds	r3, #1
 8012926:	d003      	beq.n	8012930 <_fwalk_sglue+0x38>
 8012928:	4629      	mov	r1, r5
 801292a:	4638      	mov	r0, r7
 801292c:	47c0      	blx	r8
 801292e:	4306      	orrs	r6, r0
 8012930:	3568      	adds	r5, #104	@ 0x68
 8012932:	e7e9      	b.n	8012908 <_fwalk_sglue+0x10>

08012934 <memset>:
 8012934:	4402      	add	r2, r0
 8012936:	4603      	mov	r3, r0
 8012938:	4293      	cmp	r3, r2
 801293a:	d100      	bne.n	801293e <memset+0xa>
 801293c:	4770      	bx	lr
 801293e:	f803 1b01 	strb.w	r1, [r3], #1
 8012942:	e7f9      	b.n	8012938 <memset+0x4>

08012944 <strncmp>:
 8012944:	b510      	push	{r4, lr}
 8012946:	b16a      	cbz	r2, 8012964 <strncmp+0x20>
 8012948:	3901      	subs	r1, #1
 801294a:	1884      	adds	r4, r0, r2
 801294c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012954:	429a      	cmp	r2, r3
 8012956:	d103      	bne.n	8012960 <strncmp+0x1c>
 8012958:	42a0      	cmp	r0, r4
 801295a:	d001      	beq.n	8012960 <strncmp+0x1c>
 801295c:	2a00      	cmp	r2, #0
 801295e:	d1f5      	bne.n	801294c <strncmp+0x8>
 8012960:	1ad0      	subs	r0, r2, r3
 8012962:	bd10      	pop	{r4, pc}
 8012964:	4610      	mov	r0, r2
 8012966:	e7fc      	b.n	8012962 <strncmp+0x1e>

08012968 <strtok>:
 8012968:	4b16      	ldr	r3, [pc, #88]	@ (80129c4 <strtok+0x5c>)
 801296a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801296e:	681f      	ldr	r7, [r3, #0]
 8012970:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8012972:	4605      	mov	r5, r0
 8012974:	460e      	mov	r6, r1
 8012976:	b9ec      	cbnz	r4, 80129b4 <strtok+0x4c>
 8012978:	2050      	movs	r0, #80	@ 0x50
 801297a:	f7fe ffc1 	bl	8011900 <malloc>
 801297e:	4602      	mov	r2, r0
 8012980:	6478      	str	r0, [r7, #68]	@ 0x44
 8012982:	b920      	cbnz	r0, 801298e <strtok+0x26>
 8012984:	4b10      	ldr	r3, [pc, #64]	@ (80129c8 <strtok+0x60>)
 8012986:	4811      	ldr	r0, [pc, #68]	@ (80129cc <strtok+0x64>)
 8012988:	215b      	movs	r1, #91	@ 0x5b
 801298a:	f000 f94b 	bl	8012c24 <__assert_func>
 801298e:	e9c0 4400 	strd	r4, r4, [r0]
 8012992:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012996:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801299a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801299e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80129a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80129a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80129aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80129ae:	6184      	str	r4, [r0, #24]
 80129b0:	7704      	strb	r4, [r0, #28]
 80129b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80129b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80129b6:	4631      	mov	r1, r6
 80129b8:	4628      	mov	r0, r5
 80129ba:	2301      	movs	r3, #1
 80129bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129c0:	f000 b806 	b.w	80129d0 <__strtok_r>
 80129c4:	20000278 	.word	0x20000278
 80129c8:	0801546e 	.word	0x0801546e
 80129cc:	08015485 	.word	0x08015485

080129d0 <__strtok_r>:
 80129d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129d2:	4604      	mov	r4, r0
 80129d4:	b908      	cbnz	r0, 80129da <__strtok_r+0xa>
 80129d6:	6814      	ldr	r4, [r2, #0]
 80129d8:	b144      	cbz	r4, 80129ec <__strtok_r+0x1c>
 80129da:	4620      	mov	r0, r4
 80129dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80129e0:	460f      	mov	r7, r1
 80129e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80129e6:	b91e      	cbnz	r6, 80129f0 <__strtok_r+0x20>
 80129e8:	b965      	cbnz	r5, 8012a04 <__strtok_r+0x34>
 80129ea:	6015      	str	r5, [r2, #0]
 80129ec:	2000      	movs	r0, #0
 80129ee:	e005      	b.n	80129fc <__strtok_r+0x2c>
 80129f0:	42b5      	cmp	r5, r6
 80129f2:	d1f6      	bne.n	80129e2 <__strtok_r+0x12>
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1f0      	bne.n	80129da <__strtok_r+0xa>
 80129f8:	6014      	str	r4, [r2, #0]
 80129fa:	7003      	strb	r3, [r0, #0]
 80129fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129fe:	461c      	mov	r4, r3
 8012a00:	e00c      	b.n	8012a1c <__strtok_r+0x4c>
 8012a02:	b91d      	cbnz	r5, 8012a0c <__strtok_r+0x3c>
 8012a04:	4627      	mov	r7, r4
 8012a06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a0a:	460e      	mov	r6, r1
 8012a0c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012a10:	42ab      	cmp	r3, r5
 8012a12:	d1f6      	bne.n	8012a02 <__strtok_r+0x32>
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d0f2      	beq.n	80129fe <__strtok_r+0x2e>
 8012a18:	2300      	movs	r3, #0
 8012a1a:	703b      	strb	r3, [r7, #0]
 8012a1c:	6014      	str	r4, [r2, #0]
 8012a1e:	e7ed      	b.n	80129fc <__strtok_r+0x2c>

08012a20 <_raise_r>:
 8012a20:	291f      	cmp	r1, #31
 8012a22:	b538      	push	{r3, r4, r5, lr}
 8012a24:	4605      	mov	r5, r0
 8012a26:	460c      	mov	r4, r1
 8012a28:	d904      	bls.n	8012a34 <_raise_r+0x14>
 8012a2a:	2316      	movs	r3, #22
 8012a2c:	6003      	str	r3, [r0, #0]
 8012a2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a32:	bd38      	pop	{r3, r4, r5, pc}
 8012a34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012a36:	b112      	cbz	r2, 8012a3e <_raise_r+0x1e>
 8012a38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a3c:	b94b      	cbnz	r3, 8012a52 <_raise_r+0x32>
 8012a3e:	4628      	mov	r0, r5
 8012a40:	f000 f830 	bl	8012aa4 <_getpid_r>
 8012a44:	4622      	mov	r2, r4
 8012a46:	4601      	mov	r1, r0
 8012a48:	4628      	mov	r0, r5
 8012a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a4e:	f000 b817 	b.w	8012a80 <_kill_r>
 8012a52:	2b01      	cmp	r3, #1
 8012a54:	d00a      	beq.n	8012a6c <_raise_r+0x4c>
 8012a56:	1c59      	adds	r1, r3, #1
 8012a58:	d103      	bne.n	8012a62 <_raise_r+0x42>
 8012a5a:	2316      	movs	r3, #22
 8012a5c:	6003      	str	r3, [r0, #0]
 8012a5e:	2001      	movs	r0, #1
 8012a60:	e7e7      	b.n	8012a32 <_raise_r+0x12>
 8012a62:	2100      	movs	r1, #0
 8012a64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012a68:	4620      	mov	r0, r4
 8012a6a:	4798      	blx	r3
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	e7e0      	b.n	8012a32 <_raise_r+0x12>

08012a70 <raise>:
 8012a70:	4b02      	ldr	r3, [pc, #8]	@ (8012a7c <raise+0xc>)
 8012a72:	4601      	mov	r1, r0
 8012a74:	6818      	ldr	r0, [r3, #0]
 8012a76:	f7ff bfd3 	b.w	8012a20 <_raise_r>
 8012a7a:	bf00      	nop
 8012a7c:	20000278 	.word	0x20000278

08012a80 <_kill_r>:
 8012a80:	b538      	push	{r3, r4, r5, lr}
 8012a82:	4d07      	ldr	r5, [pc, #28]	@ (8012aa0 <_kill_r+0x20>)
 8012a84:	2300      	movs	r3, #0
 8012a86:	4604      	mov	r4, r0
 8012a88:	4608      	mov	r0, r1
 8012a8a:	4611      	mov	r1, r2
 8012a8c:	602b      	str	r3, [r5, #0]
 8012a8e:	f7f1 f917 	bl	8003cc0 <_kill>
 8012a92:	1c43      	adds	r3, r0, #1
 8012a94:	d102      	bne.n	8012a9c <_kill_r+0x1c>
 8012a96:	682b      	ldr	r3, [r5, #0]
 8012a98:	b103      	cbz	r3, 8012a9c <_kill_r+0x1c>
 8012a9a:	6023      	str	r3, [r4, #0]
 8012a9c:	bd38      	pop	{r3, r4, r5, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20006d60 	.word	0x20006d60

08012aa4 <_getpid_r>:
 8012aa4:	f7f1 b904 	b.w	8003cb0 <_getpid>

08012aa8 <_sbrk_r>:
 8012aa8:	b538      	push	{r3, r4, r5, lr}
 8012aaa:	4d06      	ldr	r5, [pc, #24]	@ (8012ac4 <_sbrk_r+0x1c>)
 8012aac:	2300      	movs	r3, #0
 8012aae:	4604      	mov	r4, r0
 8012ab0:	4608      	mov	r0, r1
 8012ab2:	602b      	str	r3, [r5, #0]
 8012ab4:	f7f1 f98c 	bl	8003dd0 <_sbrk>
 8012ab8:	1c43      	adds	r3, r0, #1
 8012aba:	d102      	bne.n	8012ac2 <_sbrk_r+0x1a>
 8012abc:	682b      	ldr	r3, [r5, #0]
 8012abe:	b103      	cbz	r3, 8012ac2 <_sbrk_r+0x1a>
 8012ac0:	6023      	str	r3, [r4, #0]
 8012ac2:	bd38      	pop	{r3, r4, r5, pc}
 8012ac4:	20006d60 	.word	0x20006d60

08012ac8 <__errno>:
 8012ac8:	4b01      	ldr	r3, [pc, #4]	@ (8012ad0 <__errno+0x8>)
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	20000278 	.word	0x20000278

08012ad4 <__libc_init_array>:
 8012ad4:	b570      	push	{r4, r5, r6, lr}
 8012ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8012b0c <__libc_init_array+0x38>)
 8012ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8012b10 <__libc_init_array+0x3c>)
 8012ada:	1b64      	subs	r4, r4, r5
 8012adc:	10a4      	asrs	r4, r4, #2
 8012ade:	2600      	movs	r6, #0
 8012ae0:	42a6      	cmp	r6, r4
 8012ae2:	d109      	bne.n	8012af8 <__libc_init_array+0x24>
 8012ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8012b14 <__libc_init_array+0x40>)
 8012ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8012b18 <__libc_init_array+0x44>)
 8012ae8:	f001 fff0 	bl	8014acc <_init>
 8012aec:	1b64      	subs	r4, r4, r5
 8012aee:	10a4      	asrs	r4, r4, #2
 8012af0:	2600      	movs	r6, #0
 8012af2:	42a6      	cmp	r6, r4
 8012af4:	d105      	bne.n	8012b02 <__libc_init_array+0x2e>
 8012af6:	bd70      	pop	{r4, r5, r6, pc}
 8012af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012afc:	4798      	blx	r3
 8012afe:	3601      	adds	r6, #1
 8012b00:	e7ee      	b.n	8012ae0 <__libc_init_array+0xc>
 8012b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b06:	4798      	blx	r3
 8012b08:	3601      	adds	r6, #1
 8012b0a:	e7f2      	b.n	8012af2 <__libc_init_array+0x1e>
 8012b0c:	08015878 	.word	0x08015878
 8012b10:	08015878 	.word	0x08015878
 8012b14:	08015878 	.word	0x08015878
 8012b18:	0801587c 	.word	0x0801587c

08012b1c <_reclaim_reent>:
 8012b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8012bd4 <_reclaim_reent+0xb8>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	4283      	cmp	r3, r0
 8012b22:	b570      	push	{r4, r5, r6, lr}
 8012b24:	4604      	mov	r4, r0
 8012b26:	d053      	beq.n	8012bd0 <_reclaim_reent+0xb4>
 8012b28:	69c3      	ldr	r3, [r0, #28]
 8012b2a:	b31b      	cbz	r3, 8012b74 <_reclaim_reent+0x58>
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	b163      	cbz	r3, 8012b4a <_reclaim_reent+0x2e>
 8012b30:	2500      	movs	r5, #0
 8012b32:	69e3      	ldr	r3, [r4, #28]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	5959      	ldr	r1, [r3, r5]
 8012b38:	b9b1      	cbnz	r1, 8012b68 <_reclaim_reent+0x4c>
 8012b3a:	3504      	adds	r5, #4
 8012b3c:	2d80      	cmp	r5, #128	@ 0x80
 8012b3e:	d1f8      	bne.n	8012b32 <_reclaim_reent+0x16>
 8012b40:	69e3      	ldr	r3, [r4, #28]
 8012b42:	4620      	mov	r0, r4
 8012b44:	68d9      	ldr	r1, [r3, #12]
 8012b46:	f000 f88b 	bl	8012c60 <_free_r>
 8012b4a:	69e3      	ldr	r3, [r4, #28]
 8012b4c:	6819      	ldr	r1, [r3, #0]
 8012b4e:	b111      	cbz	r1, 8012b56 <_reclaim_reent+0x3a>
 8012b50:	4620      	mov	r0, r4
 8012b52:	f000 f885 	bl	8012c60 <_free_r>
 8012b56:	69e3      	ldr	r3, [r4, #28]
 8012b58:	689d      	ldr	r5, [r3, #8]
 8012b5a:	b15d      	cbz	r5, 8012b74 <_reclaim_reent+0x58>
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	4620      	mov	r0, r4
 8012b60:	682d      	ldr	r5, [r5, #0]
 8012b62:	f000 f87d 	bl	8012c60 <_free_r>
 8012b66:	e7f8      	b.n	8012b5a <_reclaim_reent+0x3e>
 8012b68:	680e      	ldr	r6, [r1, #0]
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f000 f878 	bl	8012c60 <_free_r>
 8012b70:	4631      	mov	r1, r6
 8012b72:	e7e1      	b.n	8012b38 <_reclaim_reent+0x1c>
 8012b74:	6961      	ldr	r1, [r4, #20]
 8012b76:	b111      	cbz	r1, 8012b7e <_reclaim_reent+0x62>
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f000 f871 	bl	8012c60 <_free_r>
 8012b7e:	69e1      	ldr	r1, [r4, #28]
 8012b80:	b111      	cbz	r1, 8012b88 <_reclaim_reent+0x6c>
 8012b82:	4620      	mov	r0, r4
 8012b84:	f000 f86c 	bl	8012c60 <_free_r>
 8012b88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012b8a:	b111      	cbz	r1, 8012b92 <_reclaim_reent+0x76>
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f000 f867 	bl	8012c60 <_free_r>
 8012b92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b94:	b111      	cbz	r1, 8012b9c <_reclaim_reent+0x80>
 8012b96:	4620      	mov	r0, r4
 8012b98:	f000 f862 	bl	8012c60 <_free_r>
 8012b9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012b9e:	b111      	cbz	r1, 8012ba6 <_reclaim_reent+0x8a>
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f000 f85d 	bl	8012c60 <_free_r>
 8012ba6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012ba8:	b111      	cbz	r1, 8012bb0 <_reclaim_reent+0x94>
 8012baa:	4620      	mov	r0, r4
 8012bac:	f000 f858 	bl	8012c60 <_free_r>
 8012bb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012bb2:	b111      	cbz	r1, 8012bba <_reclaim_reent+0x9e>
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f000 f853 	bl	8012c60 <_free_r>
 8012bba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012bbc:	b111      	cbz	r1, 8012bc4 <_reclaim_reent+0xa8>
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	f000 f84e 	bl	8012c60 <_free_r>
 8012bc4:	6a23      	ldr	r3, [r4, #32]
 8012bc6:	b11b      	cbz	r3, 8012bd0 <_reclaim_reent+0xb4>
 8012bc8:	4620      	mov	r0, r4
 8012bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bce:	4718      	bx	r3
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}
 8012bd2:	bf00      	nop
 8012bd4:	20000278 	.word	0x20000278

08012bd8 <strcpy>:
 8012bd8:	4603      	mov	r3, r0
 8012bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bde:	f803 2b01 	strb.w	r2, [r3], #1
 8012be2:	2a00      	cmp	r2, #0
 8012be4:	d1f9      	bne.n	8012bda <strcpy+0x2>
 8012be6:	4770      	bx	lr

08012be8 <memcpy>:
 8012be8:	440a      	add	r2, r1
 8012bea:	4291      	cmp	r1, r2
 8012bec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012bf0:	d100      	bne.n	8012bf4 <memcpy+0xc>
 8012bf2:	4770      	bx	lr
 8012bf4:	b510      	push	{r4, lr}
 8012bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bfe:	4291      	cmp	r1, r2
 8012c00:	d1f9      	bne.n	8012bf6 <memcpy+0xe>
 8012c02:	bd10      	pop	{r4, pc}
 8012c04:	0000      	movs	r0, r0
	...

08012c08 <nan>:
 8012c08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012c10 <nan+0x8>
 8012c0c:	4770      	bx	lr
 8012c0e:	bf00      	nop
 8012c10:	00000000 	.word	0x00000000
 8012c14:	7ff80000 	.word	0x7ff80000

08012c18 <nanf>:
 8012c18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012c20 <nanf+0x8>
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	7fc00000 	.word	0x7fc00000

08012c24 <__assert_func>:
 8012c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c26:	4614      	mov	r4, r2
 8012c28:	461a      	mov	r2, r3
 8012c2a:	4b09      	ldr	r3, [pc, #36]	@ (8012c50 <__assert_func+0x2c>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4605      	mov	r5, r0
 8012c30:	68d8      	ldr	r0, [r3, #12]
 8012c32:	b14c      	cbz	r4, 8012c48 <__assert_func+0x24>
 8012c34:	4b07      	ldr	r3, [pc, #28]	@ (8012c54 <__assert_func+0x30>)
 8012c36:	9100      	str	r1, [sp, #0]
 8012c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c3c:	4906      	ldr	r1, [pc, #24]	@ (8012c58 <__assert_func+0x34>)
 8012c3e:	462b      	mov	r3, r5
 8012c40:	f001 fc20 	bl	8014484 <fiprintf>
 8012c44:	f7fe fe54 	bl	80118f0 <abort>
 8012c48:	4b04      	ldr	r3, [pc, #16]	@ (8012c5c <__assert_func+0x38>)
 8012c4a:	461c      	mov	r4, r3
 8012c4c:	e7f3      	b.n	8012c36 <__assert_func+0x12>
 8012c4e:	bf00      	nop
 8012c50:	20000278 	.word	0x20000278
 8012c54:	080154e7 	.word	0x080154e7
 8012c58:	080154f4 	.word	0x080154f4
 8012c5c:	08015522 	.word	0x08015522

08012c60 <_free_r>:
 8012c60:	b538      	push	{r3, r4, r5, lr}
 8012c62:	4605      	mov	r5, r0
 8012c64:	2900      	cmp	r1, #0
 8012c66:	d041      	beq.n	8012cec <_free_r+0x8c>
 8012c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c6c:	1f0c      	subs	r4, r1, #4
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	bfb8      	it	lt
 8012c72:	18e4      	addlt	r4, r4, r3
 8012c74:	f7fe feee 	bl	8011a54 <__malloc_lock>
 8012c78:	4a1d      	ldr	r2, [pc, #116]	@ (8012cf0 <_free_r+0x90>)
 8012c7a:	6813      	ldr	r3, [r2, #0]
 8012c7c:	b933      	cbnz	r3, 8012c8c <_free_r+0x2c>
 8012c7e:	6063      	str	r3, [r4, #4]
 8012c80:	6014      	str	r4, [r2, #0]
 8012c82:	4628      	mov	r0, r5
 8012c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c88:	f7fe beea 	b.w	8011a60 <__malloc_unlock>
 8012c8c:	42a3      	cmp	r3, r4
 8012c8e:	d908      	bls.n	8012ca2 <_free_r+0x42>
 8012c90:	6820      	ldr	r0, [r4, #0]
 8012c92:	1821      	adds	r1, r4, r0
 8012c94:	428b      	cmp	r3, r1
 8012c96:	bf01      	itttt	eq
 8012c98:	6819      	ldreq	r1, [r3, #0]
 8012c9a:	685b      	ldreq	r3, [r3, #4]
 8012c9c:	1809      	addeq	r1, r1, r0
 8012c9e:	6021      	streq	r1, [r4, #0]
 8012ca0:	e7ed      	b.n	8012c7e <_free_r+0x1e>
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	b10b      	cbz	r3, 8012cac <_free_r+0x4c>
 8012ca8:	42a3      	cmp	r3, r4
 8012caa:	d9fa      	bls.n	8012ca2 <_free_r+0x42>
 8012cac:	6811      	ldr	r1, [r2, #0]
 8012cae:	1850      	adds	r0, r2, r1
 8012cb0:	42a0      	cmp	r0, r4
 8012cb2:	d10b      	bne.n	8012ccc <_free_r+0x6c>
 8012cb4:	6820      	ldr	r0, [r4, #0]
 8012cb6:	4401      	add	r1, r0
 8012cb8:	1850      	adds	r0, r2, r1
 8012cba:	4283      	cmp	r3, r0
 8012cbc:	6011      	str	r1, [r2, #0]
 8012cbe:	d1e0      	bne.n	8012c82 <_free_r+0x22>
 8012cc0:	6818      	ldr	r0, [r3, #0]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	6053      	str	r3, [r2, #4]
 8012cc6:	4408      	add	r0, r1
 8012cc8:	6010      	str	r0, [r2, #0]
 8012cca:	e7da      	b.n	8012c82 <_free_r+0x22>
 8012ccc:	d902      	bls.n	8012cd4 <_free_r+0x74>
 8012cce:	230c      	movs	r3, #12
 8012cd0:	602b      	str	r3, [r5, #0]
 8012cd2:	e7d6      	b.n	8012c82 <_free_r+0x22>
 8012cd4:	6820      	ldr	r0, [r4, #0]
 8012cd6:	1821      	adds	r1, r4, r0
 8012cd8:	428b      	cmp	r3, r1
 8012cda:	bf04      	itt	eq
 8012cdc:	6819      	ldreq	r1, [r3, #0]
 8012cde:	685b      	ldreq	r3, [r3, #4]
 8012ce0:	6063      	str	r3, [r4, #4]
 8012ce2:	bf04      	itt	eq
 8012ce4:	1809      	addeq	r1, r1, r0
 8012ce6:	6021      	streq	r1, [r4, #0]
 8012ce8:	6054      	str	r4, [r2, #4]
 8012cea:	e7ca      	b.n	8012c82 <_free_r+0x22>
 8012cec:	bd38      	pop	{r3, r4, r5, pc}
 8012cee:	bf00      	nop
 8012cf0:	20006c20 	.word	0x20006c20

08012cf4 <rshift>:
 8012cf4:	6903      	ldr	r3, [r0, #16]
 8012cf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012cfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012d02:	f100 0414 	add.w	r4, r0, #20
 8012d06:	dd45      	ble.n	8012d94 <rshift+0xa0>
 8012d08:	f011 011f 	ands.w	r1, r1, #31
 8012d0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012d10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012d14:	d10c      	bne.n	8012d30 <rshift+0x3c>
 8012d16:	f100 0710 	add.w	r7, r0, #16
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	42b1      	cmp	r1, r6
 8012d1e:	d334      	bcc.n	8012d8a <rshift+0x96>
 8012d20:	1a9b      	subs	r3, r3, r2
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	1eea      	subs	r2, r5, #3
 8012d26:	4296      	cmp	r6, r2
 8012d28:	bf38      	it	cc
 8012d2a:	2300      	movcc	r3, #0
 8012d2c:	4423      	add	r3, r4
 8012d2e:	e015      	b.n	8012d5c <rshift+0x68>
 8012d30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012d34:	f1c1 0820 	rsb	r8, r1, #32
 8012d38:	40cf      	lsrs	r7, r1
 8012d3a:	f105 0e04 	add.w	lr, r5, #4
 8012d3e:	46a1      	mov	r9, r4
 8012d40:	4576      	cmp	r6, lr
 8012d42:	46f4      	mov	ip, lr
 8012d44:	d815      	bhi.n	8012d72 <rshift+0x7e>
 8012d46:	1a9a      	subs	r2, r3, r2
 8012d48:	0092      	lsls	r2, r2, #2
 8012d4a:	3a04      	subs	r2, #4
 8012d4c:	3501      	adds	r5, #1
 8012d4e:	42ae      	cmp	r6, r5
 8012d50:	bf38      	it	cc
 8012d52:	2200      	movcc	r2, #0
 8012d54:	18a3      	adds	r3, r4, r2
 8012d56:	50a7      	str	r7, [r4, r2]
 8012d58:	b107      	cbz	r7, 8012d5c <rshift+0x68>
 8012d5a:	3304      	adds	r3, #4
 8012d5c:	1b1a      	subs	r2, r3, r4
 8012d5e:	42a3      	cmp	r3, r4
 8012d60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d64:	bf08      	it	eq
 8012d66:	2300      	moveq	r3, #0
 8012d68:	6102      	str	r2, [r0, #16]
 8012d6a:	bf08      	it	eq
 8012d6c:	6143      	streq	r3, [r0, #20]
 8012d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d72:	f8dc c000 	ldr.w	ip, [ip]
 8012d76:	fa0c fc08 	lsl.w	ip, ip, r8
 8012d7a:	ea4c 0707 	orr.w	r7, ip, r7
 8012d7e:	f849 7b04 	str.w	r7, [r9], #4
 8012d82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012d86:	40cf      	lsrs	r7, r1
 8012d88:	e7da      	b.n	8012d40 <rshift+0x4c>
 8012d8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8012d8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012d92:	e7c3      	b.n	8012d1c <rshift+0x28>
 8012d94:	4623      	mov	r3, r4
 8012d96:	e7e1      	b.n	8012d5c <rshift+0x68>

08012d98 <__hexdig_fun>:
 8012d98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012d9c:	2b09      	cmp	r3, #9
 8012d9e:	d802      	bhi.n	8012da6 <__hexdig_fun+0xe>
 8012da0:	3820      	subs	r0, #32
 8012da2:	b2c0      	uxtb	r0, r0
 8012da4:	4770      	bx	lr
 8012da6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012daa:	2b05      	cmp	r3, #5
 8012dac:	d801      	bhi.n	8012db2 <__hexdig_fun+0x1a>
 8012dae:	3847      	subs	r0, #71	@ 0x47
 8012db0:	e7f7      	b.n	8012da2 <__hexdig_fun+0xa>
 8012db2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012db6:	2b05      	cmp	r3, #5
 8012db8:	d801      	bhi.n	8012dbe <__hexdig_fun+0x26>
 8012dba:	3827      	subs	r0, #39	@ 0x27
 8012dbc:	e7f1      	b.n	8012da2 <__hexdig_fun+0xa>
 8012dbe:	2000      	movs	r0, #0
 8012dc0:	4770      	bx	lr
	...

08012dc4 <__gethex>:
 8012dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc8:	b085      	sub	sp, #20
 8012dca:	468a      	mov	sl, r1
 8012dcc:	9302      	str	r3, [sp, #8]
 8012dce:	680b      	ldr	r3, [r1, #0]
 8012dd0:	9001      	str	r0, [sp, #4]
 8012dd2:	4690      	mov	r8, r2
 8012dd4:	1c9c      	adds	r4, r3, #2
 8012dd6:	46a1      	mov	r9, r4
 8012dd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012ddc:	2830      	cmp	r0, #48	@ 0x30
 8012dde:	d0fa      	beq.n	8012dd6 <__gethex+0x12>
 8012de0:	eba9 0303 	sub.w	r3, r9, r3
 8012de4:	f1a3 0b02 	sub.w	fp, r3, #2
 8012de8:	f7ff ffd6 	bl	8012d98 <__hexdig_fun>
 8012dec:	4605      	mov	r5, r0
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d168      	bne.n	8012ec4 <__gethex+0x100>
 8012df2:	49a0      	ldr	r1, [pc, #640]	@ (8013074 <__gethex+0x2b0>)
 8012df4:	2201      	movs	r2, #1
 8012df6:	4648      	mov	r0, r9
 8012df8:	f7ff fda4 	bl	8012944 <strncmp>
 8012dfc:	4607      	mov	r7, r0
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	d167      	bne.n	8012ed2 <__gethex+0x10e>
 8012e02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012e06:	4626      	mov	r6, r4
 8012e08:	f7ff ffc6 	bl	8012d98 <__hexdig_fun>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d062      	beq.n	8012ed6 <__gethex+0x112>
 8012e10:	4623      	mov	r3, r4
 8012e12:	7818      	ldrb	r0, [r3, #0]
 8012e14:	2830      	cmp	r0, #48	@ 0x30
 8012e16:	4699      	mov	r9, r3
 8012e18:	f103 0301 	add.w	r3, r3, #1
 8012e1c:	d0f9      	beq.n	8012e12 <__gethex+0x4e>
 8012e1e:	f7ff ffbb 	bl	8012d98 <__hexdig_fun>
 8012e22:	fab0 f580 	clz	r5, r0
 8012e26:	096d      	lsrs	r5, r5, #5
 8012e28:	f04f 0b01 	mov.w	fp, #1
 8012e2c:	464a      	mov	r2, r9
 8012e2e:	4616      	mov	r6, r2
 8012e30:	3201      	adds	r2, #1
 8012e32:	7830      	ldrb	r0, [r6, #0]
 8012e34:	f7ff ffb0 	bl	8012d98 <__hexdig_fun>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	d1f8      	bne.n	8012e2e <__gethex+0x6a>
 8012e3c:	498d      	ldr	r1, [pc, #564]	@ (8013074 <__gethex+0x2b0>)
 8012e3e:	2201      	movs	r2, #1
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7ff fd7f 	bl	8012944 <strncmp>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	d13f      	bne.n	8012eca <__gethex+0x106>
 8012e4a:	b944      	cbnz	r4, 8012e5e <__gethex+0x9a>
 8012e4c:	1c74      	adds	r4, r6, #1
 8012e4e:	4622      	mov	r2, r4
 8012e50:	4616      	mov	r6, r2
 8012e52:	3201      	adds	r2, #1
 8012e54:	7830      	ldrb	r0, [r6, #0]
 8012e56:	f7ff ff9f 	bl	8012d98 <__hexdig_fun>
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d1f8      	bne.n	8012e50 <__gethex+0x8c>
 8012e5e:	1ba4      	subs	r4, r4, r6
 8012e60:	00a7      	lsls	r7, r4, #2
 8012e62:	7833      	ldrb	r3, [r6, #0]
 8012e64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012e68:	2b50      	cmp	r3, #80	@ 0x50
 8012e6a:	d13e      	bne.n	8012eea <__gethex+0x126>
 8012e6c:	7873      	ldrb	r3, [r6, #1]
 8012e6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012e70:	d033      	beq.n	8012eda <__gethex+0x116>
 8012e72:	2b2d      	cmp	r3, #45	@ 0x2d
 8012e74:	d034      	beq.n	8012ee0 <__gethex+0x11c>
 8012e76:	1c71      	adds	r1, r6, #1
 8012e78:	2400      	movs	r4, #0
 8012e7a:	7808      	ldrb	r0, [r1, #0]
 8012e7c:	f7ff ff8c 	bl	8012d98 <__hexdig_fun>
 8012e80:	1e43      	subs	r3, r0, #1
 8012e82:	b2db      	uxtb	r3, r3
 8012e84:	2b18      	cmp	r3, #24
 8012e86:	d830      	bhi.n	8012eea <__gethex+0x126>
 8012e88:	f1a0 0210 	sub.w	r2, r0, #16
 8012e8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012e90:	f7ff ff82 	bl	8012d98 <__hexdig_fun>
 8012e94:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8012e98:	fa5f fc8c 	uxtb.w	ip, ip
 8012e9c:	f1bc 0f18 	cmp.w	ip, #24
 8012ea0:	f04f 030a 	mov.w	r3, #10
 8012ea4:	d91e      	bls.n	8012ee4 <__gethex+0x120>
 8012ea6:	b104      	cbz	r4, 8012eaa <__gethex+0xe6>
 8012ea8:	4252      	negs	r2, r2
 8012eaa:	4417      	add	r7, r2
 8012eac:	f8ca 1000 	str.w	r1, [sl]
 8012eb0:	b1ed      	cbz	r5, 8012eee <__gethex+0x12a>
 8012eb2:	f1bb 0f00 	cmp.w	fp, #0
 8012eb6:	bf0c      	ite	eq
 8012eb8:	2506      	moveq	r5, #6
 8012eba:	2500      	movne	r5, #0
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	b005      	add	sp, #20
 8012ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec4:	2500      	movs	r5, #0
 8012ec6:	462c      	mov	r4, r5
 8012ec8:	e7b0      	b.n	8012e2c <__gethex+0x68>
 8012eca:	2c00      	cmp	r4, #0
 8012ecc:	d1c7      	bne.n	8012e5e <__gethex+0x9a>
 8012ece:	4627      	mov	r7, r4
 8012ed0:	e7c7      	b.n	8012e62 <__gethex+0x9e>
 8012ed2:	464e      	mov	r6, r9
 8012ed4:	462f      	mov	r7, r5
 8012ed6:	2501      	movs	r5, #1
 8012ed8:	e7c3      	b.n	8012e62 <__gethex+0x9e>
 8012eda:	2400      	movs	r4, #0
 8012edc:	1cb1      	adds	r1, r6, #2
 8012ede:	e7cc      	b.n	8012e7a <__gethex+0xb6>
 8012ee0:	2401      	movs	r4, #1
 8012ee2:	e7fb      	b.n	8012edc <__gethex+0x118>
 8012ee4:	fb03 0002 	mla	r0, r3, r2, r0
 8012ee8:	e7ce      	b.n	8012e88 <__gethex+0xc4>
 8012eea:	4631      	mov	r1, r6
 8012eec:	e7de      	b.n	8012eac <__gethex+0xe8>
 8012eee:	eba6 0309 	sub.w	r3, r6, r9
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	4629      	mov	r1, r5
 8012ef6:	2b07      	cmp	r3, #7
 8012ef8:	dc0a      	bgt.n	8012f10 <__gethex+0x14c>
 8012efa:	9801      	ldr	r0, [sp, #4]
 8012efc:	f000 fdd4 	bl	8013aa8 <_Balloc>
 8012f00:	4604      	mov	r4, r0
 8012f02:	b940      	cbnz	r0, 8012f16 <__gethex+0x152>
 8012f04:	4b5c      	ldr	r3, [pc, #368]	@ (8013078 <__gethex+0x2b4>)
 8012f06:	4602      	mov	r2, r0
 8012f08:	21e4      	movs	r1, #228	@ 0xe4
 8012f0a:	485c      	ldr	r0, [pc, #368]	@ (801307c <__gethex+0x2b8>)
 8012f0c:	f7ff fe8a 	bl	8012c24 <__assert_func>
 8012f10:	3101      	adds	r1, #1
 8012f12:	105b      	asrs	r3, r3, #1
 8012f14:	e7ef      	b.n	8012ef6 <__gethex+0x132>
 8012f16:	f100 0a14 	add.w	sl, r0, #20
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	4655      	mov	r5, sl
 8012f1e:	469b      	mov	fp, r3
 8012f20:	45b1      	cmp	r9, r6
 8012f22:	d337      	bcc.n	8012f94 <__gethex+0x1d0>
 8012f24:	f845 bb04 	str.w	fp, [r5], #4
 8012f28:	eba5 050a 	sub.w	r5, r5, sl
 8012f2c:	10ad      	asrs	r5, r5, #2
 8012f2e:	6125      	str	r5, [r4, #16]
 8012f30:	4658      	mov	r0, fp
 8012f32:	f000 feab 	bl	8013c8c <__hi0bits>
 8012f36:	016d      	lsls	r5, r5, #5
 8012f38:	f8d8 6000 	ldr.w	r6, [r8]
 8012f3c:	1a2d      	subs	r5, r5, r0
 8012f3e:	42b5      	cmp	r5, r6
 8012f40:	dd54      	ble.n	8012fec <__gethex+0x228>
 8012f42:	1bad      	subs	r5, r5, r6
 8012f44:	4629      	mov	r1, r5
 8012f46:	4620      	mov	r0, r4
 8012f48:	f001 fa37 	bl	80143ba <__any_on>
 8012f4c:	4681      	mov	r9, r0
 8012f4e:	b178      	cbz	r0, 8012f70 <__gethex+0x1ac>
 8012f50:	1e6b      	subs	r3, r5, #1
 8012f52:	1159      	asrs	r1, r3, #5
 8012f54:	f003 021f 	and.w	r2, r3, #31
 8012f58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012f5c:	f04f 0901 	mov.w	r9, #1
 8012f60:	fa09 f202 	lsl.w	r2, r9, r2
 8012f64:	420a      	tst	r2, r1
 8012f66:	d003      	beq.n	8012f70 <__gethex+0x1ac>
 8012f68:	454b      	cmp	r3, r9
 8012f6a:	dc36      	bgt.n	8012fda <__gethex+0x216>
 8012f6c:	f04f 0902 	mov.w	r9, #2
 8012f70:	4629      	mov	r1, r5
 8012f72:	4620      	mov	r0, r4
 8012f74:	f7ff febe 	bl	8012cf4 <rshift>
 8012f78:	442f      	add	r7, r5
 8012f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012f7e:	42bb      	cmp	r3, r7
 8012f80:	da42      	bge.n	8013008 <__gethex+0x244>
 8012f82:	9801      	ldr	r0, [sp, #4]
 8012f84:	4621      	mov	r1, r4
 8012f86:	f000 fdcf 	bl	8013b28 <_Bfree>
 8012f8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	6013      	str	r3, [r2, #0]
 8012f90:	25a3      	movs	r5, #163	@ 0xa3
 8012f92:	e793      	b.n	8012ebc <__gethex+0xf8>
 8012f94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012f98:	2a2e      	cmp	r2, #46	@ 0x2e
 8012f9a:	d012      	beq.n	8012fc2 <__gethex+0x1fe>
 8012f9c:	2b20      	cmp	r3, #32
 8012f9e:	d104      	bne.n	8012faa <__gethex+0x1e6>
 8012fa0:	f845 bb04 	str.w	fp, [r5], #4
 8012fa4:	f04f 0b00 	mov.w	fp, #0
 8012fa8:	465b      	mov	r3, fp
 8012faa:	7830      	ldrb	r0, [r6, #0]
 8012fac:	9303      	str	r3, [sp, #12]
 8012fae:	f7ff fef3 	bl	8012d98 <__hexdig_fun>
 8012fb2:	9b03      	ldr	r3, [sp, #12]
 8012fb4:	f000 000f 	and.w	r0, r0, #15
 8012fb8:	4098      	lsls	r0, r3
 8012fba:	ea4b 0b00 	orr.w	fp, fp, r0
 8012fbe:	3304      	adds	r3, #4
 8012fc0:	e7ae      	b.n	8012f20 <__gethex+0x15c>
 8012fc2:	45b1      	cmp	r9, r6
 8012fc4:	d8ea      	bhi.n	8012f9c <__gethex+0x1d8>
 8012fc6:	492b      	ldr	r1, [pc, #172]	@ (8013074 <__gethex+0x2b0>)
 8012fc8:	9303      	str	r3, [sp, #12]
 8012fca:	2201      	movs	r2, #1
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f7ff fcb9 	bl	8012944 <strncmp>
 8012fd2:	9b03      	ldr	r3, [sp, #12]
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d1e1      	bne.n	8012f9c <__gethex+0x1d8>
 8012fd8:	e7a2      	b.n	8012f20 <__gethex+0x15c>
 8012fda:	1ea9      	subs	r1, r5, #2
 8012fdc:	4620      	mov	r0, r4
 8012fde:	f001 f9ec 	bl	80143ba <__any_on>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d0c2      	beq.n	8012f6c <__gethex+0x1a8>
 8012fe6:	f04f 0903 	mov.w	r9, #3
 8012fea:	e7c1      	b.n	8012f70 <__gethex+0x1ac>
 8012fec:	da09      	bge.n	8013002 <__gethex+0x23e>
 8012fee:	1b75      	subs	r5, r6, r5
 8012ff0:	4621      	mov	r1, r4
 8012ff2:	9801      	ldr	r0, [sp, #4]
 8012ff4:	462a      	mov	r2, r5
 8012ff6:	f000 ffa7 	bl	8013f48 <__lshift>
 8012ffa:	1b7f      	subs	r7, r7, r5
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	f100 0a14 	add.w	sl, r0, #20
 8013002:	f04f 0900 	mov.w	r9, #0
 8013006:	e7b8      	b.n	8012f7a <__gethex+0x1b6>
 8013008:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801300c:	42bd      	cmp	r5, r7
 801300e:	dd6f      	ble.n	80130f0 <__gethex+0x32c>
 8013010:	1bed      	subs	r5, r5, r7
 8013012:	42ae      	cmp	r6, r5
 8013014:	dc34      	bgt.n	8013080 <__gethex+0x2bc>
 8013016:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801301a:	2b02      	cmp	r3, #2
 801301c:	d022      	beq.n	8013064 <__gethex+0x2a0>
 801301e:	2b03      	cmp	r3, #3
 8013020:	d024      	beq.n	801306c <__gethex+0x2a8>
 8013022:	2b01      	cmp	r3, #1
 8013024:	d115      	bne.n	8013052 <__gethex+0x28e>
 8013026:	42ae      	cmp	r6, r5
 8013028:	d113      	bne.n	8013052 <__gethex+0x28e>
 801302a:	2e01      	cmp	r6, #1
 801302c:	d10b      	bne.n	8013046 <__gethex+0x282>
 801302e:	9a02      	ldr	r2, [sp, #8]
 8013030:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013034:	6013      	str	r3, [r2, #0]
 8013036:	2301      	movs	r3, #1
 8013038:	6123      	str	r3, [r4, #16]
 801303a:	f8ca 3000 	str.w	r3, [sl]
 801303e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013040:	2562      	movs	r5, #98	@ 0x62
 8013042:	601c      	str	r4, [r3, #0]
 8013044:	e73a      	b.n	8012ebc <__gethex+0xf8>
 8013046:	1e71      	subs	r1, r6, #1
 8013048:	4620      	mov	r0, r4
 801304a:	f001 f9b6 	bl	80143ba <__any_on>
 801304e:	2800      	cmp	r0, #0
 8013050:	d1ed      	bne.n	801302e <__gethex+0x26a>
 8013052:	9801      	ldr	r0, [sp, #4]
 8013054:	4621      	mov	r1, r4
 8013056:	f000 fd67 	bl	8013b28 <_Bfree>
 801305a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801305c:	2300      	movs	r3, #0
 801305e:	6013      	str	r3, [r2, #0]
 8013060:	2550      	movs	r5, #80	@ 0x50
 8013062:	e72b      	b.n	8012ebc <__gethex+0xf8>
 8013064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1f3      	bne.n	8013052 <__gethex+0x28e>
 801306a:	e7e0      	b.n	801302e <__gethex+0x26a>
 801306c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801306e:	2b00      	cmp	r3, #0
 8013070:	d1dd      	bne.n	801302e <__gethex+0x26a>
 8013072:	e7ee      	b.n	8013052 <__gethex+0x28e>
 8013074:	08015460 	.word	0x08015460
 8013078:	08015523 	.word	0x08015523
 801307c:	08015534 	.word	0x08015534
 8013080:	1e6f      	subs	r7, r5, #1
 8013082:	f1b9 0f00 	cmp.w	r9, #0
 8013086:	d130      	bne.n	80130ea <__gethex+0x326>
 8013088:	b127      	cbz	r7, 8013094 <__gethex+0x2d0>
 801308a:	4639      	mov	r1, r7
 801308c:	4620      	mov	r0, r4
 801308e:	f001 f994 	bl	80143ba <__any_on>
 8013092:	4681      	mov	r9, r0
 8013094:	117a      	asrs	r2, r7, #5
 8013096:	2301      	movs	r3, #1
 8013098:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801309c:	f007 071f 	and.w	r7, r7, #31
 80130a0:	40bb      	lsls	r3, r7
 80130a2:	4213      	tst	r3, r2
 80130a4:	4629      	mov	r1, r5
 80130a6:	4620      	mov	r0, r4
 80130a8:	bf18      	it	ne
 80130aa:	f049 0902 	orrne.w	r9, r9, #2
 80130ae:	f7ff fe21 	bl	8012cf4 <rshift>
 80130b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80130b6:	1b76      	subs	r6, r6, r5
 80130b8:	2502      	movs	r5, #2
 80130ba:	f1b9 0f00 	cmp.w	r9, #0
 80130be:	d047      	beq.n	8013150 <__gethex+0x38c>
 80130c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130c4:	2b02      	cmp	r3, #2
 80130c6:	d015      	beq.n	80130f4 <__gethex+0x330>
 80130c8:	2b03      	cmp	r3, #3
 80130ca:	d017      	beq.n	80130fc <__gethex+0x338>
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d109      	bne.n	80130e4 <__gethex+0x320>
 80130d0:	f019 0f02 	tst.w	r9, #2
 80130d4:	d006      	beq.n	80130e4 <__gethex+0x320>
 80130d6:	f8da 3000 	ldr.w	r3, [sl]
 80130da:	ea49 0903 	orr.w	r9, r9, r3
 80130de:	f019 0f01 	tst.w	r9, #1
 80130e2:	d10e      	bne.n	8013102 <__gethex+0x33e>
 80130e4:	f045 0510 	orr.w	r5, r5, #16
 80130e8:	e032      	b.n	8013150 <__gethex+0x38c>
 80130ea:	f04f 0901 	mov.w	r9, #1
 80130ee:	e7d1      	b.n	8013094 <__gethex+0x2d0>
 80130f0:	2501      	movs	r5, #1
 80130f2:	e7e2      	b.n	80130ba <__gethex+0x2f6>
 80130f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130f6:	f1c3 0301 	rsb	r3, r3, #1
 80130fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80130fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d0f0      	beq.n	80130e4 <__gethex+0x320>
 8013102:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013106:	f104 0314 	add.w	r3, r4, #20
 801310a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801310e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013112:	f04f 0c00 	mov.w	ip, #0
 8013116:	4618      	mov	r0, r3
 8013118:	f853 2b04 	ldr.w	r2, [r3], #4
 801311c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8013120:	d01b      	beq.n	801315a <__gethex+0x396>
 8013122:	3201      	adds	r2, #1
 8013124:	6002      	str	r2, [r0, #0]
 8013126:	2d02      	cmp	r5, #2
 8013128:	f104 0314 	add.w	r3, r4, #20
 801312c:	d13c      	bne.n	80131a8 <__gethex+0x3e4>
 801312e:	f8d8 2000 	ldr.w	r2, [r8]
 8013132:	3a01      	subs	r2, #1
 8013134:	42b2      	cmp	r2, r6
 8013136:	d109      	bne.n	801314c <__gethex+0x388>
 8013138:	1171      	asrs	r1, r6, #5
 801313a:	2201      	movs	r2, #1
 801313c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013140:	f006 061f 	and.w	r6, r6, #31
 8013144:	fa02 f606 	lsl.w	r6, r2, r6
 8013148:	421e      	tst	r6, r3
 801314a:	d13a      	bne.n	80131c2 <__gethex+0x3fe>
 801314c:	f045 0520 	orr.w	r5, r5, #32
 8013150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013152:	601c      	str	r4, [r3, #0]
 8013154:	9b02      	ldr	r3, [sp, #8]
 8013156:	601f      	str	r7, [r3, #0]
 8013158:	e6b0      	b.n	8012ebc <__gethex+0xf8>
 801315a:	4299      	cmp	r1, r3
 801315c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013160:	d8d9      	bhi.n	8013116 <__gethex+0x352>
 8013162:	68a3      	ldr	r3, [r4, #8]
 8013164:	459b      	cmp	fp, r3
 8013166:	db17      	blt.n	8013198 <__gethex+0x3d4>
 8013168:	6861      	ldr	r1, [r4, #4]
 801316a:	9801      	ldr	r0, [sp, #4]
 801316c:	3101      	adds	r1, #1
 801316e:	f000 fc9b 	bl	8013aa8 <_Balloc>
 8013172:	4681      	mov	r9, r0
 8013174:	b918      	cbnz	r0, 801317e <__gethex+0x3ba>
 8013176:	4b1a      	ldr	r3, [pc, #104]	@ (80131e0 <__gethex+0x41c>)
 8013178:	4602      	mov	r2, r0
 801317a:	2184      	movs	r1, #132	@ 0x84
 801317c:	e6c5      	b.n	8012f0a <__gethex+0x146>
 801317e:	6922      	ldr	r2, [r4, #16]
 8013180:	3202      	adds	r2, #2
 8013182:	f104 010c 	add.w	r1, r4, #12
 8013186:	0092      	lsls	r2, r2, #2
 8013188:	300c      	adds	r0, #12
 801318a:	f7ff fd2d 	bl	8012be8 <memcpy>
 801318e:	4621      	mov	r1, r4
 8013190:	9801      	ldr	r0, [sp, #4]
 8013192:	f000 fcc9 	bl	8013b28 <_Bfree>
 8013196:	464c      	mov	r4, r9
 8013198:	6923      	ldr	r3, [r4, #16]
 801319a:	1c5a      	adds	r2, r3, #1
 801319c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80131a0:	6122      	str	r2, [r4, #16]
 80131a2:	2201      	movs	r2, #1
 80131a4:	615a      	str	r2, [r3, #20]
 80131a6:	e7be      	b.n	8013126 <__gethex+0x362>
 80131a8:	6922      	ldr	r2, [r4, #16]
 80131aa:	455a      	cmp	r2, fp
 80131ac:	dd0b      	ble.n	80131c6 <__gethex+0x402>
 80131ae:	2101      	movs	r1, #1
 80131b0:	4620      	mov	r0, r4
 80131b2:	f7ff fd9f 	bl	8012cf4 <rshift>
 80131b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131ba:	3701      	adds	r7, #1
 80131bc:	42bb      	cmp	r3, r7
 80131be:	f6ff aee0 	blt.w	8012f82 <__gethex+0x1be>
 80131c2:	2501      	movs	r5, #1
 80131c4:	e7c2      	b.n	801314c <__gethex+0x388>
 80131c6:	f016 061f 	ands.w	r6, r6, #31
 80131ca:	d0fa      	beq.n	80131c2 <__gethex+0x3fe>
 80131cc:	4453      	add	r3, sl
 80131ce:	f1c6 0620 	rsb	r6, r6, #32
 80131d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80131d6:	f000 fd59 	bl	8013c8c <__hi0bits>
 80131da:	42b0      	cmp	r0, r6
 80131dc:	dbe7      	blt.n	80131ae <__gethex+0x3ea>
 80131de:	e7f0      	b.n	80131c2 <__gethex+0x3fe>
 80131e0:	08015523 	.word	0x08015523

080131e4 <L_shift>:
 80131e4:	f1c2 0208 	rsb	r2, r2, #8
 80131e8:	0092      	lsls	r2, r2, #2
 80131ea:	b570      	push	{r4, r5, r6, lr}
 80131ec:	f1c2 0620 	rsb	r6, r2, #32
 80131f0:	6843      	ldr	r3, [r0, #4]
 80131f2:	6804      	ldr	r4, [r0, #0]
 80131f4:	fa03 f506 	lsl.w	r5, r3, r6
 80131f8:	432c      	orrs	r4, r5
 80131fa:	40d3      	lsrs	r3, r2
 80131fc:	6004      	str	r4, [r0, #0]
 80131fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8013202:	4288      	cmp	r0, r1
 8013204:	d3f4      	bcc.n	80131f0 <L_shift+0xc>
 8013206:	bd70      	pop	{r4, r5, r6, pc}

08013208 <__match>:
 8013208:	b530      	push	{r4, r5, lr}
 801320a:	6803      	ldr	r3, [r0, #0]
 801320c:	3301      	adds	r3, #1
 801320e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013212:	b914      	cbnz	r4, 801321a <__match+0x12>
 8013214:	6003      	str	r3, [r0, #0]
 8013216:	2001      	movs	r0, #1
 8013218:	bd30      	pop	{r4, r5, pc}
 801321a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801321e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013222:	2d19      	cmp	r5, #25
 8013224:	bf98      	it	ls
 8013226:	3220      	addls	r2, #32
 8013228:	42a2      	cmp	r2, r4
 801322a:	d0f0      	beq.n	801320e <__match+0x6>
 801322c:	2000      	movs	r0, #0
 801322e:	e7f3      	b.n	8013218 <__match+0x10>

08013230 <__hexnan>:
 8013230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013234:	680b      	ldr	r3, [r1, #0]
 8013236:	6801      	ldr	r1, [r0, #0]
 8013238:	115e      	asrs	r6, r3, #5
 801323a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801323e:	f013 031f 	ands.w	r3, r3, #31
 8013242:	b087      	sub	sp, #28
 8013244:	bf18      	it	ne
 8013246:	3604      	addne	r6, #4
 8013248:	2500      	movs	r5, #0
 801324a:	1f37      	subs	r7, r6, #4
 801324c:	4682      	mov	sl, r0
 801324e:	4690      	mov	r8, r2
 8013250:	9301      	str	r3, [sp, #4]
 8013252:	f846 5c04 	str.w	r5, [r6, #-4]
 8013256:	46b9      	mov	r9, r7
 8013258:	463c      	mov	r4, r7
 801325a:	9502      	str	r5, [sp, #8]
 801325c:	46ab      	mov	fp, r5
 801325e:	784a      	ldrb	r2, [r1, #1]
 8013260:	1c4b      	adds	r3, r1, #1
 8013262:	9303      	str	r3, [sp, #12]
 8013264:	b342      	cbz	r2, 80132b8 <__hexnan+0x88>
 8013266:	4610      	mov	r0, r2
 8013268:	9105      	str	r1, [sp, #20]
 801326a:	9204      	str	r2, [sp, #16]
 801326c:	f7ff fd94 	bl	8012d98 <__hexdig_fun>
 8013270:	2800      	cmp	r0, #0
 8013272:	d151      	bne.n	8013318 <__hexnan+0xe8>
 8013274:	9a04      	ldr	r2, [sp, #16]
 8013276:	9905      	ldr	r1, [sp, #20]
 8013278:	2a20      	cmp	r2, #32
 801327a:	d818      	bhi.n	80132ae <__hexnan+0x7e>
 801327c:	9b02      	ldr	r3, [sp, #8]
 801327e:	459b      	cmp	fp, r3
 8013280:	dd13      	ble.n	80132aa <__hexnan+0x7a>
 8013282:	454c      	cmp	r4, r9
 8013284:	d206      	bcs.n	8013294 <__hexnan+0x64>
 8013286:	2d07      	cmp	r5, #7
 8013288:	dc04      	bgt.n	8013294 <__hexnan+0x64>
 801328a:	462a      	mov	r2, r5
 801328c:	4649      	mov	r1, r9
 801328e:	4620      	mov	r0, r4
 8013290:	f7ff ffa8 	bl	80131e4 <L_shift>
 8013294:	4544      	cmp	r4, r8
 8013296:	d952      	bls.n	801333e <__hexnan+0x10e>
 8013298:	2300      	movs	r3, #0
 801329a:	f1a4 0904 	sub.w	r9, r4, #4
 801329e:	f844 3c04 	str.w	r3, [r4, #-4]
 80132a2:	f8cd b008 	str.w	fp, [sp, #8]
 80132a6:	464c      	mov	r4, r9
 80132a8:	461d      	mov	r5, r3
 80132aa:	9903      	ldr	r1, [sp, #12]
 80132ac:	e7d7      	b.n	801325e <__hexnan+0x2e>
 80132ae:	2a29      	cmp	r2, #41	@ 0x29
 80132b0:	d157      	bne.n	8013362 <__hexnan+0x132>
 80132b2:	3102      	adds	r1, #2
 80132b4:	f8ca 1000 	str.w	r1, [sl]
 80132b8:	f1bb 0f00 	cmp.w	fp, #0
 80132bc:	d051      	beq.n	8013362 <__hexnan+0x132>
 80132be:	454c      	cmp	r4, r9
 80132c0:	d206      	bcs.n	80132d0 <__hexnan+0xa0>
 80132c2:	2d07      	cmp	r5, #7
 80132c4:	dc04      	bgt.n	80132d0 <__hexnan+0xa0>
 80132c6:	462a      	mov	r2, r5
 80132c8:	4649      	mov	r1, r9
 80132ca:	4620      	mov	r0, r4
 80132cc:	f7ff ff8a 	bl	80131e4 <L_shift>
 80132d0:	4544      	cmp	r4, r8
 80132d2:	d936      	bls.n	8013342 <__hexnan+0x112>
 80132d4:	f1a8 0204 	sub.w	r2, r8, #4
 80132d8:	4623      	mov	r3, r4
 80132da:	f853 1b04 	ldr.w	r1, [r3], #4
 80132de:	f842 1f04 	str.w	r1, [r2, #4]!
 80132e2:	429f      	cmp	r7, r3
 80132e4:	d2f9      	bcs.n	80132da <__hexnan+0xaa>
 80132e6:	1b3b      	subs	r3, r7, r4
 80132e8:	f023 0303 	bic.w	r3, r3, #3
 80132ec:	3304      	adds	r3, #4
 80132ee:	3401      	adds	r4, #1
 80132f0:	3e03      	subs	r6, #3
 80132f2:	42b4      	cmp	r4, r6
 80132f4:	bf88      	it	hi
 80132f6:	2304      	movhi	r3, #4
 80132f8:	4443      	add	r3, r8
 80132fa:	2200      	movs	r2, #0
 80132fc:	f843 2b04 	str.w	r2, [r3], #4
 8013300:	429f      	cmp	r7, r3
 8013302:	d2fb      	bcs.n	80132fc <__hexnan+0xcc>
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	b91b      	cbnz	r3, 8013310 <__hexnan+0xe0>
 8013308:	4547      	cmp	r7, r8
 801330a:	d128      	bne.n	801335e <__hexnan+0x12e>
 801330c:	2301      	movs	r3, #1
 801330e:	603b      	str	r3, [r7, #0]
 8013310:	2005      	movs	r0, #5
 8013312:	b007      	add	sp, #28
 8013314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013318:	3501      	adds	r5, #1
 801331a:	2d08      	cmp	r5, #8
 801331c:	f10b 0b01 	add.w	fp, fp, #1
 8013320:	dd06      	ble.n	8013330 <__hexnan+0x100>
 8013322:	4544      	cmp	r4, r8
 8013324:	d9c1      	bls.n	80132aa <__hexnan+0x7a>
 8013326:	2300      	movs	r3, #0
 8013328:	f844 3c04 	str.w	r3, [r4, #-4]
 801332c:	2501      	movs	r5, #1
 801332e:	3c04      	subs	r4, #4
 8013330:	6822      	ldr	r2, [r4, #0]
 8013332:	f000 000f 	and.w	r0, r0, #15
 8013336:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801333a:	6020      	str	r0, [r4, #0]
 801333c:	e7b5      	b.n	80132aa <__hexnan+0x7a>
 801333e:	2508      	movs	r5, #8
 8013340:	e7b3      	b.n	80132aa <__hexnan+0x7a>
 8013342:	9b01      	ldr	r3, [sp, #4]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d0dd      	beq.n	8013304 <__hexnan+0xd4>
 8013348:	f1c3 0320 	rsb	r3, r3, #32
 801334c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013350:	40da      	lsrs	r2, r3
 8013352:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013356:	4013      	ands	r3, r2
 8013358:	f846 3c04 	str.w	r3, [r6, #-4]
 801335c:	e7d2      	b.n	8013304 <__hexnan+0xd4>
 801335e:	3f04      	subs	r7, #4
 8013360:	e7d0      	b.n	8013304 <__hexnan+0xd4>
 8013362:	2004      	movs	r0, #4
 8013364:	e7d5      	b.n	8013312 <__hexnan+0xe2>

08013366 <__ssputs_r>:
 8013366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801336a:	688e      	ldr	r6, [r1, #8]
 801336c:	461f      	mov	r7, r3
 801336e:	42be      	cmp	r6, r7
 8013370:	680b      	ldr	r3, [r1, #0]
 8013372:	4682      	mov	sl, r0
 8013374:	460c      	mov	r4, r1
 8013376:	4690      	mov	r8, r2
 8013378:	d82d      	bhi.n	80133d6 <__ssputs_r+0x70>
 801337a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801337e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013382:	d026      	beq.n	80133d2 <__ssputs_r+0x6c>
 8013384:	6965      	ldr	r5, [r4, #20]
 8013386:	6909      	ldr	r1, [r1, #16]
 8013388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801338c:	eba3 0901 	sub.w	r9, r3, r1
 8013390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013394:	1c7b      	adds	r3, r7, #1
 8013396:	444b      	add	r3, r9
 8013398:	106d      	asrs	r5, r5, #1
 801339a:	429d      	cmp	r5, r3
 801339c:	bf38      	it	cc
 801339e:	461d      	movcc	r5, r3
 80133a0:	0553      	lsls	r3, r2, #21
 80133a2:	d527      	bpl.n	80133f4 <__ssputs_r+0x8e>
 80133a4:	4629      	mov	r1, r5
 80133a6:	f7fe fad5 	bl	8011954 <_malloc_r>
 80133aa:	4606      	mov	r6, r0
 80133ac:	b360      	cbz	r0, 8013408 <__ssputs_r+0xa2>
 80133ae:	6921      	ldr	r1, [r4, #16]
 80133b0:	464a      	mov	r2, r9
 80133b2:	f7ff fc19 	bl	8012be8 <memcpy>
 80133b6:	89a3      	ldrh	r3, [r4, #12]
 80133b8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80133bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133c0:	81a3      	strh	r3, [r4, #12]
 80133c2:	6126      	str	r6, [r4, #16]
 80133c4:	6165      	str	r5, [r4, #20]
 80133c6:	444e      	add	r6, r9
 80133c8:	eba5 0509 	sub.w	r5, r5, r9
 80133cc:	6026      	str	r6, [r4, #0]
 80133ce:	60a5      	str	r5, [r4, #8]
 80133d0:	463e      	mov	r6, r7
 80133d2:	42be      	cmp	r6, r7
 80133d4:	d900      	bls.n	80133d8 <__ssputs_r+0x72>
 80133d6:	463e      	mov	r6, r7
 80133d8:	6820      	ldr	r0, [r4, #0]
 80133da:	4632      	mov	r2, r6
 80133dc:	4641      	mov	r1, r8
 80133de:	f001 f89e 	bl	801451e <memmove>
 80133e2:	68a3      	ldr	r3, [r4, #8]
 80133e4:	1b9b      	subs	r3, r3, r6
 80133e6:	60a3      	str	r3, [r4, #8]
 80133e8:	6823      	ldr	r3, [r4, #0]
 80133ea:	4433      	add	r3, r6
 80133ec:	6023      	str	r3, [r4, #0]
 80133ee:	2000      	movs	r0, #0
 80133f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f4:	462a      	mov	r2, r5
 80133f6:	f001 f857 	bl	80144a8 <_realloc_r>
 80133fa:	4606      	mov	r6, r0
 80133fc:	2800      	cmp	r0, #0
 80133fe:	d1e0      	bne.n	80133c2 <__ssputs_r+0x5c>
 8013400:	6921      	ldr	r1, [r4, #16]
 8013402:	4650      	mov	r0, sl
 8013404:	f7ff fc2c 	bl	8012c60 <_free_r>
 8013408:	230c      	movs	r3, #12
 801340a:	f8ca 3000 	str.w	r3, [sl]
 801340e:	89a3      	ldrh	r3, [r4, #12]
 8013410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013414:	81a3      	strh	r3, [r4, #12]
 8013416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801341a:	e7e9      	b.n	80133f0 <__ssputs_r+0x8a>

0801341c <_svfiprintf_r>:
 801341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	4698      	mov	r8, r3
 8013422:	898b      	ldrh	r3, [r1, #12]
 8013424:	061b      	lsls	r3, r3, #24
 8013426:	b09d      	sub	sp, #116	@ 0x74
 8013428:	4607      	mov	r7, r0
 801342a:	460d      	mov	r5, r1
 801342c:	4614      	mov	r4, r2
 801342e:	d510      	bpl.n	8013452 <_svfiprintf_r+0x36>
 8013430:	690b      	ldr	r3, [r1, #16]
 8013432:	b973      	cbnz	r3, 8013452 <_svfiprintf_r+0x36>
 8013434:	2140      	movs	r1, #64	@ 0x40
 8013436:	f7fe fa8d 	bl	8011954 <_malloc_r>
 801343a:	6028      	str	r0, [r5, #0]
 801343c:	6128      	str	r0, [r5, #16]
 801343e:	b930      	cbnz	r0, 801344e <_svfiprintf_r+0x32>
 8013440:	230c      	movs	r3, #12
 8013442:	603b      	str	r3, [r7, #0]
 8013444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013448:	b01d      	add	sp, #116	@ 0x74
 801344a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344e:	2340      	movs	r3, #64	@ 0x40
 8013450:	616b      	str	r3, [r5, #20]
 8013452:	2300      	movs	r3, #0
 8013454:	9309      	str	r3, [sp, #36]	@ 0x24
 8013456:	2320      	movs	r3, #32
 8013458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801345c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013460:	2330      	movs	r3, #48	@ 0x30
 8013462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013600 <_svfiprintf_r+0x1e4>
 8013466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801346a:	f04f 0901 	mov.w	r9, #1
 801346e:	4623      	mov	r3, r4
 8013470:	469a      	mov	sl, r3
 8013472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013476:	b10a      	cbz	r2, 801347c <_svfiprintf_r+0x60>
 8013478:	2a25      	cmp	r2, #37	@ 0x25
 801347a:	d1f9      	bne.n	8013470 <_svfiprintf_r+0x54>
 801347c:	ebba 0b04 	subs.w	fp, sl, r4
 8013480:	d00b      	beq.n	801349a <_svfiprintf_r+0x7e>
 8013482:	465b      	mov	r3, fp
 8013484:	4622      	mov	r2, r4
 8013486:	4629      	mov	r1, r5
 8013488:	4638      	mov	r0, r7
 801348a:	f7ff ff6c 	bl	8013366 <__ssputs_r>
 801348e:	3001      	adds	r0, #1
 8013490:	f000 80a7 	beq.w	80135e2 <_svfiprintf_r+0x1c6>
 8013494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013496:	445a      	add	r2, fp
 8013498:	9209      	str	r2, [sp, #36]	@ 0x24
 801349a:	f89a 3000 	ldrb.w	r3, [sl]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	f000 809f 	beq.w	80135e2 <_svfiprintf_r+0x1c6>
 80134a4:	2300      	movs	r3, #0
 80134a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80134aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134ae:	f10a 0a01 	add.w	sl, sl, #1
 80134b2:	9304      	str	r3, [sp, #16]
 80134b4:	9307      	str	r3, [sp, #28]
 80134b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80134ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80134bc:	4654      	mov	r4, sl
 80134be:	2205      	movs	r2, #5
 80134c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134c4:	484e      	ldr	r0, [pc, #312]	@ (8013600 <_svfiprintf_r+0x1e4>)
 80134c6:	f7ec fea3 	bl	8000210 <memchr>
 80134ca:	9a04      	ldr	r2, [sp, #16]
 80134cc:	b9d8      	cbnz	r0, 8013506 <_svfiprintf_r+0xea>
 80134ce:	06d0      	lsls	r0, r2, #27
 80134d0:	bf44      	itt	mi
 80134d2:	2320      	movmi	r3, #32
 80134d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134d8:	0711      	lsls	r1, r2, #28
 80134da:	bf44      	itt	mi
 80134dc:	232b      	movmi	r3, #43	@ 0x2b
 80134de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134e2:	f89a 3000 	ldrb.w	r3, [sl]
 80134e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80134e8:	d015      	beq.n	8013516 <_svfiprintf_r+0xfa>
 80134ea:	9a07      	ldr	r2, [sp, #28]
 80134ec:	4654      	mov	r4, sl
 80134ee:	2000      	movs	r0, #0
 80134f0:	f04f 0c0a 	mov.w	ip, #10
 80134f4:	4621      	mov	r1, r4
 80134f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134fa:	3b30      	subs	r3, #48	@ 0x30
 80134fc:	2b09      	cmp	r3, #9
 80134fe:	d94b      	bls.n	8013598 <_svfiprintf_r+0x17c>
 8013500:	b1b0      	cbz	r0, 8013530 <_svfiprintf_r+0x114>
 8013502:	9207      	str	r2, [sp, #28]
 8013504:	e014      	b.n	8013530 <_svfiprintf_r+0x114>
 8013506:	eba0 0308 	sub.w	r3, r0, r8
 801350a:	fa09 f303 	lsl.w	r3, r9, r3
 801350e:	4313      	orrs	r3, r2
 8013510:	9304      	str	r3, [sp, #16]
 8013512:	46a2      	mov	sl, r4
 8013514:	e7d2      	b.n	80134bc <_svfiprintf_r+0xa0>
 8013516:	9b03      	ldr	r3, [sp, #12]
 8013518:	1d19      	adds	r1, r3, #4
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	9103      	str	r1, [sp, #12]
 801351e:	2b00      	cmp	r3, #0
 8013520:	bfbb      	ittet	lt
 8013522:	425b      	neglt	r3, r3
 8013524:	f042 0202 	orrlt.w	r2, r2, #2
 8013528:	9307      	strge	r3, [sp, #28]
 801352a:	9307      	strlt	r3, [sp, #28]
 801352c:	bfb8      	it	lt
 801352e:	9204      	strlt	r2, [sp, #16]
 8013530:	7823      	ldrb	r3, [r4, #0]
 8013532:	2b2e      	cmp	r3, #46	@ 0x2e
 8013534:	d10a      	bne.n	801354c <_svfiprintf_r+0x130>
 8013536:	7863      	ldrb	r3, [r4, #1]
 8013538:	2b2a      	cmp	r3, #42	@ 0x2a
 801353a:	d132      	bne.n	80135a2 <_svfiprintf_r+0x186>
 801353c:	9b03      	ldr	r3, [sp, #12]
 801353e:	1d1a      	adds	r2, r3, #4
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	9203      	str	r2, [sp, #12]
 8013544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013548:	3402      	adds	r4, #2
 801354a:	9305      	str	r3, [sp, #20]
 801354c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013610 <_svfiprintf_r+0x1f4>
 8013550:	7821      	ldrb	r1, [r4, #0]
 8013552:	2203      	movs	r2, #3
 8013554:	4650      	mov	r0, sl
 8013556:	f7ec fe5b 	bl	8000210 <memchr>
 801355a:	b138      	cbz	r0, 801356c <_svfiprintf_r+0x150>
 801355c:	9b04      	ldr	r3, [sp, #16]
 801355e:	eba0 000a 	sub.w	r0, r0, sl
 8013562:	2240      	movs	r2, #64	@ 0x40
 8013564:	4082      	lsls	r2, r0
 8013566:	4313      	orrs	r3, r2
 8013568:	3401      	adds	r4, #1
 801356a:	9304      	str	r3, [sp, #16]
 801356c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013570:	4824      	ldr	r0, [pc, #144]	@ (8013604 <_svfiprintf_r+0x1e8>)
 8013572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013576:	2206      	movs	r2, #6
 8013578:	f7ec fe4a 	bl	8000210 <memchr>
 801357c:	2800      	cmp	r0, #0
 801357e:	d036      	beq.n	80135ee <_svfiprintf_r+0x1d2>
 8013580:	4b21      	ldr	r3, [pc, #132]	@ (8013608 <_svfiprintf_r+0x1ec>)
 8013582:	bb1b      	cbnz	r3, 80135cc <_svfiprintf_r+0x1b0>
 8013584:	9b03      	ldr	r3, [sp, #12]
 8013586:	3307      	adds	r3, #7
 8013588:	f023 0307 	bic.w	r3, r3, #7
 801358c:	3308      	adds	r3, #8
 801358e:	9303      	str	r3, [sp, #12]
 8013590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013592:	4433      	add	r3, r6
 8013594:	9309      	str	r3, [sp, #36]	@ 0x24
 8013596:	e76a      	b.n	801346e <_svfiprintf_r+0x52>
 8013598:	fb0c 3202 	mla	r2, ip, r2, r3
 801359c:	460c      	mov	r4, r1
 801359e:	2001      	movs	r0, #1
 80135a0:	e7a8      	b.n	80134f4 <_svfiprintf_r+0xd8>
 80135a2:	2300      	movs	r3, #0
 80135a4:	3401      	adds	r4, #1
 80135a6:	9305      	str	r3, [sp, #20]
 80135a8:	4619      	mov	r1, r3
 80135aa:	f04f 0c0a 	mov.w	ip, #10
 80135ae:	4620      	mov	r0, r4
 80135b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135b4:	3a30      	subs	r2, #48	@ 0x30
 80135b6:	2a09      	cmp	r2, #9
 80135b8:	d903      	bls.n	80135c2 <_svfiprintf_r+0x1a6>
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d0c6      	beq.n	801354c <_svfiprintf_r+0x130>
 80135be:	9105      	str	r1, [sp, #20]
 80135c0:	e7c4      	b.n	801354c <_svfiprintf_r+0x130>
 80135c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80135c6:	4604      	mov	r4, r0
 80135c8:	2301      	movs	r3, #1
 80135ca:	e7f0      	b.n	80135ae <_svfiprintf_r+0x192>
 80135cc:	ab03      	add	r3, sp, #12
 80135ce:	9300      	str	r3, [sp, #0]
 80135d0:	462a      	mov	r2, r5
 80135d2:	4b0e      	ldr	r3, [pc, #56]	@ (801360c <_svfiprintf_r+0x1f0>)
 80135d4:	a904      	add	r1, sp, #16
 80135d6:	4638      	mov	r0, r7
 80135d8:	f3af 8000 	nop.w
 80135dc:	1c42      	adds	r2, r0, #1
 80135de:	4606      	mov	r6, r0
 80135e0:	d1d6      	bne.n	8013590 <_svfiprintf_r+0x174>
 80135e2:	89ab      	ldrh	r3, [r5, #12]
 80135e4:	065b      	lsls	r3, r3, #25
 80135e6:	f53f af2d 	bmi.w	8013444 <_svfiprintf_r+0x28>
 80135ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80135ec:	e72c      	b.n	8013448 <_svfiprintf_r+0x2c>
 80135ee:	ab03      	add	r3, sp, #12
 80135f0:	9300      	str	r3, [sp, #0]
 80135f2:	462a      	mov	r2, r5
 80135f4:	4b05      	ldr	r3, [pc, #20]	@ (801360c <_svfiprintf_r+0x1f0>)
 80135f6:	a904      	add	r1, sp, #16
 80135f8:	4638      	mov	r0, r7
 80135fa:	f000 f88b 	bl	8013714 <_printf_i>
 80135fe:	e7ed      	b.n	80135dc <_svfiprintf_r+0x1c0>
 8013600:	08015594 	.word	0x08015594
 8013604:	0801559e 	.word	0x0801559e
 8013608:	00000000 	.word	0x00000000
 801360c:	08013367 	.word	0x08013367
 8013610:	0801559a 	.word	0x0801559a

08013614 <__ascii_mbtowc>:
 8013614:	b082      	sub	sp, #8
 8013616:	b901      	cbnz	r1, 801361a <__ascii_mbtowc+0x6>
 8013618:	a901      	add	r1, sp, #4
 801361a:	b142      	cbz	r2, 801362e <__ascii_mbtowc+0x1a>
 801361c:	b14b      	cbz	r3, 8013632 <__ascii_mbtowc+0x1e>
 801361e:	7813      	ldrb	r3, [r2, #0]
 8013620:	600b      	str	r3, [r1, #0]
 8013622:	7812      	ldrb	r2, [r2, #0]
 8013624:	1e10      	subs	r0, r2, #0
 8013626:	bf18      	it	ne
 8013628:	2001      	movne	r0, #1
 801362a:	b002      	add	sp, #8
 801362c:	4770      	bx	lr
 801362e:	4610      	mov	r0, r2
 8013630:	e7fb      	b.n	801362a <__ascii_mbtowc+0x16>
 8013632:	f06f 0001 	mvn.w	r0, #1
 8013636:	e7f8      	b.n	801362a <__ascii_mbtowc+0x16>

08013638 <_printf_common>:
 8013638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801363c:	4616      	mov	r6, r2
 801363e:	4698      	mov	r8, r3
 8013640:	688a      	ldr	r2, [r1, #8]
 8013642:	690b      	ldr	r3, [r1, #16]
 8013644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013648:	4293      	cmp	r3, r2
 801364a:	bfb8      	it	lt
 801364c:	4613      	movlt	r3, r2
 801364e:	6033      	str	r3, [r6, #0]
 8013650:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013654:	4607      	mov	r7, r0
 8013656:	460c      	mov	r4, r1
 8013658:	b10a      	cbz	r2, 801365e <_printf_common+0x26>
 801365a:	3301      	adds	r3, #1
 801365c:	6033      	str	r3, [r6, #0]
 801365e:	6823      	ldr	r3, [r4, #0]
 8013660:	0699      	lsls	r1, r3, #26
 8013662:	bf42      	ittt	mi
 8013664:	6833      	ldrmi	r3, [r6, #0]
 8013666:	3302      	addmi	r3, #2
 8013668:	6033      	strmi	r3, [r6, #0]
 801366a:	6825      	ldr	r5, [r4, #0]
 801366c:	f015 0506 	ands.w	r5, r5, #6
 8013670:	d106      	bne.n	8013680 <_printf_common+0x48>
 8013672:	f104 0a19 	add.w	sl, r4, #25
 8013676:	68e3      	ldr	r3, [r4, #12]
 8013678:	6832      	ldr	r2, [r6, #0]
 801367a:	1a9b      	subs	r3, r3, r2
 801367c:	42ab      	cmp	r3, r5
 801367e:	dc26      	bgt.n	80136ce <_printf_common+0x96>
 8013680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013684:	6822      	ldr	r2, [r4, #0]
 8013686:	3b00      	subs	r3, #0
 8013688:	bf18      	it	ne
 801368a:	2301      	movne	r3, #1
 801368c:	0692      	lsls	r2, r2, #26
 801368e:	d42b      	bmi.n	80136e8 <_printf_common+0xb0>
 8013690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013694:	4641      	mov	r1, r8
 8013696:	4638      	mov	r0, r7
 8013698:	47c8      	blx	r9
 801369a:	3001      	adds	r0, #1
 801369c:	d01e      	beq.n	80136dc <_printf_common+0xa4>
 801369e:	6823      	ldr	r3, [r4, #0]
 80136a0:	6922      	ldr	r2, [r4, #16]
 80136a2:	f003 0306 	and.w	r3, r3, #6
 80136a6:	2b04      	cmp	r3, #4
 80136a8:	bf02      	ittt	eq
 80136aa:	68e5      	ldreq	r5, [r4, #12]
 80136ac:	6833      	ldreq	r3, [r6, #0]
 80136ae:	1aed      	subeq	r5, r5, r3
 80136b0:	68a3      	ldr	r3, [r4, #8]
 80136b2:	bf0c      	ite	eq
 80136b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80136b8:	2500      	movne	r5, #0
 80136ba:	4293      	cmp	r3, r2
 80136bc:	bfc4      	itt	gt
 80136be:	1a9b      	subgt	r3, r3, r2
 80136c0:	18ed      	addgt	r5, r5, r3
 80136c2:	2600      	movs	r6, #0
 80136c4:	341a      	adds	r4, #26
 80136c6:	42b5      	cmp	r5, r6
 80136c8:	d11a      	bne.n	8013700 <_printf_common+0xc8>
 80136ca:	2000      	movs	r0, #0
 80136cc:	e008      	b.n	80136e0 <_printf_common+0xa8>
 80136ce:	2301      	movs	r3, #1
 80136d0:	4652      	mov	r2, sl
 80136d2:	4641      	mov	r1, r8
 80136d4:	4638      	mov	r0, r7
 80136d6:	47c8      	blx	r9
 80136d8:	3001      	adds	r0, #1
 80136da:	d103      	bne.n	80136e4 <_printf_common+0xac>
 80136dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136e4:	3501      	adds	r5, #1
 80136e6:	e7c6      	b.n	8013676 <_printf_common+0x3e>
 80136e8:	18e1      	adds	r1, r4, r3
 80136ea:	1c5a      	adds	r2, r3, #1
 80136ec:	2030      	movs	r0, #48	@ 0x30
 80136ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80136f2:	4422      	add	r2, r4
 80136f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80136f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80136fc:	3302      	adds	r3, #2
 80136fe:	e7c7      	b.n	8013690 <_printf_common+0x58>
 8013700:	2301      	movs	r3, #1
 8013702:	4622      	mov	r2, r4
 8013704:	4641      	mov	r1, r8
 8013706:	4638      	mov	r0, r7
 8013708:	47c8      	blx	r9
 801370a:	3001      	adds	r0, #1
 801370c:	d0e6      	beq.n	80136dc <_printf_common+0xa4>
 801370e:	3601      	adds	r6, #1
 8013710:	e7d9      	b.n	80136c6 <_printf_common+0x8e>
	...

08013714 <_printf_i>:
 8013714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013718:	7e0f      	ldrb	r7, [r1, #24]
 801371a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801371c:	2f78      	cmp	r7, #120	@ 0x78
 801371e:	4691      	mov	r9, r2
 8013720:	4680      	mov	r8, r0
 8013722:	460c      	mov	r4, r1
 8013724:	469a      	mov	sl, r3
 8013726:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801372a:	d807      	bhi.n	801373c <_printf_i+0x28>
 801372c:	2f62      	cmp	r7, #98	@ 0x62
 801372e:	d80a      	bhi.n	8013746 <_printf_i+0x32>
 8013730:	2f00      	cmp	r7, #0
 8013732:	f000 80d1 	beq.w	80138d8 <_printf_i+0x1c4>
 8013736:	2f58      	cmp	r7, #88	@ 0x58
 8013738:	f000 80b8 	beq.w	80138ac <_printf_i+0x198>
 801373c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013740:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013744:	e03a      	b.n	80137bc <_printf_i+0xa8>
 8013746:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801374a:	2b15      	cmp	r3, #21
 801374c:	d8f6      	bhi.n	801373c <_printf_i+0x28>
 801374e:	a101      	add	r1, pc, #4	@ (adr r1, 8013754 <_printf_i+0x40>)
 8013750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013754:	080137ad 	.word	0x080137ad
 8013758:	080137c1 	.word	0x080137c1
 801375c:	0801373d 	.word	0x0801373d
 8013760:	0801373d 	.word	0x0801373d
 8013764:	0801373d 	.word	0x0801373d
 8013768:	0801373d 	.word	0x0801373d
 801376c:	080137c1 	.word	0x080137c1
 8013770:	0801373d 	.word	0x0801373d
 8013774:	0801373d 	.word	0x0801373d
 8013778:	0801373d 	.word	0x0801373d
 801377c:	0801373d 	.word	0x0801373d
 8013780:	080138bf 	.word	0x080138bf
 8013784:	080137eb 	.word	0x080137eb
 8013788:	08013879 	.word	0x08013879
 801378c:	0801373d 	.word	0x0801373d
 8013790:	0801373d 	.word	0x0801373d
 8013794:	080138e1 	.word	0x080138e1
 8013798:	0801373d 	.word	0x0801373d
 801379c:	080137eb 	.word	0x080137eb
 80137a0:	0801373d 	.word	0x0801373d
 80137a4:	0801373d 	.word	0x0801373d
 80137a8:	08013881 	.word	0x08013881
 80137ac:	6833      	ldr	r3, [r6, #0]
 80137ae:	1d1a      	adds	r2, r3, #4
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	6032      	str	r2, [r6, #0]
 80137b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80137b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80137bc:	2301      	movs	r3, #1
 80137be:	e09c      	b.n	80138fa <_printf_i+0x1e6>
 80137c0:	6833      	ldr	r3, [r6, #0]
 80137c2:	6820      	ldr	r0, [r4, #0]
 80137c4:	1d19      	adds	r1, r3, #4
 80137c6:	6031      	str	r1, [r6, #0]
 80137c8:	0606      	lsls	r6, r0, #24
 80137ca:	d501      	bpl.n	80137d0 <_printf_i+0xbc>
 80137cc:	681d      	ldr	r5, [r3, #0]
 80137ce:	e003      	b.n	80137d8 <_printf_i+0xc4>
 80137d0:	0645      	lsls	r5, r0, #25
 80137d2:	d5fb      	bpl.n	80137cc <_printf_i+0xb8>
 80137d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80137d8:	2d00      	cmp	r5, #0
 80137da:	da03      	bge.n	80137e4 <_printf_i+0xd0>
 80137dc:	232d      	movs	r3, #45	@ 0x2d
 80137de:	426d      	negs	r5, r5
 80137e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80137e4:	4858      	ldr	r0, [pc, #352]	@ (8013948 <_printf_i+0x234>)
 80137e6:	230a      	movs	r3, #10
 80137e8:	e011      	b.n	801380e <_printf_i+0xfa>
 80137ea:	6821      	ldr	r1, [r4, #0]
 80137ec:	6833      	ldr	r3, [r6, #0]
 80137ee:	0608      	lsls	r0, r1, #24
 80137f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80137f4:	d402      	bmi.n	80137fc <_printf_i+0xe8>
 80137f6:	0649      	lsls	r1, r1, #25
 80137f8:	bf48      	it	mi
 80137fa:	b2ad      	uxthmi	r5, r5
 80137fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80137fe:	4852      	ldr	r0, [pc, #328]	@ (8013948 <_printf_i+0x234>)
 8013800:	6033      	str	r3, [r6, #0]
 8013802:	bf14      	ite	ne
 8013804:	230a      	movne	r3, #10
 8013806:	2308      	moveq	r3, #8
 8013808:	2100      	movs	r1, #0
 801380a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801380e:	6866      	ldr	r6, [r4, #4]
 8013810:	60a6      	str	r6, [r4, #8]
 8013812:	2e00      	cmp	r6, #0
 8013814:	db05      	blt.n	8013822 <_printf_i+0x10e>
 8013816:	6821      	ldr	r1, [r4, #0]
 8013818:	432e      	orrs	r6, r5
 801381a:	f021 0104 	bic.w	r1, r1, #4
 801381e:	6021      	str	r1, [r4, #0]
 8013820:	d04b      	beq.n	80138ba <_printf_i+0x1a6>
 8013822:	4616      	mov	r6, r2
 8013824:	fbb5 f1f3 	udiv	r1, r5, r3
 8013828:	fb03 5711 	mls	r7, r3, r1, r5
 801382c:	5dc7      	ldrb	r7, [r0, r7]
 801382e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013832:	462f      	mov	r7, r5
 8013834:	42bb      	cmp	r3, r7
 8013836:	460d      	mov	r5, r1
 8013838:	d9f4      	bls.n	8013824 <_printf_i+0x110>
 801383a:	2b08      	cmp	r3, #8
 801383c:	d10b      	bne.n	8013856 <_printf_i+0x142>
 801383e:	6823      	ldr	r3, [r4, #0]
 8013840:	07df      	lsls	r7, r3, #31
 8013842:	d508      	bpl.n	8013856 <_printf_i+0x142>
 8013844:	6923      	ldr	r3, [r4, #16]
 8013846:	6861      	ldr	r1, [r4, #4]
 8013848:	4299      	cmp	r1, r3
 801384a:	bfde      	ittt	le
 801384c:	2330      	movle	r3, #48	@ 0x30
 801384e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013852:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013856:	1b92      	subs	r2, r2, r6
 8013858:	6122      	str	r2, [r4, #16]
 801385a:	f8cd a000 	str.w	sl, [sp]
 801385e:	464b      	mov	r3, r9
 8013860:	aa03      	add	r2, sp, #12
 8013862:	4621      	mov	r1, r4
 8013864:	4640      	mov	r0, r8
 8013866:	f7ff fee7 	bl	8013638 <_printf_common>
 801386a:	3001      	adds	r0, #1
 801386c:	d14a      	bne.n	8013904 <_printf_i+0x1f0>
 801386e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013872:	b004      	add	sp, #16
 8013874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013878:	6823      	ldr	r3, [r4, #0]
 801387a:	f043 0320 	orr.w	r3, r3, #32
 801387e:	6023      	str	r3, [r4, #0]
 8013880:	4832      	ldr	r0, [pc, #200]	@ (801394c <_printf_i+0x238>)
 8013882:	2778      	movs	r7, #120	@ 0x78
 8013884:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013888:	6823      	ldr	r3, [r4, #0]
 801388a:	6831      	ldr	r1, [r6, #0]
 801388c:	061f      	lsls	r7, r3, #24
 801388e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013892:	d402      	bmi.n	801389a <_printf_i+0x186>
 8013894:	065f      	lsls	r7, r3, #25
 8013896:	bf48      	it	mi
 8013898:	b2ad      	uxthmi	r5, r5
 801389a:	6031      	str	r1, [r6, #0]
 801389c:	07d9      	lsls	r1, r3, #31
 801389e:	bf44      	itt	mi
 80138a0:	f043 0320 	orrmi.w	r3, r3, #32
 80138a4:	6023      	strmi	r3, [r4, #0]
 80138a6:	b11d      	cbz	r5, 80138b0 <_printf_i+0x19c>
 80138a8:	2310      	movs	r3, #16
 80138aa:	e7ad      	b.n	8013808 <_printf_i+0xf4>
 80138ac:	4826      	ldr	r0, [pc, #152]	@ (8013948 <_printf_i+0x234>)
 80138ae:	e7e9      	b.n	8013884 <_printf_i+0x170>
 80138b0:	6823      	ldr	r3, [r4, #0]
 80138b2:	f023 0320 	bic.w	r3, r3, #32
 80138b6:	6023      	str	r3, [r4, #0]
 80138b8:	e7f6      	b.n	80138a8 <_printf_i+0x194>
 80138ba:	4616      	mov	r6, r2
 80138bc:	e7bd      	b.n	801383a <_printf_i+0x126>
 80138be:	6833      	ldr	r3, [r6, #0]
 80138c0:	6825      	ldr	r5, [r4, #0]
 80138c2:	6961      	ldr	r1, [r4, #20]
 80138c4:	1d18      	adds	r0, r3, #4
 80138c6:	6030      	str	r0, [r6, #0]
 80138c8:	062e      	lsls	r6, r5, #24
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	d501      	bpl.n	80138d2 <_printf_i+0x1be>
 80138ce:	6019      	str	r1, [r3, #0]
 80138d0:	e002      	b.n	80138d8 <_printf_i+0x1c4>
 80138d2:	0668      	lsls	r0, r5, #25
 80138d4:	d5fb      	bpl.n	80138ce <_printf_i+0x1ba>
 80138d6:	8019      	strh	r1, [r3, #0]
 80138d8:	2300      	movs	r3, #0
 80138da:	6123      	str	r3, [r4, #16]
 80138dc:	4616      	mov	r6, r2
 80138de:	e7bc      	b.n	801385a <_printf_i+0x146>
 80138e0:	6833      	ldr	r3, [r6, #0]
 80138e2:	1d1a      	adds	r2, r3, #4
 80138e4:	6032      	str	r2, [r6, #0]
 80138e6:	681e      	ldr	r6, [r3, #0]
 80138e8:	6862      	ldr	r2, [r4, #4]
 80138ea:	2100      	movs	r1, #0
 80138ec:	4630      	mov	r0, r6
 80138ee:	f7ec fc8f 	bl	8000210 <memchr>
 80138f2:	b108      	cbz	r0, 80138f8 <_printf_i+0x1e4>
 80138f4:	1b80      	subs	r0, r0, r6
 80138f6:	6060      	str	r0, [r4, #4]
 80138f8:	6863      	ldr	r3, [r4, #4]
 80138fa:	6123      	str	r3, [r4, #16]
 80138fc:	2300      	movs	r3, #0
 80138fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013902:	e7aa      	b.n	801385a <_printf_i+0x146>
 8013904:	6923      	ldr	r3, [r4, #16]
 8013906:	4632      	mov	r2, r6
 8013908:	4649      	mov	r1, r9
 801390a:	4640      	mov	r0, r8
 801390c:	47d0      	blx	sl
 801390e:	3001      	adds	r0, #1
 8013910:	d0ad      	beq.n	801386e <_printf_i+0x15a>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	079b      	lsls	r3, r3, #30
 8013916:	d413      	bmi.n	8013940 <_printf_i+0x22c>
 8013918:	68e0      	ldr	r0, [r4, #12]
 801391a:	9b03      	ldr	r3, [sp, #12]
 801391c:	4298      	cmp	r0, r3
 801391e:	bfb8      	it	lt
 8013920:	4618      	movlt	r0, r3
 8013922:	e7a6      	b.n	8013872 <_printf_i+0x15e>
 8013924:	2301      	movs	r3, #1
 8013926:	4632      	mov	r2, r6
 8013928:	4649      	mov	r1, r9
 801392a:	4640      	mov	r0, r8
 801392c:	47d0      	blx	sl
 801392e:	3001      	adds	r0, #1
 8013930:	d09d      	beq.n	801386e <_printf_i+0x15a>
 8013932:	3501      	adds	r5, #1
 8013934:	68e3      	ldr	r3, [r4, #12]
 8013936:	9903      	ldr	r1, [sp, #12]
 8013938:	1a5b      	subs	r3, r3, r1
 801393a:	42ab      	cmp	r3, r5
 801393c:	dcf2      	bgt.n	8013924 <_printf_i+0x210>
 801393e:	e7eb      	b.n	8013918 <_printf_i+0x204>
 8013940:	2500      	movs	r5, #0
 8013942:	f104 0619 	add.w	r6, r4, #25
 8013946:	e7f5      	b.n	8013934 <_printf_i+0x220>
 8013948:	080155a5 	.word	0x080155a5
 801394c:	080155b6 	.word	0x080155b6

08013950 <__sflush_r>:
 8013950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013958:	0716      	lsls	r6, r2, #28
 801395a:	4605      	mov	r5, r0
 801395c:	460c      	mov	r4, r1
 801395e:	d454      	bmi.n	8013a0a <__sflush_r+0xba>
 8013960:	684b      	ldr	r3, [r1, #4]
 8013962:	2b00      	cmp	r3, #0
 8013964:	dc02      	bgt.n	801396c <__sflush_r+0x1c>
 8013966:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013968:	2b00      	cmp	r3, #0
 801396a:	dd48      	ble.n	80139fe <__sflush_r+0xae>
 801396c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801396e:	2e00      	cmp	r6, #0
 8013970:	d045      	beq.n	80139fe <__sflush_r+0xae>
 8013972:	2300      	movs	r3, #0
 8013974:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013978:	682f      	ldr	r7, [r5, #0]
 801397a:	6a21      	ldr	r1, [r4, #32]
 801397c:	602b      	str	r3, [r5, #0]
 801397e:	d030      	beq.n	80139e2 <__sflush_r+0x92>
 8013980:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013982:	89a3      	ldrh	r3, [r4, #12]
 8013984:	0759      	lsls	r1, r3, #29
 8013986:	d505      	bpl.n	8013994 <__sflush_r+0x44>
 8013988:	6863      	ldr	r3, [r4, #4]
 801398a:	1ad2      	subs	r2, r2, r3
 801398c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801398e:	b10b      	cbz	r3, 8013994 <__sflush_r+0x44>
 8013990:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013992:	1ad2      	subs	r2, r2, r3
 8013994:	2300      	movs	r3, #0
 8013996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013998:	6a21      	ldr	r1, [r4, #32]
 801399a:	4628      	mov	r0, r5
 801399c:	47b0      	blx	r6
 801399e:	1c43      	adds	r3, r0, #1
 80139a0:	89a3      	ldrh	r3, [r4, #12]
 80139a2:	d106      	bne.n	80139b2 <__sflush_r+0x62>
 80139a4:	6829      	ldr	r1, [r5, #0]
 80139a6:	291d      	cmp	r1, #29
 80139a8:	d82b      	bhi.n	8013a02 <__sflush_r+0xb2>
 80139aa:	4a2a      	ldr	r2, [pc, #168]	@ (8013a54 <__sflush_r+0x104>)
 80139ac:	40ca      	lsrs	r2, r1
 80139ae:	07d6      	lsls	r6, r2, #31
 80139b0:	d527      	bpl.n	8013a02 <__sflush_r+0xb2>
 80139b2:	2200      	movs	r2, #0
 80139b4:	6062      	str	r2, [r4, #4]
 80139b6:	04d9      	lsls	r1, r3, #19
 80139b8:	6922      	ldr	r2, [r4, #16]
 80139ba:	6022      	str	r2, [r4, #0]
 80139bc:	d504      	bpl.n	80139c8 <__sflush_r+0x78>
 80139be:	1c42      	adds	r2, r0, #1
 80139c0:	d101      	bne.n	80139c6 <__sflush_r+0x76>
 80139c2:	682b      	ldr	r3, [r5, #0]
 80139c4:	b903      	cbnz	r3, 80139c8 <__sflush_r+0x78>
 80139c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80139c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139ca:	602f      	str	r7, [r5, #0]
 80139cc:	b1b9      	cbz	r1, 80139fe <__sflush_r+0xae>
 80139ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139d2:	4299      	cmp	r1, r3
 80139d4:	d002      	beq.n	80139dc <__sflush_r+0x8c>
 80139d6:	4628      	mov	r0, r5
 80139d8:	f7ff f942 	bl	8012c60 <_free_r>
 80139dc:	2300      	movs	r3, #0
 80139de:	6363      	str	r3, [r4, #52]	@ 0x34
 80139e0:	e00d      	b.n	80139fe <__sflush_r+0xae>
 80139e2:	2301      	movs	r3, #1
 80139e4:	4628      	mov	r0, r5
 80139e6:	47b0      	blx	r6
 80139e8:	4602      	mov	r2, r0
 80139ea:	1c50      	adds	r0, r2, #1
 80139ec:	d1c9      	bne.n	8013982 <__sflush_r+0x32>
 80139ee:	682b      	ldr	r3, [r5, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d0c6      	beq.n	8013982 <__sflush_r+0x32>
 80139f4:	2b1d      	cmp	r3, #29
 80139f6:	d001      	beq.n	80139fc <__sflush_r+0xac>
 80139f8:	2b16      	cmp	r3, #22
 80139fa:	d11e      	bne.n	8013a3a <__sflush_r+0xea>
 80139fc:	602f      	str	r7, [r5, #0]
 80139fe:	2000      	movs	r0, #0
 8013a00:	e022      	b.n	8013a48 <__sflush_r+0xf8>
 8013a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a06:	b21b      	sxth	r3, r3
 8013a08:	e01b      	b.n	8013a42 <__sflush_r+0xf2>
 8013a0a:	690f      	ldr	r7, [r1, #16]
 8013a0c:	2f00      	cmp	r7, #0
 8013a0e:	d0f6      	beq.n	80139fe <__sflush_r+0xae>
 8013a10:	0793      	lsls	r3, r2, #30
 8013a12:	680e      	ldr	r6, [r1, #0]
 8013a14:	bf08      	it	eq
 8013a16:	694b      	ldreq	r3, [r1, #20]
 8013a18:	600f      	str	r7, [r1, #0]
 8013a1a:	bf18      	it	ne
 8013a1c:	2300      	movne	r3, #0
 8013a1e:	eba6 0807 	sub.w	r8, r6, r7
 8013a22:	608b      	str	r3, [r1, #8]
 8013a24:	f1b8 0f00 	cmp.w	r8, #0
 8013a28:	dde9      	ble.n	80139fe <__sflush_r+0xae>
 8013a2a:	6a21      	ldr	r1, [r4, #32]
 8013a2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013a2e:	4643      	mov	r3, r8
 8013a30:	463a      	mov	r2, r7
 8013a32:	4628      	mov	r0, r5
 8013a34:	47b0      	blx	r6
 8013a36:	2800      	cmp	r0, #0
 8013a38:	dc08      	bgt.n	8013a4c <__sflush_r+0xfc>
 8013a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a42:	81a3      	strh	r3, [r4, #12]
 8013a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a4c:	4407      	add	r7, r0
 8013a4e:	eba8 0800 	sub.w	r8, r8, r0
 8013a52:	e7e7      	b.n	8013a24 <__sflush_r+0xd4>
 8013a54:	20400001 	.word	0x20400001

08013a58 <_fflush_r>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	690b      	ldr	r3, [r1, #16]
 8013a5c:	4605      	mov	r5, r0
 8013a5e:	460c      	mov	r4, r1
 8013a60:	b913      	cbnz	r3, 8013a68 <_fflush_r+0x10>
 8013a62:	2500      	movs	r5, #0
 8013a64:	4628      	mov	r0, r5
 8013a66:	bd38      	pop	{r3, r4, r5, pc}
 8013a68:	b118      	cbz	r0, 8013a72 <_fflush_r+0x1a>
 8013a6a:	6a03      	ldr	r3, [r0, #32]
 8013a6c:	b90b      	cbnz	r3, 8013a72 <_fflush_r+0x1a>
 8013a6e:	f7fe f889 	bl	8011b84 <__sinit>
 8013a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d0f3      	beq.n	8013a62 <_fflush_r+0xa>
 8013a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013a7c:	07d0      	lsls	r0, r2, #31
 8013a7e:	d404      	bmi.n	8013a8a <_fflush_r+0x32>
 8013a80:	0599      	lsls	r1, r3, #22
 8013a82:	d402      	bmi.n	8013a8a <_fflush_r+0x32>
 8013a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013a86:	f7f0 fc21 	bl	80042cc <__retarget_lock_acquire_recursive>
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	4621      	mov	r1, r4
 8013a8e:	f7ff ff5f 	bl	8013950 <__sflush_r>
 8013a92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013a94:	07da      	lsls	r2, r3, #31
 8013a96:	4605      	mov	r5, r0
 8013a98:	d4e4      	bmi.n	8013a64 <_fflush_r+0xc>
 8013a9a:	89a3      	ldrh	r3, [r4, #12]
 8013a9c:	059b      	lsls	r3, r3, #22
 8013a9e:	d4e1      	bmi.n	8013a64 <_fflush_r+0xc>
 8013aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013aa2:	f7f0 fc28 	bl	80042f6 <__retarget_lock_release_recursive>
 8013aa6:	e7dd      	b.n	8013a64 <_fflush_r+0xc>

08013aa8 <_Balloc>:
 8013aa8:	b570      	push	{r4, r5, r6, lr}
 8013aaa:	69c6      	ldr	r6, [r0, #28]
 8013aac:	4604      	mov	r4, r0
 8013aae:	460d      	mov	r5, r1
 8013ab0:	b976      	cbnz	r6, 8013ad0 <_Balloc+0x28>
 8013ab2:	2010      	movs	r0, #16
 8013ab4:	f7fd ff24 	bl	8011900 <malloc>
 8013ab8:	4602      	mov	r2, r0
 8013aba:	61e0      	str	r0, [r4, #28]
 8013abc:	b920      	cbnz	r0, 8013ac8 <_Balloc+0x20>
 8013abe:	4b18      	ldr	r3, [pc, #96]	@ (8013b20 <_Balloc+0x78>)
 8013ac0:	4818      	ldr	r0, [pc, #96]	@ (8013b24 <_Balloc+0x7c>)
 8013ac2:	216b      	movs	r1, #107	@ 0x6b
 8013ac4:	f7ff f8ae 	bl	8012c24 <__assert_func>
 8013ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013acc:	6006      	str	r6, [r0, #0]
 8013ace:	60c6      	str	r6, [r0, #12]
 8013ad0:	69e6      	ldr	r6, [r4, #28]
 8013ad2:	68f3      	ldr	r3, [r6, #12]
 8013ad4:	b183      	cbz	r3, 8013af8 <_Balloc+0x50>
 8013ad6:	69e3      	ldr	r3, [r4, #28]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013ade:	b9b8      	cbnz	r0, 8013b10 <_Balloc+0x68>
 8013ae0:	2101      	movs	r1, #1
 8013ae2:	fa01 f605 	lsl.w	r6, r1, r5
 8013ae6:	1d72      	adds	r2, r6, #5
 8013ae8:	0092      	lsls	r2, r2, #2
 8013aea:	4620      	mov	r0, r4
 8013aec:	f000 fd78 	bl	80145e0 <_calloc_r>
 8013af0:	b160      	cbz	r0, 8013b0c <_Balloc+0x64>
 8013af2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013af6:	e00e      	b.n	8013b16 <_Balloc+0x6e>
 8013af8:	2221      	movs	r2, #33	@ 0x21
 8013afa:	2104      	movs	r1, #4
 8013afc:	4620      	mov	r0, r4
 8013afe:	f000 fd6f 	bl	80145e0 <_calloc_r>
 8013b02:	69e3      	ldr	r3, [r4, #28]
 8013b04:	60f0      	str	r0, [r6, #12]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1e4      	bne.n	8013ad6 <_Balloc+0x2e>
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	bd70      	pop	{r4, r5, r6, pc}
 8013b10:	6802      	ldr	r2, [r0, #0]
 8013b12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b16:	2300      	movs	r3, #0
 8013b18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b1c:	e7f7      	b.n	8013b0e <_Balloc+0x66>
 8013b1e:	bf00      	nop
 8013b20:	0801546e 	.word	0x0801546e
 8013b24:	080155c7 	.word	0x080155c7

08013b28 <_Bfree>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	69c6      	ldr	r6, [r0, #28]
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	460c      	mov	r4, r1
 8013b30:	b976      	cbnz	r6, 8013b50 <_Bfree+0x28>
 8013b32:	2010      	movs	r0, #16
 8013b34:	f7fd fee4 	bl	8011900 <malloc>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	61e8      	str	r0, [r5, #28]
 8013b3c:	b920      	cbnz	r0, 8013b48 <_Bfree+0x20>
 8013b3e:	4b09      	ldr	r3, [pc, #36]	@ (8013b64 <_Bfree+0x3c>)
 8013b40:	4809      	ldr	r0, [pc, #36]	@ (8013b68 <_Bfree+0x40>)
 8013b42:	218f      	movs	r1, #143	@ 0x8f
 8013b44:	f7ff f86e 	bl	8012c24 <__assert_func>
 8013b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b4c:	6006      	str	r6, [r0, #0]
 8013b4e:	60c6      	str	r6, [r0, #12]
 8013b50:	b13c      	cbz	r4, 8013b62 <_Bfree+0x3a>
 8013b52:	69eb      	ldr	r3, [r5, #28]
 8013b54:	6862      	ldr	r2, [r4, #4]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b5c:	6021      	str	r1, [r4, #0]
 8013b5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b62:	bd70      	pop	{r4, r5, r6, pc}
 8013b64:	0801546e 	.word	0x0801546e
 8013b68:	080155c7 	.word	0x080155c7

08013b6c <__multadd>:
 8013b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b70:	690d      	ldr	r5, [r1, #16]
 8013b72:	4607      	mov	r7, r0
 8013b74:	460c      	mov	r4, r1
 8013b76:	461e      	mov	r6, r3
 8013b78:	f101 0c14 	add.w	ip, r1, #20
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	f8dc 3000 	ldr.w	r3, [ip]
 8013b82:	b299      	uxth	r1, r3
 8013b84:	fb02 6101 	mla	r1, r2, r1, r6
 8013b88:	0c1e      	lsrs	r6, r3, #16
 8013b8a:	0c0b      	lsrs	r3, r1, #16
 8013b8c:	fb02 3306 	mla	r3, r2, r6, r3
 8013b90:	b289      	uxth	r1, r1
 8013b92:	3001      	adds	r0, #1
 8013b94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013b98:	4285      	cmp	r5, r0
 8013b9a:	f84c 1b04 	str.w	r1, [ip], #4
 8013b9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ba2:	dcec      	bgt.n	8013b7e <__multadd+0x12>
 8013ba4:	b30e      	cbz	r6, 8013bea <__multadd+0x7e>
 8013ba6:	68a3      	ldr	r3, [r4, #8]
 8013ba8:	42ab      	cmp	r3, r5
 8013baa:	dc19      	bgt.n	8013be0 <__multadd+0x74>
 8013bac:	6861      	ldr	r1, [r4, #4]
 8013bae:	4638      	mov	r0, r7
 8013bb0:	3101      	adds	r1, #1
 8013bb2:	f7ff ff79 	bl	8013aa8 <_Balloc>
 8013bb6:	4680      	mov	r8, r0
 8013bb8:	b928      	cbnz	r0, 8013bc6 <__multadd+0x5a>
 8013bba:	4602      	mov	r2, r0
 8013bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8013bf0 <__multadd+0x84>)
 8013bbe:	480d      	ldr	r0, [pc, #52]	@ (8013bf4 <__multadd+0x88>)
 8013bc0:	21ba      	movs	r1, #186	@ 0xba
 8013bc2:	f7ff f82f 	bl	8012c24 <__assert_func>
 8013bc6:	6922      	ldr	r2, [r4, #16]
 8013bc8:	3202      	adds	r2, #2
 8013bca:	f104 010c 	add.w	r1, r4, #12
 8013bce:	0092      	lsls	r2, r2, #2
 8013bd0:	300c      	adds	r0, #12
 8013bd2:	f7ff f809 	bl	8012be8 <memcpy>
 8013bd6:	4621      	mov	r1, r4
 8013bd8:	4638      	mov	r0, r7
 8013bda:	f7ff ffa5 	bl	8013b28 <_Bfree>
 8013bde:	4644      	mov	r4, r8
 8013be0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013be4:	3501      	adds	r5, #1
 8013be6:	615e      	str	r6, [r3, #20]
 8013be8:	6125      	str	r5, [r4, #16]
 8013bea:	4620      	mov	r0, r4
 8013bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf0:	08015523 	.word	0x08015523
 8013bf4:	080155c7 	.word	0x080155c7

08013bf8 <__s2b>:
 8013bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bfc:	460c      	mov	r4, r1
 8013bfe:	4615      	mov	r5, r2
 8013c00:	461f      	mov	r7, r3
 8013c02:	2209      	movs	r2, #9
 8013c04:	3308      	adds	r3, #8
 8013c06:	4606      	mov	r6, r0
 8013c08:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	2201      	movs	r2, #1
 8013c10:	429a      	cmp	r2, r3
 8013c12:	db09      	blt.n	8013c28 <__s2b+0x30>
 8013c14:	4630      	mov	r0, r6
 8013c16:	f7ff ff47 	bl	8013aa8 <_Balloc>
 8013c1a:	b940      	cbnz	r0, 8013c2e <__s2b+0x36>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	4b19      	ldr	r3, [pc, #100]	@ (8013c84 <__s2b+0x8c>)
 8013c20:	4819      	ldr	r0, [pc, #100]	@ (8013c88 <__s2b+0x90>)
 8013c22:	21d3      	movs	r1, #211	@ 0xd3
 8013c24:	f7fe fffe 	bl	8012c24 <__assert_func>
 8013c28:	0052      	lsls	r2, r2, #1
 8013c2a:	3101      	adds	r1, #1
 8013c2c:	e7f0      	b.n	8013c10 <__s2b+0x18>
 8013c2e:	9b08      	ldr	r3, [sp, #32]
 8013c30:	6143      	str	r3, [r0, #20]
 8013c32:	2d09      	cmp	r5, #9
 8013c34:	f04f 0301 	mov.w	r3, #1
 8013c38:	6103      	str	r3, [r0, #16]
 8013c3a:	dd16      	ble.n	8013c6a <__s2b+0x72>
 8013c3c:	f104 0909 	add.w	r9, r4, #9
 8013c40:	46c8      	mov	r8, r9
 8013c42:	442c      	add	r4, r5
 8013c44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013c48:	4601      	mov	r1, r0
 8013c4a:	3b30      	subs	r3, #48	@ 0x30
 8013c4c:	220a      	movs	r2, #10
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f7ff ff8c 	bl	8013b6c <__multadd>
 8013c54:	45a0      	cmp	r8, r4
 8013c56:	d1f5      	bne.n	8013c44 <__s2b+0x4c>
 8013c58:	f1a5 0408 	sub.w	r4, r5, #8
 8013c5c:	444c      	add	r4, r9
 8013c5e:	1b2d      	subs	r5, r5, r4
 8013c60:	1963      	adds	r3, r4, r5
 8013c62:	42bb      	cmp	r3, r7
 8013c64:	db04      	blt.n	8013c70 <__s2b+0x78>
 8013c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c6a:	340a      	adds	r4, #10
 8013c6c:	2509      	movs	r5, #9
 8013c6e:	e7f6      	b.n	8013c5e <__s2b+0x66>
 8013c70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013c74:	4601      	mov	r1, r0
 8013c76:	3b30      	subs	r3, #48	@ 0x30
 8013c78:	220a      	movs	r2, #10
 8013c7a:	4630      	mov	r0, r6
 8013c7c:	f7ff ff76 	bl	8013b6c <__multadd>
 8013c80:	e7ee      	b.n	8013c60 <__s2b+0x68>
 8013c82:	bf00      	nop
 8013c84:	08015523 	.word	0x08015523
 8013c88:	080155c7 	.word	0x080155c7

08013c8c <__hi0bits>:
 8013c8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013c90:	4603      	mov	r3, r0
 8013c92:	bf36      	itet	cc
 8013c94:	0403      	lslcc	r3, r0, #16
 8013c96:	2000      	movcs	r0, #0
 8013c98:	2010      	movcc	r0, #16
 8013c9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013c9e:	bf3c      	itt	cc
 8013ca0:	021b      	lslcc	r3, r3, #8
 8013ca2:	3008      	addcc	r0, #8
 8013ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ca8:	bf3c      	itt	cc
 8013caa:	011b      	lslcc	r3, r3, #4
 8013cac:	3004      	addcc	r0, #4
 8013cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013cb2:	bf3c      	itt	cc
 8013cb4:	009b      	lslcc	r3, r3, #2
 8013cb6:	3002      	addcc	r0, #2
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	db05      	blt.n	8013cc8 <__hi0bits+0x3c>
 8013cbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013cc0:	f100 0001 	add.w	r0, r0, #1
 8013cc4:	bf08      	it	eq
 8013cc6:	2020      	moveq	r0, #32
 8013cc8:	4770      	bx	lr

08013cca <__lo0bits>:
 8013cca:	6803      	ldr	r3, [r0, #0]
 8013ccc:	4602      	mov	r2, r0
 8013cce:	f013 0007 	ands.w	r0, r3, #7
 8013cd2:	d00b      	beq.n	8013cec <__lo0bits+0x22>
 8013cd4:	07d9      	lsls	r1, r3, #31
 8013cd6:	d421      	bmi.n	8013d1c <__lo0bits+0x52>
 8013cd8:	0798      	lsls	r0, r3, #30
 8013cda:	bf49      	itett	mi
 8013cdc:	085b      	lsrmi	r3, r3, #1
 8013cde:	089b      	lsrpl	r3, r3, #2
 8013ce0:	2001      	movmi	r0, #1
 8013ce2:	6013      	strmi	r3, [r2, #0]
 8013ce4:	bf5c      	itt	pl
 8013ce6:	6013      	strpl	r3, [r2, #0]
 8013ce8:	2002      	movpl	r0, #2
 8013cea:	4770      	bx	lr
 8013cec:	b299      	uxth	r1, r3
 8013cee:	b909      	cbnz	r1, 8013cf4 <__lo0bits+0x2a>
 8013cf0:	0c1b      	lsrs	r3, r3, #16
 8013cf2:	2010      	movs	r0, #16
 8013cf4:	b2d9      	uxtb	r1, r3
 8013cf6:	b909      	cbnz	r1, 8013cfc <__lo0bits+0x32>
 8013cf8:	3008      	adds	r0, #8
 8013cfa:	0a1b      	lsrs	r3, r3, #8
 8013cfc:	0719      	lsls	r1, r3, #28
 8013cfe:	bf04      	itt	eq
 8013d00:	091b      	lsreq	r3, r3, #4
 8013d02:	3004      	addeq	r0, #4
 8013d04:	0799      	lsls	r1, r3, #30
 8013d06:	bf04      	itt	eq
 8013d08:	089b      	lsreq	r3, r3, #2
 8013d0a:	3002      	addeq	r0, #2
 8013d0c:	07d9      	lsls	r1, r3, #31
 8013d0e:	d403      	bmi.n	8013d18 <__lo0bits+0x4e>
 8013d10:	085b      	lsrs	r3, r3, #1
 8013d12:	f100 0001 	add.w	r0, r0, #1
 8013d16:	d003      	beq.n	8013d20 <__lo0bits+0x56>
 8013d18:	6013      	str	r3, [r2, #0]
 8013d1a:	4770      	bx	lr
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	4770      	bx	lr
 8013d20:	2020      	movs	r0, #32
 8013d22:	4770      	bx	lr

08013d24 <__i2b>:
 8013d24:	b510      	push	{r4, lr}
 8013d26:	460c      	mov	r4, r1
 8013d28:	2101      	movs	r1, #1
 8013d2a:	f7ff febd 	bl	8013aa8 <_Balloc>
 8013d2e:	4602      	mov	r2, r0
 8013d30:	b928      	cbnz	r0, 8013d3e <__i2b+0x1a>
 8013d32:	4b05      	ldr	r3, [pc, #20]	@ (8013d48 <__i2b+0x24>)
 8013d34:	4805      	ldr	r0, [pc, #20]	@ (8013d4c <__i2b+0x28>)
 8013d36:	f240 1145 	movw	r1, #325	@ 0x145
 8013d3a:	f7fe ff73 	bl	8012c24 <__assert_func>
 8013d3e:	2301      	movs	r3, #1
 8013d40:	6144      	str	r4, [r0, #20]
 8013d42:	6103      	str	r3, [r0, #16]
 8013d44:	bd10      	pop	{r4, pc}
 8013d46:	bf00      	nop
 8013d48:	08015523 	.word	0x08015523
 8013d4c:	080155c7 	.word	0x080155c7

08013d50 <__multiply>:
 8013d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d54:	4617      	mov	r7, r2
 8013d56:	690a      	ldr	r2, [r1, #16]
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	bfa8      	it	ge
 8013d5e:	463b      	movge	r3, r7
 8013d60:	4689      	mov	r9, r1
 8013d62:	bfa4      	itt	ge
 8013d64:	460f      	movge	r7, r1
 8013d66:	4699      	movge	r9, r3
 8013d68:	693d      	ldr	r5, [r7, #16]
 8013d6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	6879      	ldr	r1, [r7, #4]
 8013d72:	eb05 060a 	add.w	r6, r5, sl
 8013d76:	42b3      	cmp	r3, r6
 8013d78:	b085      	sub	sp, #20
 8013d7a:	bfb8      	it	lt
 8013d7c:	3101      	addlt	r1, #1
 8013d7e:	f7ff fe93 	bl	8013aa8 <_Balloc>
 8013d82:	b930      	cbnz	r0, 8013d92 <__multiply+0x42>
 8013d84:	4602      	mov	r2, r0
 8013d86:	4b41      	ldr	r3, [pc, #260]	@ (8013e8c <__multiply+0x13c>)
 8013d88:	4841      	ldr	r0, [pc, #260]	@ (8013e90 <__multiply+0x140>)
 8013d8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013d8e:	f7fe ff49 	bl	8012c24 <__assert_func>
 8013d92:	f100 0414 	add.w	r4, r0, #20
 8013d96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013d9a:	4623      	mov	r3, r4
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	4573      	cmp	r3, lr
 8013da0:	d320      	bcc.n	8013de4 <__multiply+0x94>
 8013da2:	f107 0814 	add.w	r8, r7, #20
 8013da6:	f109 0114 	add.w	r1, r9, #20
 8013daa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013dae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013db2:	9302      	str	r3, [sp, #8]
 8013db4:	1beb      	subs	r3, r5, r7
 8013db6:	3b15      	subs	r3, #21
 8013db8:	f023 0303 	bic.w	r3, r3, #3
 8013dbc:	3304      	adds	r3, #4
 8013dbe:	3715      	adds	r7, #21
 8013dc0:	42bd      	cmp	r5, r7
 8013dc2:	bf38      	it	cc
 8013dc4:	2304      	movcc	r3, #4
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	9b02      	ldr	r3, [sp, #8]
 8013dca:	9103      	str	r1, [sp, #12]
 8013dcc:	428b      	cmp	r3, r1
 8013dce:	d80c      	bhi.n	8013dea <__multiply+0x9a>
 8013dd0:	2e00      	cmp	r6, #0
 8013dd2:	dd03      	ble.n	8013ddc <__multiply+0x8c>
 8013dd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d055      	beq.n	8013e88 <__multiply+0x138>
 8013ddc:	6106      	str	r6, [r0, #16]
 8013dde:	b005      	add	sp, #20
 8013de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de4:	f843 2b04 	str.w	r2, [r3], #4
 8013de8:	e7d9      	b.n	8013d9e <__multiply+0x4e>
 8013dea:	f8b1 a000 	ldrh.w	sl, [r1]
 8013dee:	f1ba 0f00 	cmp.w	sl, #0
 8013df2:	d01f      	beq.n	8013e34 <__multiply+0xe4>
 8013df4:	46c4      	mov	ip, r8
 8013df6:	46a1      	mov	r9, r4
 8013df8:	2700      	movs	r7, #0
 8013dfa:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013dfe:	f8d9 3000 	ldr.w	r3, [r9]
 8013e02:	fa1f fb82 	uxth.w	fp, r2
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	fb0a 330b 	mla	r3, sl, fp, r3
 8013e0c:	443b      	add	r3, r7
 8013e0e:	f8d9 7000 	ldr.w	r7, [r9]
 8013e12:	0c12      	lsrs	r2, r2, #16
 8013e14:	0c3f      	lsrs	r7, r7, #16
 8013e16:	fb0a 7202 	mla	r2, sl, r2, r7
 8013e1a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e24:	4565      	cmp	r5, ip
 8013e26:	f849 3b04 	str.w	r3, [r9], #4
 8013e2a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013e2e:	d8e4      	bhi.n	8013dfa <__multiply+0xaa>
 8013e30:	9b01      	ldr	r3, [sp, #4]
 8013e32:	50e7      	str	r7, [r4, r3]
 8013e34:	9b03      	ldr	r3, [sp, #12]
 8013e36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013e3a:	3104      	adds	r1, #4
 8013e3c:	f1b9 0f00 	cmp.w	r9, #0
 8013e40:	d020      	beq.n	8013e84 <__multiply+0x134>
 8013e42:	6823      	ldr	r3, [r4, #0]
 8013e44:	4647      	mov	r7, r8
 8013e46:	46a4      	mov	ip, r4
 8013e48:	f04f 0a00 	mov.w	sl, #0
 8013e4c:	f8b7 b000 	ldrh.w	fp, [r7]
 8013e50:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013e54:	fb09 220b 	mla	r2, r9, fp, r2
 8013e58:	4452      	add	r2, sl
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e60:	f84c 3b04 	str.w	r3, [ip], #4
 8013e64:	f857 3b04 	ldr.w	r3, [r7], #4
 8013e68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e6c:	f8bc 3000 	ldrh.w	r3, [ip]
 8013e70:	fb09 330a 	mla	r3, r9, sl, r3
 8013e74:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013e78:	42bd      	cmp	r5, r7
 8013e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e7e:	d8e5      	bhi.n	8013e4c <__multiply+0xfc>
 8013e80:	9a01      	ldr	r2, [sp, #4]
 8013e82:	50a3      	str	r3, [r4, r2]
 8013e84:	3404      	adds	r4, #4
 8013e86:	e79f      	b.n	8013dc8 <__multiply+0x78>
 8013e88:	3e01      	subs	r6, #1
 8013e8a:	e7a1      	b.n	8013dd0 <__multiply+0x80>
 8013e8c:	08015523 	.word	0x08015523
 8013e90:	080155c7 	.word	0x080155c7

08013e94 <__pow5mult>:
 8013e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e98:	4615      	mov	r5, r2
 8013e9a:	f012 0203 	ands.w	r2, r2, #3
 8013e9e:	4607      	mov	r7, r0
 8013ea0:	460e      	mov	r6, r1
 8013ea2:	d007      	beq.n	8013eb4 <__pow5mult+0x20>
 8013ea4:	4c25      	ldr	r4, [pc, #148]	@ (8013f3c <__pow5mult+0xa8>)
 8013ea6:	3a01      	subs	r2, #1
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013eae:	f7ff fe5d 	bl	8013b6c <__multadd>
 8013eb2:	4606      	mov	r6, r0
 8013eb4:	10ad      	asrs	r5, r5, #2
 8013eb6:	d03d      	beq.n	8013f34 <__pow5mult+0xa0>
 8013eb8:	69fc      	ldr	r4, [r7, #28]
 8013eba:	b97c      	cbnz	r4, 8013edc <__pow5mult+0x48>
 8013ebc:	2010      	movs	r0, #16
 8013ebe:	f7fd fd1f 	bl	8011900 <malloc>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	61f8      	str	r0, [r7, #28]
 8013ec6:	b928      	cbnz	r0, 8013ed4 <__pow5mult+0x40>
 8013ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8013f40 <__pow5mult+0xac>)
 8013eca:	481e      	ldr	r0, [pc, #120]	@ (8013f44 <__pow5mult+0xb0>)
 8013ecc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013ed0:	f7fe fea8 	bl	8012c24 <__assert_func>
 8013ed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ed8:	6004      	str	r4, [r0, #0]
 8013eda:	60c4      	str	r4, [r0, #12]
 8013edc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013ee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ee4:	b94c      	cbnz	r4, 8013efa <__pow5mult+0x66>
 8013ee6:	f240 2171 	movw	r1, #625	@ 0x271
 8013eea:	4638      	mov	r0, r7
 8013eec:	f7ff ff1a 	bl	8013d24 <__i2b>
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	f8c8 0008 	str.w	r0, [r8, #8]
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	6003      	str	r3, [r0, #0]
 8013efa:	f04f 0900 	mov.w	r9, #0
 8013efe:	07eb      	lsls	r3, r5, #31
 8013f00:	d50a      	bpl.n	8013f18 <__pow5mult+0x84>
 8013f02:	4631      	mov	r1, r6
 8013f04:	4622      	mov	r2, r4
 8013f06:	4638      	mov	r0, r7
 8013f08:	f7ff ff22 	bl	8013d50 <__multiply>
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	4680      	mov	r8, r0
 8013f10:	4638      	mov	r0, r7
 8013f12:	f7ff fe09 	bl	8013b28 <_Bfree>
 8013f16:	4646      	mov	r6, r8
 8013f18:	106d      	asrs	r5, r5, #1
 8013f1a:	d00b      	beq.n	8013f34 <__pow5mult+0xa0>
 8013f1c:	6820      	ldr	r0, [r4, #0]
 8013f1e:	b938      	cbnz	r0, 8013f30 <__pow5mult+0x9c>
 8013f20:	4622      	mov	r2, r4
 8013f22:	4621      	mov	r1, r4
 8013f24:	4638      	mov	r0, r7
 8013f26:	f7ff ff13 	bl	8013d50 <__multiply>
 8013f2a:	6020      	str	r0, [r4, #0]
 8013f2c:	f8c0 9000 	str.w	r9, [r0]
 8013f30:	4604      	mov	r4, r0
 8013f32:	e7e4      	b.n	8013efe <__pow5mult+0x6a>
 8013f34:	4630      	mov	r0, r6
 8013f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f3a:	bf00      	nop
 8013f3c:	08015774 	.word	0x08015774
 8013f40:	0801546e 	.word	0x0801546e
 8013f44:	080155c7 	.word	0x080155c7

08013f48 <__lshift>:
 8013f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f4c:	460c      	mov	r4, r1
 8013f4e:	6849      	ldr	r1, [r1, #4]
 8013f50:	6923      	ldr	r3, [r4, #16]
 8013f52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f56:	68a3      	ldr	r3, [r4, #8]
 8013f58:	4607      	mov	r7, r0
 8013f5a:	4691      	mov	r9, r2
 8013f5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f60:	f108 0601 	add.w	r6, r8, #1
 8013f64:	42b3      	cmp	r3, r6
 8013f66:	db0b      	blt.n	8013f80 <__lshift+0x38>
 8013f68:	4638      	mov	r0, r7
 8013f6a:	f7ff fd9d 	bl	8013aa8 <_Balloc>
 8013f6e:	4605      	mov	r5, r0
 8013f70:	b948      	cbnz	r0, 8013f86 <__lshift+0x3e>
 8013f72:	4602      	mov	r2, r0
 8013f74:	4b28      	ldr	r3, [pc, #160]	@ (8014018 <__lshift+0xd0>)
 8013f76:	4829      	ldr	r0, [pc, #164]	@ (801401c <__lshift+0xd4>)
 8013f78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013f7c:	f7fe fe52 	bl	8012c24 <__assert_func>
 8013f80:	3101      	adds	r1, #1
 8013f82:	005b      	lsls	r3, r3, #1
 8013f84:	e7ee      	b.n	8013f64 <__lshift+0x1c>
 8013f86:	2300      	movs	r3, #0
 8013f88:	f100 0114 	add.w	r1, r0, #20
 8013f8c:	f100 0210 	add.w	r2, r0, #16
 8013f90:	4618      	mov	r0, r3
 8013f92:	4553      	cmp	r3, sl
 8013f94:	db33      	blt.n	8013ffe <__lshift+0xb6>
 8013f96:	6920      	ldr	r0, [r4, #16]
 8013f98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f9c:	f104 0314 	add.w	r3, r4, #20
 8013fa0:	f019 091f 	ands.w	r9, r9, #31
 8013fa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013fa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013fac:	d02b      	beq.n	8014006 <__lshift+0xbe>
 8013fae:	f1c9 0e20 	rsb	lr, r9, #32
 8013fb2:	468a      	mov	sl, r1
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	6818      	ldr	r0, [r3, #0]
 8013fb8:	fa00 f009 	lsl.w	r0, r0, r9
 8013fbc:	4310      	orrs	r0, r2
 8013fbe:	f84a 0b04 	str.w	r0, [sl], #4
 8013fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fc6:	459c      	cmp	ip, r3
 8013fc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8013fcc:	d8f3      	bhi.n	8013fb6 <__lshift+0x6e>
 8013fce:	ebac 0304 	sub.w	r3, ip, r4
 8013fd2:	3b15      	subs	r3, #21
 8013fd4:	f023 0303 	bic.w	r3, r3, #3
 8013fd8:	3304      	adds	r3, #4
 8013fda:	f104 0015 	add.w	r0, r4, #21
 8013fde:	4560      	cmp	r0, ip
 8013fe0:	bf88      	it	hi
 8013fe2:	2304      	movhi	r3, #4
 8013fe4:	50ca      	str	r2, [r1, r3]
 8013fe6:	b10a      	cbz	r2, 8013fec <__lshift+0xa4>
 8013fe8:	f108 0602 	add.w	r6, r8, #2
 8013fec:	3e01      	subs	r6, #1
 8013fee:	4638      	mov	r0, r7
 8013ff0:	612e      	str	r6, [r5, #16]
 8013ff2:	4621      	mov	r1, r4
 8013ff4:	f7ff fd98 	bl	8013b28 <_Bfree>
 8013ff8:	4628      	mov	r0, r5
 8013ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ffe:	f842 0f04 	str.w	r0, [r2, #4]!
 8014002:	3301      	adds	r3, #1
 8014004:	e7c5      	b.n	8013f92 <__lshift+0x4a>
 8014006:	3904      	subs	r1, #4
 8014008:	f853 2b04 	ldr.w	r2, [r3], #4
 801400c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014010:	459c      	cmp	ip, r3
 8014012:	d8f9      	bhi.n	8014008 <__lshift+0xc0>
 8014014:	e7ea      	b.n	8013fec <__lshift+0xa4>
 8014016:	bf00      	nop
 8014018:	08015523 	.word	0x08015523
 801401c:	080155c7 	.word	0x080155c7

08014020 <__mcmp>:
 8014020:	690a      	ldr	r2, [r1, #16]
 8014022:	4603      	mov	r3, r0
 8014024:	6900      	ldr	r0, [r0, #16]
 8014026:	1a80      	subs	r0, r0, r2
 8014028:	b530      	push	{r4, r5, lr}
 801402a:	d10e      	bne.n	801404a <__mcmp+0x2a>
 801402c:	3314      	adds	r3, #20
 801402e:	3114      	adds	r1, #20
 8014030:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014034:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801403c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014040:	4295      	cmp	r5, r2
 8014042:	d003      	beq.n	801404c <__mcmp+0x2c>
 8014044:	d205      	bcs.n	8014052 <__mcmp+0x32>
 8014046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801404a:	bd30      	pop	{r4, r5, pc}
 801404c:	42a3      	cmp	r3, r4
 801404e:	d3f3      	bcc.n	8014038 <__mcmp+0x18>
 8014050:	e7fb      	b.n	801404a <__mcmp+0x2a>
 8014052:	2001      	movs	r0, #1
 8014054:	e7f9      	b.n	801404a <__mcmp+0x2a>
	...

08014058 <__mdiff>:
 8014058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405c:	4689      	mov	r9, r1
 801405e:	4606      	mov	r6, r0
 8014060:	4611      	mov	r1, r2
 8014062:	4648      	mov	r0, r9
 8014064:	4614      	mov	r4, r2
 8014066:	f7ff ffdb 	bl	8014020 <__mcmp>
 801406a:	1e05      	subs	r5, r0, #0
 801406c:	d112      	bne.n	8014094 <__mdiff+0x3c>
 801406e:	4629      	mov	r1, r5
 8014070:	4630      	mov	r0, r6
 8014072:	f7ff fd19 	bl	8013aa8 <_Balloc>
 8014076:	4602      	mov	r2, r0
 8014078:	b928      	cbnz	r0, 8014086 <__mdiff+0x2e>
 801407a:	4b3f      	ldr	r3, [pc, #252]	@ (8014178 <__mdiff+0x120>)
 801407c:	f240 2137 	movw	r1, #567	@ 0x237
 8014080:	483e      	ldr	r0, [pc, #248]	@ (801417c <__mdiff+0x124>)
 8014082:	f7fe fdcf 	bl	8012c24 <__assert_func>
 8014086:	2301      	movs	r3, #1
 8014088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801408c:	4610      	mov	r0, r2
 801408e:	b003      	add	sp, #12
 8014090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014094:	bfbc      	itt	lt
 8014096:	464b      	movlt	r3, r9
 8014098:	46a1      	movlt	r9, r4
 801409a:	4630      	mov	r0, r6
 801409c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80140a0:	bfba      	itte	lt
 80140a2:	461c      	movlt	r4, r3
 80140a4:	2501      	movlt	r5, #1
 80140a6:	2500      	movge	r5, #0
 80140a8:	f7ff fcfe 	bl	8013aa8 <_Balloc>
 80140ac:	4602      	mov	r2, r0
 80140ae:	b918      	cbnz	r0, 80140b8 <__mdiff+0x60>
 80140b0:	4b31      	ldr	r3, [pc, #196]	@ (8014178 <__mdiff+0x120>)
 80140b2:	f240 2145 	movw	r1, #581	@ 0x245
 80140b6:	e7e3      	b.n	8014080 <__mdiff+0x28>
 80140b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80140bc:	6926      	ldr	r6, [r4, #16]
 80140be:	60c5      	str	r5, [r0, #12]
 80140c0:	f109 0310 	add.w	r3, r9, #16
 80140c4:	f109 0514 	add.w	r5, r9, #20
 80140c8:	f104 0e14 	add.w	lr, r4, #20
 80140cc:	f100 0b14 	add.w	fp, r0, #20
 80140d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80140d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80140d8:	9301      	str	r3, [sp, #4]
 80140da:	46d9      	mov	r9, fp
 80140dc:	f04f 0c00 	mov.w	ip, #0
 80140e0:	9b01      	ldr	r3, [sp, #4]
 80140e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80140e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80140ea:	9301      	str	r3, [sp, #4]
 80140ec:	fa1f f38a 	uxth.w	r3, sl
 80140f0:	4619      	mov	r1, r3
 80140f2:	b283      	uxth	r3, r0
 80140f4:	1acb      	subs	r3, r1, r3
 80140f6:	0c00      	lsrs	r0, r0, #16
 80140f8:	4463      	add	r3, ip
 80140fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80140fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014102:	b29b      	uxth	r3, r3
 8014104:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014108:	4576      	cmp	r6, lr
 801410a:	f849 3b04 	str.w	r3, [r9], #4
 801410e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014112:	d8e5      	bhi.n	80140e0 <__mdiff+0x88>
 8014114:	1b33      	subs	r3, r6, r4
 8014116:	3b15      	subs	r3, #21
 8014118:	f023 0303 	bic.w	r3, r3, #3
 801411c:	3415      	adds	r4, #21
 801411e:	3304      	adds	r3, #4
 8014120:	42a6      	cmp	r6, r4
 8014122:	bf38      	it	cc
 8014124:	2304      	movcc	r3, #4
 8014126:	441d      	add	r5, r3
 8014128:	445b      	add	r3, fp
 801412a:	461e      	mov	r6, r3
 801412c:	462c      	mov	r4, r5
 801412e:	4544      	cmp	r4, r8
 8014130:	d30e      	bcc.n	8014150 <__mdiff+0xf8>
 8014132:	f108 0103 	add.w	r1, r8, #3
 8014136:	1b49      	subs	r1, r1, r5
 8014138:	f021 0103 	bic.w	r1, r1, #3
 801413c:	3d03      	subs	r5, #3
 801413e:	45a8      	cmp	r8, r5
 8014140:	bf38      	it	cc
 8014142:	2100      	movcc	r1, #0
 8014144:	440b      	add	r3, r1
 8014146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801414a:	b191      	cbz	r1, 8014172 <__mdiff+0x11a>
 801414c:	6117      	str	r7, [r2, #16]
 801414e:	e79d      	b.n	801408c <__mdiff+0x34>
 8014150:	f854 1b04 	ldr.w	r1, [r4], #4
 8014154:	46e6      	mov	lr, ip
 8014156:	0c08      	lsrs	r0, r1, #16
 8014158:	fa1c fc81 	uxtah	ip, ip, r1
 801415c:	4471      	add	r1, lr
 801415e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014162:	b289      	uxth	r1, r1
 8014164:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014168:	f846 1b04 	str.w	r1, [r6], #4
 801416c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014170:	e7dd      	b.n	801412e <__mdiff+0xd6>
 8014172:	3f01      	subs	r7, #1
 8014174:	e7e7      	b.n	8014146 <__mdiff+0xee>
 8014176:	bf00      	nop
 8014178:	08015523 	.word	0x08015523
 801417c:	080155c7 	.word	0x080155c7

08014180 <__ulp>:
 8014180:	b082      	sub	sp, #8
 8014182:	ed8d 0b00 	vstr	d0, [sp]
 8014186:	9a01      	ldr	r2, [sp, #4]
 8014188:	4b0f      	ldr	r3, [pc, #60]	@ (80141c8 <__ulp+0x48>)
 801418a:	4013      	ands	r3, r2
 801418c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014190:	2b00      	cmp	r3, #0
 8014192:	dc08      	bgt.n	80141a6 <__ulp+0x26>
 8014194:	425b      	negs	r3, r3
 8014196:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801419a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801419e:	da04      	bge.n	80141aa <__ulp+0x2a>
 80141a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80141a4:	4113      	asrs	r3, r2
 80141a6:	2200      	movs	r2, #0
 80141a8:	e008      	b.n	80141bc <__ulp+0x3c>
 80141aa:	f1a2 0314 	sub.w	r3, r2, #20
 80141ae:	2b1e      	cmp	r3, #30
 80141b0:	bfda      	itte	le
 80141b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80141b6:	40da      	lsrle	r2, r3
 80141b8:	2201      	movgt	r2, #1
 80141ba:	2300      	movs	r3, #0
 80141bc:	4619      	mov	r1, r3
 80141be:	4610      	mov	r0, r2
 80141c0:	ec41 0b10 	vmov	d0, r0, r1
 80141c4:	b002      	add	sp, #8
 80141c6:	4770      	bx	lr
 80141c8:	7ff00000 	.word	0x7ff00000

080141cc <__b2d>:
 80141cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d0:	6906      	ldr	r6, [r0, #16]
 80141d2:	f100 0814 	add.w	r8, r0, #20
 80141d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80141da:	1f37      	subs	r7, r6, #4
 80141dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80141e0:	4610      	mov	r0, r2
 80141e2:	f7ff fd53 	bl	8013c8c <__hi0bits>
 80141e6:	f1c0 0320 	rsb	r3, r0, #32
 80141ea:	280a      	cmp	r0, #10
 80141ec:	600b      	str	r3, [r1, #0]
 80141ee:	491b      	ldr	r1, [pc, #108]	@ (801425c <__b2d+0x90>)
 80141f0:	dc15      	bgt.n	801421e <__b2d+0x52>
 80141f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80141f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80141fa:	45b8      	cmp	r8, r7
 80141fc:	ea43 0501 	orr.w	r5, r3, r1
 8014200:	bf34      	ite	cc
 8014202:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014206:	2300      	movcs	r3, #0
 8014208:	3015      	adds	r0, #21
 801420a:	fa02 f000 	lsl.w	r0, r2, r0
 801420e:	fa23 f30c 	lsr.w	r3, r3, ip
 8014212:	4303      	orrs	r3, r0
 8014214:	461c      	mov	r4, r3
 8014216:	ec45 4b10 	vmov	d0, r4, r5
 801421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801421e:	45b8      	cmp	r8, r7
 8014220:	bf3a      	itte	cc
 8014222:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014226:	f1a6 0708 	subcc.w	r7, r6, #8
 801422a:	2300      	movcs	r3, #0
 801422c:	380b      	subs	r0, #11
 801422e:	d012      	beq.n	8014256 <__b2d+0x8a>
 8014230:	f1c0 0120 	rsb	r1, r0, #32
 8014234:	fa23 f401 	lsr.w	r4, r3, r1
 8014238:	4082      	lsls	r2, r0
 801423a:	4322      	orrs	r2, r4
 801423c:	4547      	cmp	r7, r8
 801423e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014242:	bf8c      	ite	hi
 8014244:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014248:	2200      	movls	r2, #0
 801424a:	4083      	lsls	r3, r0
 801424c:	40ca      	lsrs	r2, r1
 801424e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014252:	4313      	orrs	r3, r2
 8014254:	e7de      	b.n	8014214 <__b2d+0x48>
 8014256:	ea42 0501 	orr.w	r5, r2, r1
 801425a:	e7db      	b.n	8014214 <__b2d+0x48>
 801425c:	3ff00000 	.word	0x3ff00000

08014260 <__d2b>:
 8014260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014264:	460f      	mov	r7, r1
 8014266:	2101      	movs	r1, #1
 8014268:	ec59 8b10 	vmov	r8, r9, d0
 801426c:	4616      	mov	r6, r2
 801426e:	f7ff fc1b 	bl	8013aa8 <_Balloc>
 8014272:	4604      	mov	r4, r0
 8014274:	b930      	cbnz	r0, 8014284 <__d2b+0x24>
 8014276:	4602      	mov	r2, r0
 8014278:	4b23      	ldr	r3, [pc, #140]	@ (8014308 <__d2b+0xa8>)
 801427a:	4824      	ldr	r0, [pc, #144]	@ (801430c <__d2b+0xac>)
 801427c:	f240 310f 	movw	r1, #783	@ 0x30f
 8014280:	f7fe fcd0 	bl	8012c24 <__assert_func>
 8014284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801428c:	b10d      	cbz	r5, 8014292 <__d2b+0x32>
 801428e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014292:	9301      	str	r3, [sp, #4]
 8014294:	f1b8 0300 	subs.w	r3, r8, #0
 8014298:	d023      	beq.n	80142e2 <__d2b+0x82>
 801429a:	4668      	mov	r0, sp
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	f7ff fd14 	bl	8013cca <__lo0bits>
 80142a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80142a6:	b1d0      	cbz	r0, 80142de <__d2b+0x7e>
 80142a8:	f1c0 0320 	rsb	r3, r0, #32
 80142ac:	fa02 f303 	lsl.w	r3, r2, r3
 80142b0:	430b      	orrs	r3, r1
 80142b2:	40c2      	lsrs	r2, r0
 80142b4:	6163      	str	r3, [r4, #20]
 80142b6:	9201      	str	r2, [sp, #4]
 80142b8:	9b01      	ldr	r3, [sp, #4]
 80142ba:	61a3      	str	r3, [r4, #24]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	bf0c      	ite	eq
 80142c0:	2201      	moveq	r2, #1
 80142c2:	2202      	movne	r2, #2
 80142c4:	6122      	str	r2, [r4, #16]
 80142c6:	b1a5      	cbz	r5, 80142f2 <__d2b+0x92>
 80142c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80142cc:	4405      	add	r5, r0
 80142ce:	603d      	str	r5, [r7, #0]
 80142d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80142d4:	6030      	str	r0, [r6, #0]
 80142d6:	4620      	mov	r0, r4
 80142d8:	b003      	add	sp, #12
 80142da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142de:	6161      	str	r1, [r4, #20]
 80142e0:	e7ea      	b.n	80142b8 <__d2b+0x58>
 80142e2:	a801      	add	r0, sp, #4
 80142e4:	f7ff fcf1 	bl	8013cca <__lo0bits>
 80142e8:	9b01      	ldr	r3, [sp, #4]
 80142ea:	6163      	str	r3, [r4, #20]
 80142ec:	3020      	adds	r0, #32
 80142ee:	2201      	movs	r2, #1
 80142f0:	e7e8      	b.n	80142c4 <__d2b+0x64>
 80142f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80142f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80142fa:	6038      	str	r0, [r7, #0]
 80142fc:	6918      	ldr	r0, [r3, #16]
 80142fe:	f7ff fcc5 	bl	8013c8c <__hi0bits>
 8014302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014306:	e7e5      	b.n	80142d4 <__d2b+0x74>
 8014308:	08015523 	.word	0x08015523
 801430c:	080155c7 	.word	0x080155c7

08014310 <__ratio>:
 8014310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014314:	b085      	sub	sp, #20
 8014316:	e9cd 1000 	strd	r1, r0, [sp]
 801431a:	a902      	add	r1, sp, #8
 801431c:	f7ff ff56 	bl	80141cc <__b2d>
 8014320:	9800      	ldr	r0, [sp, #0]
 8014322:	a903      	add	r1, sp, #12
 8014324:	ec55 4b10 	vmov	r4, r5, d0
 8014328:	f7ff ff50 	bl	80141cc <__b2d>
 801432c:	9b01      	ldr	r3, [sp, #4]
 801432e:	6919      	ldr	r1, [r3, #16]
 8014330:	9b00      	ldr	r3, [sp, #0]
 8014332:	691b      	ldr	r3, [r3, #16]
 8014334:	1ac9      	subs	r1, r1, r3
 8014336:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801433a:	1a9b      	subs	r3, r3, r2
 801433c:	ec5b ab10 	vmov	sl, fp, d0
 8014340:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014344:	2b00      	cmp	r3, #0
 8014346:	bfce      	itee	gt
 8014348:	462a      	movgt	r2, r5
 801434a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801434e:	465a      	movle	r2, fp
 8014350:	462f      	mov	r7, r5
 8014352:	46d9      	mov	r9, fp
 8014354:	bfcc      	ite	gt
 8014356:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801435a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801435e:	464b      	mov	r3, r9
 8014360:	4652      	mov	r2, sl
 8014362:	4620      	mov	r0, r4
 8014364:	4639      	mov	r1, r7
 8014366:	f7ec fa89 	bl	800087c <__aeabi_ddiv>
 801436a:	ec41 0b10 	vmov	d0, r0, r1
 801436e:	b005      	add	sp, #20
 8014370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014374 <__copybits>:
 8014374:	3901      	subs	r1, #1
 8014376:	b570      	push	{r4, r5, r6, lr}
 8014378:	1149      	asrs	r1, r1, #5
 801437a:	6914      	ldr	r4, [r2, #16]
 801437c:	3101      	adds	r1, #1
 801437e:	f102 0314 	add.w	r3, r2, #20
 8014382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801438a:	1f05      	subs	r5, r0, #4
 801438c:	42a3      	cmp	r3, r4
 801438e:	d30c      	bcc.n	80143aa <__copybits+0x36>
 8014390:	1aa3      	subs	r3, r4, r2
 8014392:	3b11      	subs	r3, #17
 8014394:	f023 0303 	bic.w	r3, r3, #3
 8014398:	3211      	adds	r2, #17
 801439a:	42a2      	cmp	r2, r4
 801439c:	bf88      	it	hi
 801439e:	2300      	movhi	r3, #0
 80143a0:	4418      	add	r0, r3
 80143a2:	2300      	movs	r3, #0
 80143a4:	4288      	cmp	r0, r1
 80143a6:	d305      	bcc.n	80143b4 <__copybits+0x40>
 80143a8:	bd70      	pop	{r4, r5, r6, pc}
 80143aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80143ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80143b2:	e7eb      	b.n	801438c <__copybits+0x18>
 80143b4:	f840 3b04 	str.w	r3, [r0], #4
 80143b8:	e7f4      	b.n	80143a4 <__copybits+0x30>

080143ba <__any_on>:
 80143ba:	f100 0214 	add.w	r2, r0, #20
 80143be:	6900      	ldr	r0, [r0, #16]
 80143c0:	114b      	asrs	r3, r1, #5
 80143c2:	4298      	cmp	r0, r3
 80143c4:	b510      	push	{r4, lr}
 80143c6:	db11      	blt.n	80143ec <__any_on+0x32>
 80143c8:	dd0a      	ble.n	80143e0 <__any_on+0x26>
 80143ca:	f011 011f 	ands.w	r1, r1, #31
 80143ce:	d007      	beq.n	80143e0 <__any_on+0x26>
 80143d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80143d4:	fa24 f001 	lsr.w	r0, r4, r1
 80143d8:	fa00 f101 	lsl.w	r1, r0, r1
 80143dc:	428c      	cmp	r4, r1
 80143de:	d10b      	bne.n	80143f8 <__any_on+0x3e>
 80143e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d803      	bhi.n	80143f0 <__any_on+0x36>
 80143e8:	2000      	movs	r0, #0
 80143ea:	bd10      	pop	{r4, pc}
 80143ec:	4603      	mov	r3, r0
 80143ee:	e7f7      	b.n	80143e0 <__any_on+0x26>
 80143f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80143f4:	2900      	cmp	r1, #0
 80143f6:	d0f5      	beq.n	80143e4 <__any_on+0x2a>
 80143f8:	2001      	movs	r0, #1
 80143fa:	e7f6      	b.n	80143ea <__any_on+0x30>

080143fc <__sread>:
 80143fc:	b510      	push	{r4, lr}
 80143fe:	460c      	mov	r4, r1
 8014400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014404:	f000 f8b8 	bl	8014578 <_read_r>
 8014408:	2800      	cmp	r0, #0
 801440a:	bfab      	itete	ge
 801440c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801440e:	89a3      	ldrhlt	r3, [r4, #12]
 8014410:	181b      	addge	r3, r3, r0
 8014412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014416:	bfac      	ite	ge
 8014418:	6563      	strge	r3, [r4, #84]	@ 0x54
 801441a:	81a3      	strhlt	r3, [r4, #12]
 801441c:	bd10      	pop	{r4, pc}

0801441e <__swrite>:
 801441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014422:	461f      	mov	r7, r3
 8014424:	898b      	ldrh	r3, [r1, #12]
 8014426:	05db      	lsls	r3, r3, #23
 8014428:	4605      	mov	r5, r0
 801442a:	460c      	mov	r4, r1
 801442c:	4616      	mov	r6, r2
 801442e:	d505      	bpl.n	801443c <__swrite+0x1e>
 8014430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014434:	2302      	movs	r3, #2
 8014436:	2200      	movs	r2, #0
 8014438:	f000 f88c 	bl	8014554 <_lseek_r>
 801443c:	89a3      	ldrh	r3, [r4, #12]
 801443e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014446:	81a3      	strh	r3, [r4, #12]
 8014448:	4632      	mov	r2, r6
 801444a:	463b      	mov	r3, r7
 801444c:	4628      	mov	r0, r5
 801444e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014452:	f000 b8a3 	b.w	801459c <_write_r>

08014456 <__sseek>:
 8014456:	b510      	push	{r4, lr}
 8014458:	460c      	mov	r4, r1
 801445a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801445e:	f000 f879 	bl	8014554 <_lseek_r>
 8014462:	1c43      	adds	r3, r0, #1
 8014464:	89a3      	ldrh	r3, [r4, #12]
 8014466:	bf15      	itete	ne
 8014468:	6560      	strne	r0, [r4, #84]	@ 0x54
 801446a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801446e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014472:	81a3      	strheq	r3, [r4, #12]
 8014474:	bf18      	it	ne
 8014476:	81a3      	strhne	r3, [r4, #12]
 8014478:	bd10      	pop	{r4, pc}

0801447a <__sclose>:
 801447a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801447e:	f000 b89f 	b.w	80145c0 <_close_r>
	...

08014484 <fiprintf>:
 8014484:	b40e      	push	{r1, r2, r3}
 8014486:	b503      	push	{r0, r1, lr}
 8014488:	4601      	mov	r1, r0
 801448a:	ab03      	add	r3, sp, #12
 801448c:	4805      	ldr	r0, [pc, #20]	@ (80144a4 <fiprintf+0x20>)
 801448e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014492:	6800      	ldr	r0, [r0, #0]
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	f000 f8e1 	bl	801465c <_vfiprintf_r>
 801449a:	b002      	add	sp, #8
 801449c:	f85d eb04 	ldr.w	lr, [sp], #4
 80144a0:	b003      	add	sp, #12
 80144a2:	4770      	bx	lr
 80144a4:	20000278 	.word	0x20000278

080144a8 <_realloc_r>:
 80144a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ac:	4607      	mov	r7, r0
 80144ae:	4614      	mov	r4, r2
 80144b0:	460d      	mov	r5, r1
 80144b2:	b921      	cbnz	r1, 80144be <_realloc_r+0x16>
 80144b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144b8:	4611      	mov	r1, r2
 80144ba:	f7fd ba4b 	b.w	8011954 <_malloc_r>
 80144be:	b92a      	cbnz	r2, 80144cc <_realloc_r+0x24>
 80144c0:	f7fe fbce 	bl	8012c60 <_free_r>
 80144c4:	4625      	mov	r5, r4
 80144c6:	4628      	mov	r0, r5
 80144c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144cc:	f000 f9de 	bl	801488c <_malloc_usable_size_r>
 80144d0:	4284      	cmp	r4, r0
 80144d2:	4606      	mov	r6, r0
 80144d4:	d802      	bhi.n	80144dc <_realloc_r+0x34>
 80144d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80144da:	d8f4      	bhi.n	80144c6 <_realloc_r+0x1e>
 80144dc:	4621      	mov	r1, r4
 80144de:	4638      	mov	r0, r7
 80144e0:	f7fd fa38 	bl	8011954 <_malloc_r>
 80144e4:	4680      	mov	r8, r0
 80144e6:	b908      	cbnz	r0, 80144ec <_realloc_r+0x44>
 80144e8:	4645      	mov	r5, r8
 80144ea:	e7ec      	b.n	80144c6 <_realloc_r+0x1e>
 80144ec:	42b4      	cmp	r4, r6
 80144ee:	4622      	mov	r2, r4
 80144f0:	4629      	mov	r1, r5
 80144f2:	bf28      	it	cs
 80144f4:	4632      	movcs	r2, r6
 80144f6:	f7fe fb77 	bl	8012be8 <memcpy>
 80144fa:	4629      	mov	r1, r5
 80144fc:	4638      	mov	r0, r7
 80144fe:	f7fe fbaf 	bl	8012c60 <_free_r>
 8014502:	e7f1      	b.n	80144e8 <_realloc_r+0x40>

08014504 <__ascii_wctomb>:
 8014504:	4603      	mov	r3, r0
 8014506:	4608      	mov	r0, r1
 8014508:	b141      	cbz	r1, 801451c <__ascii_wctomb+0x18>
 801450a:	2aff      	cmp	r2, #255	@ 0xff
 801450c:	d904      	bls.n	8014518 <__ascii_wctomb+0x14>
 801450e:	228a      	movs	r2, #138	@ 0x8a
 8014510:	601a      	str	r2, [r3, #0]
 8014512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014516:	4770      	bx	lr
 8014518:	700a      	strb	r2, [r1, #0]
 801451a:	2001      	movs	r0, #1
 801451c:	4770      	bx	lr

0801451e <memmove>:
 801451e:	4288      	cmp	r0, r1
 8014520:	b510      	push	{r4, lr}
 8014522:	eb01 0402 	add.w	r4, r1, r2
 8014526:	d902      	bls.n	801452e <memmove+0x10>
 8014528:	4284      	cmp	r4, r0
 801452a:	4623      	mov	r3, r4
 801452c:	d807      	bhi.n	801453e <memmove+0x20>
 801452e:	1e43      	subs	r3, r0, #1
 8014530:	42a1      	cmp	r1, r4
 8014532:	d008      	beq.n	8014546 <memmove+0x28>
 8014534:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014538:	f803 2f01 	strb.w	r2, [r3, #1]!
 801453c:	e7f8      	b.n	8014530 <memmove+0x12>
 801453e:	4402      	add	r2, r0
 8014540:	4601      	mov	r1, r0
 8014542:	428a      	cmp	r2, r1
 8014544:	d100      	bne.n	8014548 <memmove+0x2a>
 8014546:	bd10      	pop	{r4, pc}
 8014548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801454c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014550:	e7f7      	b.n	8014542 <memmove+0x24>
	...

08014554 <_lseek_r>:
 8014554:	b538      	push	{r3, r4, r5, lr}
 8014556:	4d07      	ldr	r5, [pc, #28]	@ (8014574 <_lseek_r+0x20>)
 8014558:	4604      	mov	r4, r0
 801455a:	4608      	mov	r0, r1
 801455c:	4611      	mov	r1, r2
 801455e:	2200      	movs	r2, #0
 8014560:	602a      	str	r2, [r5, #0]
 8014562:	461a      	mov	r2, r3
 8014564:	f7ef fc27 	bl	8003db6 <_lseek>
 8014568:	1c43      	adds	r3, r0, #1
 801456a:	d102      	bne.n	8014572 <_lseek_r+0x1e>
 801456c:	682b      	ldr	r3, [r5, #0]
 801456e:	b103      	cbz	r3, 8014572 <_lseek_r+0x1e>
 8014570:	6023      	str	r3, [r4, #0]
 8014572:	bd38      	pop	{r3, r4, r5, pc}
 8014574:	20006d60 	.word	0x20006d60

08014578 <_read_r>:
 8014578:	b538      	push	{r3, r4, r5, lr}
 801457a:	4d07      	ldr	r5, [pc, #28]	@ (8014598 <_read_r+0x20>)
 801457c:	4604      	mov	r4, r0
 801457e:	4608      	mov	r0, r1
 8014580:	4611      	mov	r1, r2
 8014582:	2200      	movs	r2, #0
 8014584:	602a      	str	r2, [r5, #0]
 8014586:	461a      	mov	r2, r3
 8014588:	f7ef fbb5 	bl	8003cf6 <_read>
 801458c:	1c43      	adds	r3, r0, #1
 801458e:	d102      	bne.n	8014596 <_read_r+0x1e>
 8014590:	682b      	ldr	r3, [r5, #0]
 8014592:	b103      	cbz	r3, 8014596 <_read_r+0x1e>
 8014594:	6023      	str	r3, [r4, #0]
 8014596:	bd38      	pop	{r3, r4, r5, pc}
 8014598:	20006d60 	.word	0x20006d60

0801459c <_write_r>:
 801459c:	b538      	push	{r3, r4, r5, lr}
 801459e:	4d07      	ldr	r5, [pc, #28]	@ (80145bc <_write_r+0x20>)
 80145a0:	4604      	mov	r4, r0
 80145a2:	4608      	mov	r0, r1
 80145a4:	4611      	mov	r1, r2
 80145a6:	2200      	movs	r2, #0
 80145a8:	602a      	str	r2, [r5, #0]
 80145aa:	461a      	mov	r2, r3
 80145ac:	f7ef fbc0 	bl	8003d30 <_write>
 80145b0:	1c43      	adds	r3, r0, #1
 80145b2:	d102      	bne.n	80145ba <_write_r+0x1e>
 80145b4:	682b      	ldr	r3, [r5, #0]
 80145b6:	b103      	cbz	r3, 80145ba <_write_r+0x1e>
 80145b8:	6023      	str	r3, [r4, #0]
 80145ba:	bd38      	pop	{r3, r4, r5, pc}
 80145bc:	20006d60 	.word	0x20006d60

080145c0 <_close_r>:
 80145c0:	b538      	push	{r3, r4, r5, lr}
 80145c2:	4d06      	ldr	r5, [pc, #24]	@ (80145dc <_close_r+0x1c>)
 80145c4:	2300      	movs	r3, #0
 80145c6:	4604      	mov	r4, r0
 80145c8:	4608      	mov	r0, r1
 80145ca:	602b      	str	r3, [r5, #0]
 80145cc:	f7ef fbcc 	bl	8003d68 <_close>
 80145d0:	1c43      	adds	r3, r0, #1
 80145d2:	d102      	bne.n	80145da <_close_r+0x1a>
 80145d4:	682b      	ldr	r3, [r5, #0]
 80145d6:	b103      	cbz	r3, 80145da <_close_r+0x1a>
 80145d8:	6023      	str	r3, [r4, #0]
 80145da:	bd38      	pop	{r3, r4, r5, pc}
 80145dc:	20006d60 	.word	0x20006d60

080145e0 <_calloc_r>:
 80145e0:	b570      	push	{r4, r5, r6, lr}
 80145e2:	fba1 5402 	umull	r5, r4, r1, r2
 80145e6:	b934      	cbnz	r4, 80145f6 <_calloc_r+0x16>
 80145e8:	4629      	mov	r1, r5
 80145ea:	f7fd f9b3 	bl	8011954 <_malloc_r>
 80145ee:	4606      	mov	r6, r0
 80145f0:	b928      	cbnz	r0, 80145fe <_calloc_r+0x1e>
 80145f2:	4630      	mov	r0, r6
 80145f4:	bd70      	pop	{r4, r5, r6, pc}
 80145f6:	220c      	movs	r2, #12
 80145f8:	6002      	str	r2, [r0, #0]
 80145fa:	2600      	movs	r6, #0
 80145fc:	e7f9      	b.n	80145f2 <_calloc_r+0x12>
 80145fe:	462a      	mov	r2, r5
 8014600:	4621      	mov	r1, r4
 8014602:	f7fe f997 	bl	8012934 <memset>
 8014606:	e7f4      	b.n	80145f2 <_calloc_r+0x12>

08014608 <__sfputc_r>:
 8014608:	6893      	ldr	r3, [r2, #8]
 801460a:	3b01      	subs	r3, #1
 801460c:	2b00      	cmp	r3, #0
 801460e:	b410      	push	{r4}
 8014610:	6093      	str	r3, [r2, #8]
 8014612:	da08      	bge.n	8014626 <__sfputc_r+0x1e>
 8014614:	6994      	ldr	r4, [r2, #24]
 8014616:	42a3      	cmp	r3, r4
 8014618:	db01      	blt.n	801461e <__sfputc_r+0x16>
 801461a:	290a      	cmp	r1, #10
 801461c:	d103      	bne.n	8014626 <__sfputc_r+0x1e>
 801461e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014622:	f000 b93b 	b.w	801489c <__swbuf_r>
 8014626:	6813      	ldr	r3, [r2, #0]
 8014628:	1c58      	adds	r0, r3, #1
 801462a:	6010      	str	r0, [r2, #0]
 801462c:	7019      	strb	r1, [r3, #0]
 801462e:	4608      	mov	r0, r1
 8014630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014634:	4770      	bx	lr

08014636 <__sfputs_r>:
 8014636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014638:	4606      	mov	r6, r0
 801463a:	460f      	mov	r7, r1
 801463c:	4614      	mov	r4, r2
 801463e:	18d5      	adds	r5, r2, r3
 8014640:	42ac      	cmp	r4, r5
 8014642:	d101      	bne.n	8014648 <__sfputs_r+0x12>
 8014644:	2000      	movs	r0, #0
 8014646:	e007      	b.n	8014658 <__sfputs_r+0x22>
 8014648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801464c:	463a      	mov	r2, r7
 801464e:	4630      	mov	r0, r6
 8014650:	f7ff ffda 	bl	8014608 <__sfputc_r>
 8014654:	1c43      	adds	r3, r0, #1
 8014656:	d1f3      	bne.n	8014640 <__sfputs_r+0xa>
 8014658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801465c <_vfiprintf_r>:
 801465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014660:	460d      	mov	r5, r1
 8014662:	b09d      	sub	sp, #116	@ 0x74
 8014664:	4614      	mov	r4, r2
 8014666:	4698      	mov	r8, r3
 8014668:	4606      	mov	r6, r0
 801466a:	b118      	cbz	r0, 8014674 <_vfiprintf_r+0x18>
 801466c:	6a03      	ldr	r3, [r0, #32]
 801466e:	b90b      	cbnz	r3, 8014674 <_vfiprintf_r+0x18>
 8014670:	f7fd fa88 	bl	8011b84 <__sinit>
 8014674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014676:	07d9      	lsls	r1, r3, #31
 8014678:	d405      	bmi.n	8014686 <_vfiprintf_r+0x2a>
 801467a:	89ab      	ldrh	r3, [r5, #12]
 801467c:	059a      	lsls	r2, r3, #22
 801467e:	d402      	bmi.n	8014686 <_vfiprintf_r+0x2a>
 8014680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014682:	f7ef fe23 	bl	80042cc <__retarget_lock_acquire_recursive>
 8014686:	89ab      	ldrh	r3, [r5, #12]
 8014688:	071b      	lsls	r3, r3, #28
 801468a:	d501      	bpl.n	8014690 <_vfiprintf_r+0x34>
 801468c:	692b      	ldr	r3, [r5, #16]
 801468e:	b99b      	cbnz	r3, 80146b8 <_vfiprintf_r+0x5c>
 8014690:	4629      	mov	r1, r5
 8014692:	4630      	mov	r0, r6
 8014694:	f000 f940 	bl	8014918 <__swsetup_r>
 8014698:	b170      	cbz	r0, 80146b8 <_vfiprintf_r+0x5c>
 801469a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801469c:	07dc      	lsls	r4, r3, #31
 801469e:	d504      	bpl.n	80146aa <_vfiprintf_r+0x4e>
 80146a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146a4:	b01d      	add	sp, #116	@ 0x74
 80146a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146aa:	89ab      	ldrh	r3, [r5, #12]
 80146ac:	0598      	lsls	r0, r3, #22
 80146ae:	d4f7      	bmi.n	80146a0 <_vfiprintf_r+0x44>
 80146b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146b2:	f7ef fe20 	bl	80042f6 <__retarget_lock_release_recursive>
 80146b6:	e7f3      	b.n	80146a0 <_vfiprintf_r+0x44>
 80146b8:	2300      	movs	r3, #0
 80146ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80146bc:	2320      	movs	r3, #32
 80146be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80146c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80146c6:	2330      	movs	r3, #48	@ 0x30
 80146c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014878 <_vfiprintf_r+0x21c>
 80146cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80146d0:	f04f 0901 	mov.w	r9, #1
 80146d4:	4623      	mov	r3, r4
 80146d6:	469a      	mov	sl, r3
 80146d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146dc:	b10a      	cbz	r2, 80146e2 <_vfiprintf_r+0x86>
 80146de:	2a25      	cmp	r2, #37	@ 0x25
 80146e0:	d1f9      	bne.n	80146d6 <_vfiprintf_r+0x7a>
 80146e2:	ebba 0b04 	subs.w	fp, sl, r4
 80146e6:	d00b      	beq.n	8014700 <_vfiprintf_r+0xa4>
 80146e8:	465b      	mov	r3, fp
 80146ea:	4622      	mov	r2, r4
 80146ec:	4629      	mov	r1, r5
 80146ee:	4630      	mov	r0, r6
 80146f0:	f7ff ffa1 	bl	8014636 <__sfputs_r>
 80146f4:	3001      	adds	r0, #1
 80146f6:	f000 80a7 	beq.w	8014848 <_vfiprintf_r+0x1ec>
 80146fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80146fc:	445a      	add	r2, fp
 80146fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8014700:	f89a 3000 	ldrb.w	r3, [sl]
 8014704:	2b00      	cmp	r3, #0
 8014706:	f000 809f 	beq.w	8014848 <_vfiprintf_r+0x1ec>
 801470a:	2300      	movs	r3, #0
 801470c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014714:	f10a 0a01 	add.w	sl, sl, #1
 8014718:	9304      	str	r3, [sp, #16]
 801471a:	9307      	str	r3, [sp, #28]
 801471c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014720:	931a      	str	r3, [sp, #104]	@ 0x68
 8014722:	4654      	mov	r4, sl
 8014724:	2205      	movs	r2, #5
 8014726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801472a:	4853      	ldr	r0, [pc, #332]	@ (8014878 <_vfiprintf_r+0x21c>)
 801472c:	f7eb fd70 	bl	8000210 <memchr>
 8014730:	9a04      	ldr	r2, [sp, #16]
 8014732:	b9d8      	cbnz	r0, 801476c <_vfiprintf_r+0x110>
 8014734:	06d1      	lsls	r1, r2, #27
 8014736:	bf44      	itt	mi
 8014738:	2320      	movmi	r3, #32
 801473a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801473e:	0713      	lsls	r3, r2, #28
 8014740:	bf44      	itt	mi
 8014742:	232b      	movmi	r3, #43	@ 0x2b
 8014744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014748:	f89a 3000 	ldrb.w	r3, [sl]
 801474c:	2b2a      	cmp	r3, #42	@ 0x2a
 801474e:	d015      	beq.n	801477c <_vfiprintf_r+0x120>
 8014750:	9a07      	ldr	r2, [sp, #28]
 8014752:	4654      	mov	r4, sl
 8014754:	2000      	movs	r0, #0
 8014756:	f04f 0c0a 	mov.w	ip, #10
 801475a:	4621      	mov	r1, r4
 801475c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014760:	3b30      	subs	r3, #48	@ 0x30
 8014762:	2b09      	cmp	r3, #9
 8014764:	d94b      	bls.n	80147fe <_vfiprintf_r+0x1a2>
 8014766:	b1b0      	cbz	r0, 8014796 <_vfiprintf_r+0x13a>
 8014768:	9207      	str	r2, [sp, #28]
 801476a:	e014      	b.n	8014796 <_vfiprintf_r+0x13a>
 801476c:	eba0 0308 	sub.w	r3, r0, r8
 8014770:	fa09 f303 	lsl.w	r3, r9, r3
 8014774:	4313      	orrs	r3, r2
 8014776:	9304      	str	r3, [sp, #16]
 8014778:	46a2      	mov	sl, r4
 801477a:	e7d2      	b.n	8014722 <_vfiprintf_r+0xc6>
 801477c:	9b03      	ldr	r3, [sp, #12]
 801477e:	1d19      	adds	r1, r3, #4
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	9103      	str	r1, [sp, #12]
 8014784:	2b00      	cmp	r3, #0
 8014786:	bfbb      	ittet	lt
 8014788:	425b      	neglt	r3, r3
 801478a:	f042 0202 	orrlt.w	r2, r2, #2
 801478e:	9307      	strge	r3, [sp, #28]
 8014790:	9307      	strlt	r3, [sp, #28]
 8014792:	bfb8      	it	lt
 8014794:	9204      	strlt	r2, [sp, #16]
 8014796:	7823      	ldrb	r3, [r4, #0]
 8014798:	2b2e      	cmp	r3, #46	@ 0x2e
 801479a:	d10a      	bne.n	80147b2 <_vfiprintf_r+0x156>
 801479c:	7863      	ldrb	r3, [r4, #1]
 801479e:	2b2a      	cmp	r3, #42	@ 0x2a
 80147a0:	d132      	bne.n	8014808 <_vfiprintf_r+0x1ac>
 80147a2:	9b03      	ldr	r3, [sp, #12]
 80147a4:	1d1a      	adds	r2, r3, #4
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	9203      	str	r2, [sp, #12]
 80147aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80147ae:	3402      	adds	r4, #2
 80147b0:	9305      	str	r3, [sp, #20]
 80147b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014888 <_vfiprintf_r+0x22c>
 80147b6:	7821      	ldrb	r1, [r4, #0]
 80147b8:	2203      	movs	r2, #3
 80147ba:	4650      	mov	r0, sl
 80147bc:	f7eb fd28 	bl	8000210 <memchr>
 80147c0:	b138      	cbz	r0, 80147d2 <_vfiprintf_r+0x176>
 80147c2:	9b04      	ldr	r3, [sp, #16]
 80147c4:	eba0 000a 	sub.w	r0, r0, sl
 80147c8:	2240      	movs	r2, #64	@ 0x40
 80147ca:	4082      	lsls	r2, r0
 80147cc:	4313      	orrs	r3, r2
 80147ce:	3401      	adds	r4, #1
 80147d0:	9304      	str	r3, [sp, #16]
 80147d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147d6:	4829      	ldr	r0, [pc, #164]	@ (801487c <_vfiprintf_r+0x220>)
 80147d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80147dc:	2206      	movs	r2, #6
 80147de:	f7eb fd17 	bl	8000210 <memchr>
 80147e2:	2800      	cmp	r0, #0
 80147e4:	d03f      	beq.n	8014866 <_vfiprintf_r+0x20a>
 80147e6:	4b26      	ldr	r3, [pc, #152]	@ (8014880 <_vfiprintf_r+0x224>)
 80147e8:	bb1b      	cbnz	r3, 8014832 <_vfiprintf_r+0x1d6>
 80147ea:	9b03      	ldr	r3, [sp, #12]
 80147ec:	3307      	adds	r3, #7
 80147ee:	f023 0307 	bic.w	r3, r3, #7
 80147f2:	3308      	adds	r3, #8
 80147f4:	9303      	str	r3, [sp, #12]
 80147f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147f8:	443b      	add	r3, r7
 80147fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80147fc:	e76a      	b.n	80146d4 <_vfiprintf_r+0x78>
 80147fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014802:	460c      	mov	r4, r1
 8014804:	2001      	movs	r0, #1
 8014806:	e7a8      	b.n	801475a <_vfiprintf_r+0xfe>
 8014808:	2300      	movs	r3, #0
 801480a:	3401      	adds	r4, #1
 801480c:	9305      	str	r3, [sp, #20]
 801480e:	4619      	mov	r1, r3
 8014810:	f04f 0c0a 	mov.w	ip, #10
 8014814:	4620      	mov	r0, r4
 8014816:	f810 2b01 	ldrb.w	r2, [r0], #1
 801481a:	3a30      	subs	r2, #48	@ 0x30
 801481c:	2a09      	cmp	r2, #9
 801481e:	d903      	bls.n	8014828 <_vfiprintf_r+0x1cc>
 8014820:	2b00      	cmp	r3, #0
 8014822:	d0c6      	beq.n	80147b2 <_vfiprintf_r+0x156>
 8014824:	9105      	str	r1, [sp, #20]
 8014826:	e7c4      	b.n	80147b2 <_vfiprintf_r+0x156>
 8014828:	fb0c 2101 	mla	r1, ip, r1, r2
 801482c:	4604      	mov	r4, r0
 801482e:	2301      	movs	r3, #1
 8014830:	e7f0      	b.n	8014814 <_vfiprintf_r+0x1b8>
 8014832:	ab03      	add	r3, sp, #12
 8014834:	9300      	str	r3, [sp, #0]
 8014836:	462a      	mov	r2, r5
 8014838:	4b12      	ldr	r3, [pc, #72]	@ (8014884 <_vfiprintf_r+0x228>)
 801483a:	a904      	add	r1, sp, #16
 801483c:	4630      	mov	r0, r6
 801483e:	f3af 8000 	nop.w
 8014842:	4607      	mov	r7, r0
 8014844:	1c78      	adds	r0, r7, #1
 8014846:	d1d6      	bne.n	80147f6 <_vfiprintf_r+0x19a>
 8014848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801484a:	07d9      	lsls	r1, r3, #31
 801484c:	d405      	bmi.n	801485a <_vfiprintf_r+0x1fe>
 801484e:	89ab      	ldrh	r3, [r5, #12]
 8014850:	059a      	lsls	r2, r3, #22
 8014852:	d402      	bmi.n	801485a <_vfiprintf_r+0x1fe>
 8014854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014856:	f7ef fd4e 	bl	80042f6 <__retarget_lock_release_recursive>
 801485a:	89ab      	ldrh	r3, [r5, #12]
 801485c:	065b      	lsls	r3, r3, #25
 801485e:	f53f af1f 	bmi.w	80146a0 <_vfiprintf_r+0x44>
 8014862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014864:	e71e      	b.n	80146a4 <_vfiprintf_r+0x48>
 8014866:	ab03      	add	r3, sp, #12
 8014868:	9300      	str	r3, [sp, #0]
 801486a:	462a      	mov	r2, r5
 801486c:	4b05      	ldr	r3, [pc, #20]	@ (8014884 <_vfiprintf_r+0x228>)
 801486e:	a904      	add	r1, sp, #16
 8014870:	4630      	mov	r0, r6
 8014872:	f7fe ff4f 	bl	8013714 <_printf_i>
 8014876:	e7e4      	b.n	8014842 <_vfiprintf_r+0x1e6>
 8014878:	08015594 	.word	0x08015594
 801487c:	0801559e 	.word	0x0801559e
 8014880:	00000000 	.word	0x00000000
 8014884:	08014637 	.word	0x08014637
 8014888:	0801559a 	.word	0x0801559a

0801488c <_malloc_usable_size_r>:
 801488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014890:	1f18      	subs	r0, r3, #4
 8014892:	2b00      	cmp	r3, #0
 8014894:	bfbc      	itt	lt
 8014896:	580b      	ldrlt	r3, [r1, r0]
 8014898:	18c0      	addlt	r0, r0, r3
 801489a:	4770      	bx	lr

0801489c <__swbuf_r>:
 801489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801489e:	460e      	mov	r6, r1
 80148a0:	4614      	mov	r4, r2
 80148a2:	4605      	mov	r5, r0
 80148a4:	b118      	cbz	r0, 80148ae <__swbuf_r+0x12>
 80148a6:	6a03      	ldr	r3, [r0, #32]
 80148a8:	b90b      	cbnz	r3, 80148ae <__swbuf_r+0x12>
 80148aa:	f7fd f96b 	bl	8011b84 <__sinit>
 80148ae:	69a3      	ldr	r3, [r4, #24]
 80148b0:	60a3      	str	r3, [r4, #8]
 80148b2:	89a3      	ldrh	r3, [r4, #12]
 80148b4:	071a      	lsls	r2, r3, #28
 80148b6:	d501      	bpl.n	80148bc <__swbuf_r+0x20>
 80148b8:	6923      	ldr	r3, [r4, #16]
 80148ba:	b943      	cbnz	r3, 80148ce <__swbuf_r+0x32>
 80148bc:	4621      	mov	r1, r4
 80148be:	4628      	mov	r0, r5
 80148c0:	f000 f82a 	bl	8014918 <__swsetup_r>
 80148c4:	b118      	cbz	r0, 80148ce <__swbuf_r+0x32>
 80148c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80148ca:	4638      	mov	r0, r7
 80148cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ce:	6823      	ldr	r3, [r4, #0]
 80148d0:	6922      	ldr	r2, [r4, #16]
 80148d2:	1a98      	subs	r0, r3, r2
 80148d4:	6963      	ldr	r3, [r4, #20]
 80148d6:	b2f6      	uxtb	r6, r6
 80148d8:	4283      	cmp	r3, r0
 80148da:	4637      	mov	r7, r6
 80148dc:	dc05      	bgt.n	80148ea <__swbuf_r+0x4e>
 80148de:	4621      	mov	r1, r4
 80148e0:	4628      	mov	r0, r5
 80148e2:	f7ff f8b9 	bl	8013a58 <_fflush_r>
 80148e6:	2800      	cmp	r0, #0
 80148e8:	d1ed      	bne.n	80148c6 <__swbuf_r+0x2a>
 80148ea:	68a3      	ldr	r3, [r4, #8]
 80148ec:	3b01      	subs	r3, #1
 80148ee:	60a3      	str	r3, [r4, #8]
 80148f0:	6823      	ldr	r3, [r4, #0]
 80148f2:	1c5a      	adds	r2, r3, #1
 80148f4:	6022      	str	r2, [r4, #0]
 80148f6:	701e      	strb	r6, [r3, #0]
 80148f8:	6962      	ldr	r2, [r4, #20]
 80148fa:	1c43      	adds	r3, r0, #1
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d004      	beq.n	801490a <__swbuf_r+0x6e>
 8014900:	89a3      	ldrh	r3, [r4, #12]
 8014902:	07db      	lsls	r3, r3, #31
 8014904:	d5e1      	bpl.n	80148ca <__swbuf_r+0x2e>
 8014906:	2e0a      	cmp	r6, #10
 8014908:	d1df      	bne.n	80148ca <__swbuf_r+0x2e>
 801490a:	4621      	mov	r1, r4
 801490c:	4628      	mov	r0, r5
 801490e:	f7ff f8a3 	bl	8013a58 <_fflush_r>
 8014912:	2800      	cmp	r0, #0
 8014914:	d0d9      	beq.n	80148ca <__swbuf_r+0x2e>
 8014916:	e7d6      	b.n	80148c6 <__swbuf_r+0x2a>

08014918 <__swsetup_r>:
 8014918:	b538      	push	{r3, r4, r5, lr}
 801491a:	4b29      	ldr	r3, [pc, #164]	@ (80149c0 <__swsetup_r+0xa8>)
 801491c:	4605      	mov	r5, r0
 801491e:	6818      	ldr	r0, [r3, #0]
 8014920:	460c      	mov	r4, r1
 8014922:	b118      	cbz	r0, 801492c <__swsetup_r+0x14>
 8014924:	6a03      	ldr	r3, [r0, #32]
 8014926:	b90b      	cbnz	r3, 801492c <__swsetup_r+0x14>
 8014928:	f7fd f92c 	bl	8011b84 <__sinit>
 801492c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014930:	0719      	lsls	r1, r3, #28
 8014932:	d422      	bmi.n	801497a <__swsetup_r+0x62>
 8014934:	06da      	lsls	r2, r3, #27
 8014936:	d407      	bmi.n	8014948 <__swsetup_r+0x30>
 8014938:	2209      	movs	r2, #9
 801493a:	602a      	str	r2, [r5, #0]
 801493c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014940:	81a3      	strh	r3, [r4, #12]
 8014942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014946:	e033      	b.n	80149b0 <__swsetup_r+0x98>
 8014948:	0758      	lsls	r0, r3, #29
 801494a:	d512      	bpl.n	8014972 <__swsetup_r+0x5a>
 801494c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801494e:	b141      	cbz	r1, 8014962 <__swsetup_r+0x4a>
 8014950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014954:	4299      	cmp	r1, r3
 8014956:	d002      	beq.n	801495e <__swsetup_r+0x46>
 8014958:	4628      	mov	r0, r5
 801495a:	f7fe f981 	bl	8012c60 <_free_r>
 801495e:	2300      	movs	r3, #0
 8014960:	6363      	str	r3, [r4, #52]	@ 0x34
 8014962:	89a3      	ldrh	r3, [r4, #12]
 8014964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014968:	81a3      	strh	r3, [r4, #12]
 801496a:	2300      	movs	r3, #0
 801496c:	6063      	str	r3, [r4, #4]
 801496e:	6923      	ldr	r3, [r4, #16]
 8014970:	6023      	str	r3, [r4, #0]
 8014972:	89a3      	ldrh	r3, [r4, #12]
 8014974:	f043 0308 	orr.w	r3, r3, #8
 8014978:	81a3      	strh	r3, [r4, #12]
 801497a:	6923      	ldr	r3, [r4, #16]
 801497c:	b94b      	cbnz	r3, 8014992 <__swsetup_r+0x7a>
 801497e:	89a3      	ldrh	r3, [r4, #12]
 8014980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014988:	d003      	beq.n	8014992 <__swsetup_r+0x7a>
 801498a:	4621      	mov	r1, r4
 801498c:	4628      	mov	r0, r5
 801498e:	f000 f83f 	bl	8014a10 <__smakebuf_r>
 8014992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014996:	f013 0201 	ands.w	r2, r3, #1
 801499a:	d00a      	beq.n	80149b2 <__swsetup_r+0x9a>
 801499c:	2200      	movs	r2, #0
 801499e:	60a2      	str	r2, [r4, #8]
 80149a0:	6962      	ldr	r2, [r4, #20]
 80149a2:	4252      	negs	r2, r2
 80149a4:	61a2      	str	r2, [r4, #24]
 80149a6:	6922      	ldr	r2, [r4, #16]
 80149a8:	b942      	cbnz	r2, 80149bc <__swsetup_r+0xa4>
 80149aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80149ae:	d1c5      	bne.n	801493c <__swsetup_r+0x24>
 80149b0:	bd38      	pop	{r3, r4, r5, pc}
 80149b2:	0799      	lsls	r1, r3, #30
 80149b4:	bf58      	it	pl
 80149b6:	6962      	ldrpl	r2, [r4, #20]
 80149b8:	60a2      	str	r2, [r4, #8]
 80149ba:	e7f4      	b.n	80149a6 <__swsetup_r+0x8e>
 80149bc:	2000      	movs	r0, #0
 80149be:	e7f7      	b.n	80149b0 <__swsetup_r+0x98>
 80149c0:	20000278 	.word	0x20000278

080149c4 <__swhatbuf_r>:
 80149c4:	b570      	push	{r4, r5, r6, lr}
 80149c6:	460c      	mov	r4, r1
 80149c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149cc:	2900      	cmp	r1, #0
 80149ce:	b096      	sub	sp, #88	@ 0x58
 80149d0:	4615      	mov	r5, r2
 80149d2:	461e      	mov	r6, r3
 80149d4:	da0d      	bge.n	80149f2 <__swhatbuf_r+0x2e>
 80149d6:	89a3      	ldrh	r3, [r4, #12]
 80149d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80149dc:	f04f 0100 	mov.w	r1, #0
 80149e0:	bf14      	ite	ne
 80149e2:	2340      	movne	r3, #64	@ 0x40
 80149e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80149e8:	2000      	movs	r0, #0
 80149ea:	6031      	str	r1, [r6, #0]
 80149ec:	602b      	str	r3, [r5, #0]
 80149ee:	b016      	add	sp, #88	@ 0x58
 80149f0:	bd70      	pop	{r4, r5, r6, pc}
 80149f2:	466a      	mov	r2, sp
 80149f4:	f000 f858 	bl	8014aa8 <_fstat_r>
 80149f8:	2800      	cmp	r0, #0
 80149fa:	dbec      	blt.n	80149d6 <__swhatbuf_r+0x12>
 80149fc:	9901      	ldr	r1, [sp, #4]
 80149fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014a02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014a06:	4259      	negs	r1, r3
 8014a08:	4159      	adcs	r1, r3
 8014a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014a0e:	e7eb      	b.n	80149e8 <__swhatbuf_r+0x24>

08014a10 <__smakebuf_r>:
 8014a10:	898b      	ldrh	r3, [r1, #12]
 8014a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a14:	079d      	lsls	r5, r3, #30
 8014a16:	4606      	mov	r6, r0
 8014a18:	460c      	mov	r4, r1
 8014a1a:	d507      	bpl.n	8014a2c <__smakebuf_r+0x1c>
 8014a1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014a20:	6023      	str	r3, [r4, #0]
 8014a22:	6123      	str	r3, [r4, #16]
 8014a24:	2301      	movs	r3, #1
 8014a26:	6163      	str	r3, [r4, #20]
 8014a28:	b003      	add	sp, #12
 8014a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a2c:	ab01      	add	r3, sp, #4
 8014a2e:	466a      	mov	r2, sp
 8014a30:	f7ff ffc8 	bl	80149c4 <__swhatbuf_r>
 8014a34:	9f00      	ldr	r7, [sp, #0]
 8014a36:	4605      	mov	r5, r0
 8014a38:	4639      	mov	r1, r7
 8014a3a:	4630      	mov	r0, r6
 8014a3c:	f7fc ff8a 	bl	8011954 <_malloc_r>
 8014a40:	b948      	cbnz	r0, 8014a56 <__smakebuf_r+0x46>
 8014a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a46:	059a      	lsls	r2, r3, #22
 8014a48:	d4ee      	bmi.n	8014a28 <__smakebuf_r+0x18>
 8014a4a:	f023 0303 	bic.w	r3, r3, #3
 8014a4e:	f043 0302 	orr.w	r3, r3, #2
 8014a52:	81a3      	strh	r3, [r4, #12]
 8014a54:	e7e2      	b.n	8014a1c <__smakebuf_r+0xc>
 8014a56:	89a3      	ldrh	r3, [r4, #12]
 8014a58:	6020      	str	r0, [r4, #0]
 8014a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a5e:	81a3      	strh	r3, [r4, #12]
 8014a60:	9b01      	ldr	r3, [sp, #4]
 8014a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014a66:	b15b      	cbz	r3, 8014a80 <__smakebuf_r+0x70>
 8014a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a6c:	4630      	mov	r0, r6
 8014a6e:	f000 f80b 	bl	8014a88 <_isatty_r>
 8014a72:	b128      	cbz	r0, 8014a80 <__smakebuf_r+0x70>
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	f023 0303 	bic.w	r3, r3, #3
 8014a7a:	f043 0301 	orr.w	r3, r3, #1
 8014a7e:	81a3      	strh	r3, [r4, #12]
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	431d      	orrs	r5, r3
 8014a84:	81a5      	strh	r5, [r4, #12]
 8014a86:	e7cf      	b.n	8014a28 <__smakebuf_r+0x18>

08014a88 <_isatty_r>:
 8014a88:	b538      	push	{r3, r4, r5, lr}
 8014a8a:	4d06      	ldr	r5, [pc, #24]	@ (8014aa4 <_isatty_r+0x1c>)
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	4604      	mov	r4, r0
 8014a90:	4608      	mov	r0, r1
 8014a92:	602b      	str	r3, [r5, #0]
 8014a94:	f7ef f984 	bl	8003da0 <_isatty>
 8014a98:	1c43      	adds	r3, r0, #1
 8014a9a:	d102      	bne.n	8014aa2 <_isatty_r+0x1a>
 8014a9c:	682b      	ldr	r3, [r5, #0]
 8014a9e:	b103      	cbz	r3, 8014aa2 <_isatty_r+0x1a>
 8014aa0:	6023      	str	r3, [r4, #0]
 8014aa2:	bd38      	pop	{r3, r4, r5, pc}
 8014aa4:	20006d60 	.word	0x20006d60

08014aa8 <_fstat_r>:
 8014aa8:	b538      	push	{r3, r4, r5, lr}
 8014aaa:	4d07      	ldr	r5, [pc, #28]	@ (8014ac8 <_fstat_r+0x20>)
 8014aac:	2300      	movs	r3, #0
 8014aae:	4604      	mov	r4, r0
 8014ab0:	4608      	mov	r0, r1
 8014ab2:	4611      	mov	r1, r2
 8014ab4:	602b      	str	r3, [r5, #0]
 8014ab6:	f7ef f963 	bl	8003d80 <_fstat>
 8014aba:	1c43      	adds	r3, r0, #1
 8014abc:	d102      	bne.n	8014ac4 <_fstat_r+0x1c>
 8014abe:	682b      	ldr	r3, [r5, #0]
 8014ac0:	b103      	cbz	r3, 8014ac4 <_fstat_r+0x1c>
 8014ac2:	6023      	str	r3, [r4, #0]
 8014ac4:	bd38      	pop	{r3, r4, r5, pc}
 8014ac6:	bf00      	nop
 8014ac8:	20006d60 	.word	0x20006d60

08014acc <_init>:
 8014acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ace:	bf00      	nop
 8014ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ad2:	bc08      	pop	{r3}
 8014ad4:	469e      	mov	lr, r3
 8014ad6:	4770      	bx	lr

08014ad8 <_fini>:
 8014ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ada:	bf00      	nop
 8014adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ade:	bc08      	pop	{r3}
 8014ae0:	469e      	mov	lr, r3
 8014ae2:	4770      	bx	lr
